import { z } from 'zod';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';

import { handleRemember, rememberSchema } from './mcp_tools/remember.js';
import handleNextRule, { nextRuleSchema } from './mcp_tools/next_rule.js';
import { handleCommit } from './mcp_tools/commit.js';
import { handleCreateTask } from './mcp_tools/create_task.js';
import { handleUpdateTask } from './mcp_tools/update_task.js';
import { handleGetAllTasks } from './mcp_tools/get_all_tasks.js';
import { handleGetNextTasks } from './mcp_tools/get_next_tasks.js';
import { handleReadUserbrief } from './mcp_tools/read_userbrief.js';
import { handleUpdateUserbrief } from './mcp_tools/update_userbrief.js';
import { handleDeleteLongTermMemory, deleteLongTermMemorySchema } from './mcp_tools/delete_long_term_memory.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import process from 'process';

// Create a new MCP server instance
const server = new McpServer({
    name: 'MemoryBankMCP',
    version: '1.2.0'
});

// Helper function to wrap handlers with error catching
function safeHandler(handler) {
    return async (args, a, b) => {
        try {
            return await handler(args, a, b);
        } catch (error) {
            // Re-throwing the error should be handled by the MCP SDK to create a proper JSON-RPC error response.
            throw new Error(error.message);
        }
    };
}

// Register the tools with the server

server.tool('remember', rememberSchema, safeHandler(handleRemember));

server.tool('next_rule', nextRuleSchema, safeHandler(handleNextRule));

server.tool('commit', {
    emoji: z.string().describe("EMOJI DE COMMIT : Emoji unique qui repr√©sente le type de changement effectu√©. Utilisez les emojis conventionnels : ‚ú® pour nouvelles fonctionnalit√©s, üêõ pour corrections de bugs, üìù pour documentation, ‚ôªÔ∏è pour refactoring, ‚úÖ pour tests, üîß pour configuration, üöÄ pour am√©liorations de performance, üîí pour corrections de s√©curit√©, üíÑ pour UI/styling, üóÉÔ∏è pour changements de base de donn√©es, üî• pour suppression de code/fichiers."),
    type: z.string().describe("TYPE DE COMMIT : Type de commit conventionnel qui cat√©gorise le changement. Utilisez les types standards : 'feat' (nouvelle fonctionnalit√©), 'fix' (correction de bug), 'docs' (documentation), 'style' (formatage, pas de changement de code), 'refactor' (restructuration de code), 'test' (ajout de tests), 'chore' (maintenance), 'perf' (performance), 'ci' (int√©gration continue), 'build' (syst√®me de build), 'revert' (annulation de changements)."),
    title: z.string().describe("TITRE DE COMMIT - R√©digez en fran√ßais un r√©sum√© concis √† l'imp√©ratif du changement (50 caract√®res ou moins). Commencez par un verbe au pr√©sent. Exemples : 'Ajouter le syst√®me d'authentification utilisateur', 'Corriger le timeout de connexion base de donn√©es', 'Mettre √† jour la documentation API', 'Refactoriser la logique de traitement des paiements'. Ne terminez pas par un point."),
    description: z.string().describe("DESCRIPTION DE COMMIT - R√©digez en fran√ßais une explication d√©taill√©e de ce qui a √©t√© chang√©, pourquoi cela a √©t√© chang√©, et tous les d√©tails d'impl√©mentation importants. Incluez : (1) Quels changements sp√©cifiques ont √©t√© faits, (2) Pourquoi ces changements √©taient n√©cessaires, (3) Tout changement cassant ou notes de migration, (4) Num√©ros d'issues li√©s si applicable. Utilisez des puces pour plusieurs changements. Exemple : 'Impl√©mentation du syst√®me d'authentification bas√© sur JWT :\\n\\n- Ajout des endpoints de connexion/d√©connexion avec hachage des mots de passe\\n- Cr√©ation du middleware pour les routes prot√©g√©es\\n- Mise √† jour du mod√®le utilisateur avec les champs d'authentification\\n- Ajout de la gestion de session avec expiration de token 24h\\n\\nCeci r√©sout les exigences de s√©curit√© et permet les fonctionnalit√©s sp√©cifiques √† l'utilisateur.'")
}, safeHandler(handleCommit));

server.tool('create_task', {
    title: z.string().min(1).max(200).describe("TITRE DE T√ÇCHE - R√©digez en fran√ßais un titre clair et actionnable qui d√©crit ce qui doit √™tre accompli (1-200 caract√®res). Utilisez l'imp√©ratif et soyez pr√©cis. Exemples : 'Impl√©menter le syst√®me d'authentification utilisateur', 'Corriger les probl√®mes de timeout de base de donn√©es', 'Cr√©er la documentation API pour les endpoints de paiement', 'Refactoriser les composants de l'interface utilisateur'. √âvitez les titres vagues comme 'Corriger un bug' ou 'Mettre √† jour le code'."),
    short_description: z.string().min(1).max(500).describe("R√âSUM√â BREF - R√©digez en fran√ßais un aper√ßu concis de la t√¢che qui fournit le contexte et la port√©e (1-500 caract√®res). Doit r√©pondre bri√®vement au 'quoi' et 'pourquoi'. Exemple : 'Cr√©er un syst√®me de connexion s√©curis√© avec des tokens JWT pour remplacer l'authentification actuelle bas√©e sur les sessions. Cela am√©liorera la s√©curit√© et permettra l'int√©gration d'applications mobiles.' Incluez l'objectif principal et le b√©n√©fice cl√©."),
    detailed_description: z.string().min(1).describe("SP√âCIFICATIONS D√âTAILL√âES - R√©digez en fran√ßais une description compl√®te de ce qui doit √™tre fait, incluant les exigences sp√©cifiques, crit√®res d'acceptation, d√©tails techniques et approche d'impl√©mentation. Structurez en √©tapes claires ou puces. Incluez : (1) Fonctionnalit√© sp√©cifique √† impl√©menter, (2) Exigences et contraintes techniques, (3) Entr√©es et sorties attendues, (4) Points d'int√©gration avec les syst√®mes existants, (5) Exigences de performance ou qualit√©. Exemple : 'Impl√©menter l'authentification bas√©e sur JWT :\\n\\n**Exigences :**\\n- Connexion utilisateur avec email/mot de passe\\n- G√©n√©ration de token JWT avec expiration 24h\\n- Middleware de protection des routes\\n- Hachage des mots de passe avec bcrypt\\n\\n**Crit√®res d'acceptation :**\\n- Les utilisateurs peuvent se connecter et recevoir un JWT valide\\n- Les routes prot√©g√©es rejettent les tokens invalides\\n- Les mots de passe sont hach√©s de fa√ßon s√©curis√©e\\n- Le m√©canisme de rafra√Æchissement de token fonctionne\\n\\n**Notes techniques :**\\n- Utiliser la biblioth√®que jsonwebtoken\\n- Stocker les tokens dans des cookies httpOnly\\n- Impl√©menter la limitation de taux sur les tentatives de connexion'"),
    dependencies: z.array(z.number().int().positive()).optional().default([]).describe("TASK DEPENDENCIES: Array of task IDs that must be completed before this task can start. Only include direct dependencies that block this task's execution. Example: [12, 15] means tasks 12 and 15 must be completed first. Use empty array [] if no dependencies exist."),
    status: z.enum(['TODO', 'IN_PROGRESS', 'BLOCKED', 'REVIEW']).optional().default('TODO').describe("CURRENT STATUS: Task's current state in the workflow. 'TODO' = not started, 'IN_PROGRESS' = currently being worked on, 'DONE' = completed, 'BLOCKED' = waiting for external dependency, 'REVIEW' = completed but needs review/testing. Default is 'TODO' for new tasks."),
    impacted_files: z.array(z.string()).optional().default([]).describe("AFFECTED FILES: List of files that will be created, modified, or deleted during this task. Use relative paths from project root. Examples: ['src/auth/login.js', 'tests/auth.test.js', 'docs/api/auth.md']. This helps with conflict detection and code review planning."),
    validation_criteria: z.string().optional().default('').describe("CRIT√àRES DE VALIDATION - R√©digez en fran√ßais des crit√®res sp√©cifiques et mesurables qui d√©finissent quand cette t√¢che est consid√©r√©e comme termin√©e. Doivent √™tre testables et objectifs. Incluez des tests fonctionnels, benchmarks de performance ou crit√®res de qualit√©. Exemple : 'La t√¢che est termin√©e quand : (1) Tous les tests unitaires passent avec >90% de couverture, (2) Le flux connexion/d√©connexion fonctionne dans le navigateur, (3) Les tokens JWT expirent correctement apr√®s 24h, (4) Les endpoints API retournent les codes d'erreur appropri√©s, (5) La documentation est mise √† jour avec les nouveaux endpoints.'"),
    parent_id: z.number().int().positive().optional().describe("PARENT TASK ID: ID of the parent task if this is a subtask or component of a larger task. Use this to create hierarchical task structures. Example: If task 10 is 'Implement user management system' and this task is 'Create user login', then parent_id would be 10. Leave empty for top-level tasks."),
    priority: z.number().int().min(1).max(5).optional().default(3).describe("TASK PRIORITY: Urgency and importance level (1=lowest, 5=highest). Use 5 for critical/blocking issues, 4 for high-priority features, 3 for normal work (default), 2 for nice-to-have improvements, 1 for low-priority tasks. Consider business impact, user impact, and technical dependencies when setting priority."),
    image: z.string().optional().describe("IMAGE FACULTATIVE : Chemin relatif vers une image associ√©e √† cette t√¢che (optionnel). Utilisez le chemin relatif depuis la racine du projet vers un fichier image qui illustre, documente ou est n√©cessaire pour cette t√¢che. Exemple : '.cursor/temp/images/mockup_login.png' ou 'docs/assets/database_schema.jpg'. L'image sera accessible via l'outil mcp_ToolsMCP_consult_image pour analyse et r√©f√©rence durant l'impl√©mentation.")
}, safeHandler(handleCreateTask));

server.tool('update_task', {
    task_id: z.number().int().positive().describe("IDENTIFIANT DE T√ÇCHE : Le num√©ro d'ID unique de la t√¢che √† mettre √† jour. Cet ID est assign√© lors de la cr√©ation de la t√¢che et peut √™tre trouv√© dans les listes de t√¢ches. Champ requis - vous devez sp√©cifier quelle t√¢che modifier."),
    comment: z.string().describe("COMMENTAIRE CRITIQUE OBLIGATOIRE - R√©digez une analyse critique et d√©taill√©e. Ne vous contentez pas de d√©crire le changement de statut. Instructions par statut : (1) BLOCKED : Analysez la cause racine du blocage. Quels sont les obstacles pr√©cis ? Quelles sont les d√©pendances externes ou les probl√®mes techniques qui emp√™chent la progression ? Proposez un plan d'action pour d√©bloquer la situation. (2) REVIEW : Ne dites pas seulement ce que vous avez fait. Mettez en √©vidence les probl√®mes que vous avez rencontr√©s, m√™me si vous les avez r√©solus. Mentionnez les faiblesses potentielles de votre impl√©mentation et les points √† surveiller. Quels tests manuels ont √©t√© effectu√©s et quels sont leurs limites ? Guidez l'utilisateur sur les points de friction √† v√©rifier. Si il s'agissait d'un bug, expliquez son origine et comment vous l'avez r√©solu. (3) Pour tout autre changement : Soyez transparent sur l'impact, les risques et les probl√®mes potentiels. Un commentaire vide n'est accept√© que pour le passage √† IN_PROGRESS."),
    title: z.string().min(1).max(200).optional().describe("NOUVEAU TITRE DE T√ÇCHE - R√©digez en fran√ßais un titre clair et actionnable mis √† jour (1-200 caract√®res). Utilisez l'imp√©ratif et soyez pr√©cis. Ne fournissez que si vous voulez changer le titre existant. Exemples : 'Impl√©menter le syst√®me d'authentification utilisateur', 'Corriger les probl√®mes de timeout de base de donn√©es'."),
    short_description: z.string().min(1).max(500).optional().describe("NOUVEAU R√âSUM√â BREF - R√©digez en fran√ßais un aper√ßu concis mis √† jour (1-500 caract√®res). Ne fournissez que si vous voulez changer la description existante. Doit r√©pondre bri√®vement au 'quoi' et 'pourquoi' et inclure l'objectif principal et le b√©n√©fice cl√©."),
    detailed_description: z.string().min(1).optional().describe("NOUVELLES SP√âCIFICATIONS D√âTAILL√âES - R√©digez en fran√ßais une description compl√®te mise √† jour avec exigences, crit√®res d'acceptation, d√©tails techniques et approche d'impl√©mentation. Ne fournissez que si vous voulez remplacer compl√®tement la description d√©taill√©e existante."),
    dependencies: z.array(z.number().int().positive()).optional().describe("NEW TASK DEPENDENCIES: Updated array of task IDs that must be completed before this task. This completely replaces the existing dependencies list. Use empty array [] to remove all dependencies. Example: [12, 15] means tasks 12 and 15 must be completed first."),
    status: z.enum(['IN_PROGRESS', 'BLOCKED', 'REVIEW']).optional().describe("NEW STATUS: Updated task state. 'IN_PROGRESS' = currently being worked on, 'BLOCKED' = waiting for external dependency, 'REVIEW' = completed but needs review/testing. Only provide if status is changing."),
    impacted_files: z.array(z.string()).optional().describe("NEW AFFECTED FILES: Updated list of files that will be created, modified, or deleted. This completely replaces the existing files list. Use relative paths from project root. Examples: ['src/auth/login.js', 'tests/auth.test.js']."),
    validation_criteria: z.string().optional().describe("NOUVEAUX CRIT√àRES DE VALIDATION - R√©digez en fran√ßais des crit√®res sp√©cifiques et mesurables mis √† jour qui d√©finissent quand cette t√¢che est termin√©e. Doivent √™tre testables et objectifs. Ne fournissez que si vous voulez changer les crit√®res existants."),
    parent_id: z.number().int().positive().nullable().optional().describe("NEW PARENT TASK ID: Updated parent task ID for hierarchical structure, or null to remove parent relationship. Only provide if you want to change the parent-child relationship."),
    priority: z.number().int().min(1).max(5).optional().describe("NEW TASK PRIORITY: Updated urgency level (1=lowest, 5=highest). Use 5 for critical/blocking issues, 4 for high-priority features, 3 for normal work, 2 for nice-to-have improvements, 1 for low-priority tasks. Only provide if priority is changing."),
    image: z.string().optional().describe("NOUVELLE IMAGE FACULTATIVE : Chemin relatif mis √† jour vers une image associ√©e √† cette t√¢che (optionnel). Utilisez le chemin relatif depuis la racine du projet vers un fichier image qui illustre, documente ou est n√©cessaire pour cette t√¢che. Ne fournissez que si vous voulez changer l'image existante ou en ajouter une nouvelle. Exemple : '.cursor/temp/images/mockup_updated.png'. L'image sera accessible via l'outil mcp_ToolsMCP_consult_image pour analyse et r√©f√©rence durant l'impl√©mentation.")
}, safeHandler(handleUpdateTask));

server.tool('get_all_tasks', {}, safeHandler(handleGetAllTasks));

server.tool('get_next_tasks', {}, safeHandler(handleGetNextTasks));

server.tool('read_userbrief', {
    archived_count: z.number().optional().describe("ARCHIVED COUNT: Number of archived entries to include in the response (optional, default: 3). Use this to control how many completed/archived requests are returned along with the current active request.")
}, safeHandler(handleReadUserbrief));

server.tool('update_userbrief', {
    action: z.enum(['mark_archived', 'add_comment', 'mark_pinned']).describe("ACTION USERBRIEF : L'op√©ration √† effectuer sur une entr√©e de requ√™te utilisateur. 'mark_archived' = d√©placer la requ√™te vers le statut termin√©/archiv√© (utiliser quand le travail est fini), 'add_comment' = ajouter une mise √† jour de progression ou note √† l'historique de la requ√™te (utiliser pour mises √† jour de statut, d√©couvertes, ou communication), 'mark_pinned' = marquer la requ√™te comme importante/prioritaire (utiliser pour √©l√©ments haute priorit√© qui doivent rester visibles)."),
    id: z.number().optional().describe("ID DE REQU√äTE : L'identifiant unique de la requ√™te utilisateur sp√©cifique √† mettre √† jour. Si omis, l'action ciblera la requ√™te actuellement active (in_progress ou new). Utilisez ceci quand vous devez mettre √† jour une requ√™te historique sp√©cifique plut√¥t que la courante."),
    comment: z.string().optional().describe("COMMENTAIRE DE MISE √Ä JOUR - R√©digez en fran√ßais le texte √† ajouter √† l'historique de la requ√™te lors de l'utilisation de l'action 'add_comment'. Doit fournir des mises √† jour significatives sur les progr√®s, d√©couvertes, d√©cisions prises, ou prochaines √©tapes. Exemples : 'Syst√®me d'authentification impl√©ment√© avec succ√®s, passage √† la phase de test', 'Probl√®me de sch√©ma de base de donn√©es d√©couvert, investigation d'alternatives en cours', 'Fonctionnalit√© termin√©e et d√©ploy√©e en environnement de staging'. Requis quand action est 'add_comment', ignor√© pour les autres actions.")
}, safeHandler(handleUpdateUserbrief));

server.tool('delete_long_term_memory', deleteLongTermMemorySchema, safeHandler(handleDeleteLongTermMemory));


// Start the server
async function startServer() {
    try {
        // Initialize server transport
        const transport = new StdioServerTransport();

        // Connect server to transport
        await server.connect(transport);

    } catch (error) {
        // console.error('[MemoryBankMCP] Failed to start server:', error); // Commented to prevent JSON-RPC pollution
        process.exit(1);
    }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
    process.exit(0);
});

process.on('SIGTERM', () => {
    process.exit(0);
});

// Start the server
startServer().catch(error => {
    // console.error('[MemoryBankMCP] Server startup error:', error); // Commented to prevent JSON-RPC pollution
    process.exit(1);
}); 