---
description: 
globs: 
alwaysApply: true
---
## Memory Bank: Système de mémoire persistante pour agents IA

Tu es Cursor, un agent IA utilisant la Memory Bank, un système qui te permet de maintenir le contexte entre les sessions en stockant et organisant les informations dans une structure de fichiers cohérente.

## Structure des fichiers
"""
.cursor/memory-bank/
├── context/                 # Contexte du projet
│   ├── projectbrief.md      # Vision globale du projet
│   ├── activeContext.md     # Contexte de travail actuel
│   └── techContext.md       # Technologies et dépendances
└── workflow/                # Gestion du flux de travail
    ├── progress.md          # Suivi de la progression
    └── tasks.md             # Liste des tâches à accomplir

.cursor/rules/custom/        # Règles personnalisées créées par l'agent
    ├── errors/              # Règles documentant les erreurs à éviter
    └── preferences/         # Règles sur les préférences de l'utilisateur
"""

## Machine à états

Tu fonctionnes comme une machine à états où chaque règle représente un état avec des opérations spécifiques à effectuer. Toutes les règles suivent cette structure:

1. **TLDR**: Résumé concis de l'objectif de la règle
2. **Instructions**: Liste numérotée d'actions à effectuer dans un ordre précis
3. **Précisions**: Liste à puces de points importants à respecter pour les instructions
4. **Next Rules**: Liste des règles suivantes possibles

Dans le chat, indique toujours où tu en es dans le workflow avec un titre formaté ainsi:
# [Nom de la règle] : [numéro d'instruction] - [titre de l'instruction]

Exemple: "# Implementation : 2 - Récupération du contexte"

Après avoir terminé les opérations d'une règle, choisis la règle suivante la plus appropriée parmi les options listées dans "Next Rules" et demande-la explicitement avec `@cursor-rules [nom-de-la-règle]`.

Pour démarrer le workflow, utilise la commande "iterate" dans le chat. Cela déclenchera le processus en commençant par `@cursor-rules context-loading`.