---
description: Règle principale du système Memory Bank
globs: 
alwaysApply: true
---
## TLDR
Gérer un système de mémoire persistante qui permet aux agents IA de maintenir le contexte entre les sessions en stockant et organisant les informations dans une structure de fichiers cohérente.

## Résumé d'invocation
Après avoir invoqué cette règle, l'agent dira: "Je vais suivre le workflow Memory Bank comme une machine à états en respectant strictement la structure des règles et en commençant toujours par charger le contexte. Je n'invoquerai que des règles autorisées et j'afficherai toujours mon étape actuelle. Je passerai à la règle context-loading pour démarrer le workflow."

## Instructions
1. Comprendre la structure des fichiers du projet:
   - `.cursor/memory-bank/context/`: Contexte du projet (projectbrief.md, activeContext.md, techContext.md)
   - `.cursor/memory-bank/workflow/`: Gestion du flux de travail (tasks.md, progress.md, tests.md)
   - `src/`: Scripts sources du projet
   - `tests/`: Tests unitaires et d'intégration
   - `.cursor/rules/custom/`: Règles personnalisées (errors/, preferences/)

2. Suivre le workflow de la machine à états:
   - Afficher toujours le titre de l'étape actuelle: `# [Nom de la règle] : [numéro d'instruction] - [titre de l'instruction]`
   - Suivre chaque règle selon sa structure: TLDR, Instructions, Précisions, Next Rules
   - Exécuter les instructions dans l'ordre numérique indiqué
   - Respecter les précisions pour chaque instruction

3. Gérer le démarrage et la finalisation du workflow:
   - TOUJOURS commencer le workflow par la règle `context-loading`
   - Redémarrer le workflow à chaque nouveau message de l'utilisateur
   - Considérer le workflow comme terminé uniquement lorsque la règle context-update l'indique

4. Gérer la transition entre les règles:
   - Appeler EXPLICITEMENT la règle suivante après avoir terminé la règle actuelle
   - Choisir la règle suivante parmi celles listées dans "Next Rules"
   - Utiliser la syntaxe exacte: `fetch_rules ["nom-de-la-règle"]`

## Précisions
- Fonctionner comme une machine à états où chaque règle représente un état avec des opérations spécifiques
- Chaque règle doit suivre la structure standardisée: TLDR, Instructions, Précisions, Next Rules
- Toujours afficher l'étape actuelle avec le format spécifié AVANT de consulter tout fichier
- Ne JAMAIS dévier du workflow défini ou sauter des étapes
- Ne JAMAIS consulter des fichiers non spécifiés dans l'étape actuelle
- Si une même séquence de règles se répète plus de 2 fois, notifier l'utilisateur d'un risque de boucle
- IMPORTANT: La syntaxe d'appel de règle est `fetch_rules ["nom-de-la-règle"]`
- Ne JAMAIS terminer l'exécution sans appeler explicitement la règle suivante (sauf si le workflow est terminé)
- Même si le workflow est terminé, indiquer explicitement: "Le workflow est terminé, aucune règle suivante à appeler."
- Consulter uniquement les fichiers explicitement autorisés par la règle en cours
- Maintenir les fichiers de contexte et workflow en dessous de 200 lignes

## Règle absolue

Suis le workflow AVEUGLEMENT. Ne prends jamais l'initiative d'en sortir, ne serait-ce qu'un peu. Suis UNIQUEMENT les instructions de la règle en cours, SANS JAMAIS anticiper.

## Next Rules
- `context-loading` - Seule règle autorisée au démarrage du workflow
