---
description: Call this rule to analyze the user's request in detail and situate it in relation to the project objectives.
globs: 
alwaysApply: false
---
## TLDR
Decomposes user requests into concrete tasks and organizes them in `.cursor/memory-bank/workflow/tasks.md` using an emoji-based status system.

## Instructions

1.  **Existing tasks analysis**: Read the `.cursor/memory-bank/workflow/tasks.md` file if it exists.
    - Parse existing tasks based on the emoji-led format.

2.  **Userbrief processing identification**: Consult the `.cursor/memory-bank/userbrief.md` file.
    - Identify requests marked with ‚è≥. (This assumes `consolidate-repo.mdc` has marked them).
    - Prepare these identified requests for transformation into structured tasks for `tasks.md` in step 4.
    - IMPORTANT: Do NOT modify `userbrief.md` at this stage.

3.  **Completed tasks archival/removal (Optional Refinement)**:
    - While this rule focuses on adding tasks, a future enhancement or a separate cleanup rule might handle archiving very old `üü¢ DONE` tasks from `tasks.md` to keep it manageable. For now, this rule primarily adds new tasks. Ensure new tasks are added after any existing `üü¢ DONE` tasks if a "DONE" section was previously used, or simply at the end of the list of active tasks.

4.  **New tasks integration**: Structure new tasks in `tasks.md`.
    - Integrate the main request (from the calling rule or active context) AND any requests identified in step 2 (marked with ‚è≥ in `userbrief.md`).
    - Add new tasks/sub-tasks starting with the `‚ö™Ô∏è TODO` emoji.
    - Follow the **Task Item Structure** defined above for each task:
        *   Emoji (‚ö™Ô∏è) and Bold Title (with numbering like **1.** or **1.1.**)
        *   Detailed `Description`
        *   `Impacted Rules/Files`
        *   `Dependencies`
        *   `Validation` criteria.
    - New tasks should be added logically, typically after existing üü° IN_PROGRESS or ‚ö™Ô∏è TODO tasks, and before any archived/very old üü¢ DONE tasks if a bottom section for them is maintained.
    - Prioritize by importance, dependencies, impact, and complexity when ordering new tasks amongst themselves.

5.  **Userbrief archiving**: Update `.cursor/memory-bank/userbrief.md`.
    - For EACH request identified in Step 2 (marked with ‚è≥) that was successfully integrated into `tasks.md` in Step 4:
        - Call the `consolidate-repo.mdc` rule or ensure its logic for moving ‚è≥ to üóÑÔ∏è is triggered. (This step might be better handled by `consolidate-repo.mdc` itself after this rule successfully adds tasks).
        *Alternatively, if direct modification is kept in this rule: Move the item and change its status marker from ‚è≥ to üóÑÔ∏è in `userbrief.md`.*
    - IMPORTANT: Only modify items that were successfully added to `tasks.md`.

6.  **Call next rule**: Mandatory call to `implementation`.

## Specifics
- Group similar tasks under common main task structures, even if apparently different.
- Favor detailed descriptions for each task item.
- Minimize dependencies between major tasks where possible.
- IMPORTANT: Do not add new tasks to `userbrief.md`.
- IMPORTANT: Crucially, NEVER archive an item in `userbrief.md` (Step 5) if its corresponding task(s) were NOT successfully added to `.cursor/memory-bank/workflow/tasks.md` in Step 4.

## tasks.md: New Format Definition

The `.cursor/memory-bank/workflow/tasks.md` file no longer uses H1/H2 section titles (e.g., `# In Progress`, `# ToDo`). It is a flat list of task items, each starting with an emoji indicating its status. This rule (`task-decomposition`) is primarily responsible for creating new tasks (usually with ‚ö™Ô∏è) and structuring them.

**Emoji Legend & Handling by `task-decomposition`:**
*   `‚ö™Ô∏è TODO`: For new tasks or sub-tasks. This rule will primarily add tasks with this emoji.
*   `üü° IN_PROGRESS`: Tasks currently being worked on (status set by `implementation` or `context-update` rules).
*   `üü¢ DONE`: Completed tasks (status set by `implementation` or `context-update` rules).
*   `üî¥ BLOCKED`: Tasks that cannot proceed.
*   `üîµ REVIEW`: Tasks awaiting review.

**Task Item Structure:**
Each task, regardless of status, should generally follow this structure:
```markdown
[EMOJI] **[Concise Title - Main Task or Sub-Task Numbering, e.g., 1. or 1.1]**
    *   **Description**: [Detailed explanation of what needs to be done.]
    *   **Impacted Rules/Files**: [List of rules or files affected by this task.]
    *   **Dependencies**: [List of other tasks this one depends on, if any. Use task numbers if available.]
    *   **Validation**: [Clear criteria to determine when the task is successfully completed.]
```
- Main tasks can be numbered (e.g., `‚ö™Ô∏è **1. Main Task Title**`).
- Sub-tasks should be indented and can use sub-numbering (e.g., `    *   ‚ö™Ô∏è **1.1. Sub-Task Title**`).
- The `---` separator can be used to visually group related sets of tasks if helpful, but is not structurally mandatory.

## Next Rules
- `implementation` - To begin implementing tasks.

## Example

# Task-decomposition: 1 - Existing tasks analysis
I begin by reading the `tasks.md` file to understand the current state of tasks using the emoji-based format. **(Task-decomposition: 1 - Existing tasks analysis)**
// ... tool_code: print(default_api.read_file(target_file=".cursor/memory-bank/workflow/tasks.md")) ...
**(Task-decomposition: 1 - Existing tasks analysis)**

# Task-decomposition: 2 - Userbrief processing identification
I now consult the `userbrief.md` file to identify tasks marked with ‚è≥. **(Task-decomposition: 2 - Userbrief processing identification)**
// ... tool_code: print(default_api.read_file(target_file=".cursor/memory-bank/userbrief.md")) ...
I identified several items marked with ‚è≥. I will prepare them for integration into `tasks.md` in step 4.
**(Task-decomposition: 2 - Userbrief processing identification)**

# Task-decomposition: 3 - Completed tasks archival/removal (Optional Refinement)
(No action taken in this step for now by this rule regarding removal of old üü¢ tasks).
**(Task-decomposition: 3 - Completed tasks archival/removal)**

# Task-decomposition: 4 - New tasks integration
I decompose the main request and the identified ‚è≥ userbrief items into concrete tasks in `tasks.md`, using the new emoji-based format. **(Task-decomposition: 4 - New tasks integration)**
```json
// ... tool_code: print(default_api.edit_file(target_file=".cursor/memory-bank/workflow/tasks.md", code_edit=\'\'\'
// ... existing tasks ...
‚ö™Ô∏è **3. New Main Task from Request**
    *   **Description**: [Detailed description of the new main task based on the original user request or active context.]
    *   **Impacted Rules/Files**: [List relevant files/rules.]
    *   **Dependencies**: [List dependencies.]
    *   **Validation**: [Define validation criteria.]

‚ö™Ô∏è **4. Task from Userbrief Item 1**
    *   **Description**: [Description based on the ‚è≥ userbrief item.]
    *   **Impacted Rules/Files**: [files/rules.]
    *   **Dependencies**: [dependencies.]
    *   **Validation**: [validation criteria.]
    *   **Sub-Tasks**:
        *   ‚ö™Ô∏è **4.1. Sub-task for Userbrief Item 1**
            *   **Description**: [Detailed sub-task description.]
            *   **Impacted Rules/Files**: [files/rules.]
            *   **Dependencies**: [dependencies.]
            *   **Validation**: [validation criteria.]
\'\'\')) ...
```
**(Task-decomposition: 4 - New tasks integration)**

# Task-decomposition: 5 - Userbrief archiving
Now that the tasks from userbrief have been integrated into `tasks.md`, I will ensure the original items in `userbrief.md` are updated from ‚è≥ to üóÑÔ∏è. (Ideally, by triggering `consolidate-repo` or if done directly, by editing `userbrief.md`). **(Task-decomposition: 5 - Userbrief archiving)**
// ... tool_code to modify userbrief.md or call consolidate-repo ...
**(Task-decomposition: 5 - Userbrief archiving)**

# Task-decomposition: 6 - Call next rule
I must now call the `implementation` rule to begin work on the newly structured tasks.
The `implementation` rule must be called to begin implementing the tasks. **(Task-decomposition: 6 - Call next rule)**
// ... tool_code: print(default_api.fetch_rules(rule_names=["implementation"])) ...

[...] (The workflow must continue uninterrupted)