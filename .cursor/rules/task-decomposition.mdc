---
description: Call this rule to analyze the user's request in detail and situate it in relation to the project objectives.
globs: 
alwaysApply: false
---
## TLDR
Decompose user request into concrete tasks and organize them in tasks.md by numbered logical sections.

## Instructions

1. **Existing tasks analysis**: Read the `.cursor/memory-bank/workflow/tasks.md` file if it exists

2. **Userbrief processing identification**: Consult the `.cursor/memory-bank/userbrief.md` file
   - Identify requests marked with ⏳ in the "Processing" section.
   - Prepare these identified requests for transformation into structured tasks for `tasks.md` in step 4.
   - IMPORTANT: Do NOT modify `userbrief.md` at this stage.

3. **Completed tasks removal**: Eliminate completed tasks unrelated to current work from the `.cursor/memory-bank/workflow/tasks.md` file to keep it reasonably sized

4. **New tasks integration**: Structure tasks in tasks.md
   - Integrate the main request (from the calling rule or active context) AND any requests identified in step 2 (marked with ⏳ in `userbrief.md`).
   - Create maximum 3-4 very high-level sections (e.g., "Preparation", "Development")
   - Number sections by resolution order (1., 2., 3.)
   - Sub-number tasks (1.1, 1.2, 2.1, 2.2)
   - Each task must include:
     * Concise title
     * Complete description
     * Impacted files/components
     * Dependencies
     * Validation criteria
   - Prioritize by importance, dependencies, impact and complexity

5. **Userbrief archiving**: Update `.cursor/memory-bank/userbrief.md`
   - For EACH request identified in Step 2 (marked with ⏳) that was successfully integrated into `tasks.md` in Step 4:
     - Move the item from the "Processing" section to the "Archives" section.
     - Change its status marker from ⏳ to 🗄️.
   - IMPORTANT: Only modify items that were successfully added to `tasks.md`.

6. **Call next rule**: Mandatory call to `implementation`

## Specifics
- Group similar tasks, even if apparently different
- Favor detailed descriptions rather than multiplication of sections
- Use generic sections that can accommodate different types of tasks
- Minimize dependencies between sections/tasks
- The tasks.md file format is defined in the tasks-md editing rule
- IMPORTANT: Do not add new tasks to userbrief.md.
- IMPORTANT: In step 5, only move items from "Processing" to "Archives" and change ⏳ to 🗄️. Do not modify content or other sections.
- IMPORTANT: Crucially, NEVER move an item to "Archives" (Step 5) if its corresponding task(s) were NOT successfully added to `.cursor/memory-bank/workflow/tasks.md` in Step 4.

## Next Rules
- `implementation` - To begin implementing tasks

## Example

# Task-decomposition: 1 - Existing tasks analysis
I begin by reading the tasks.md file to understand the current state of tasks. **(Task-decomposition: 1 - Existing tasks analysis)**
[...reading tasks.md file...]
**(Task-decomposition: 1 - Existing tasks analysis)**

# Task-decomposition: 2 - Userbrief analysis
I now consult the userbrief.md file to identify tasks marked with 🔄. **(Task-decomposition: 2 - Userbrief analysis)**
[...reading userbrief.md file...]
I identified several tasks marked with 🔄 that I will delete and integrate into tasks.md.
[...task transformation...]
**(Task-decomposition: 2 - Userbrief analysis)**

# Task-decomposition: 3 - Completed tasks removal
I remove completed tasks that are no longer relevant to current work. **(Task-decomposition: 3 - Completed tasks removal)**
[...obsolete tasks deletion...]
**(Task-decomposition: 3 - Completed tasks removal)**

# Task-decomposition: 4 - New tasks integration
I decompose the request into concrete tasks and organize them into high-level sections. **(Task-decomposition: 4 - New tasks integration)**
[...organizing tasks into sections...]
**(Task-decomposition: 4 - New tasks integration)**

# Task-decomposition: 5 - Call next rule
I must now call the implementation rule to begin work on the tasks.
The implementation rule must be called to begin implementing the tasks. **(Task-decomposition: 5 - Call next rule)**



[...] (The workflow must continue uninterrupted: even if the example stops here, the agent must IMPERATIVELY continue in reality: it MUST call and execute the following rule, then the next, etc., without ever stopping -> It is completely autonomous.)