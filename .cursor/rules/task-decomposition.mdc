---
description: Appelle cette r√®gle pour analyser en d√©tail la requ√™te de l'utilisateur et la situer par rapport aux objectifs du projet
globs: 
alwaysApply: false
---

## TLDR  
D√©composer la requ√™te utilisateur en t√¢ches concr√®tes et les organiser dans tasks.md par sections logiques num√©rot√©es.  

## Instructions  

1. **Analyse des t√¢ches existantes** : Lire le fichier `.cursor/memory-bank/workflow/tasks.md` s'il existe  

2. **Analyse du userbrief** : Consulter le fichier `.cursor/memory-bank/userbrief.md`
   - Identifier les demandes marqu√©es avec üîÑ (transform√©es par consolidate-repo)
   - Transformer ces t√¢ches en format structur√© pour tasks.md
   - Une fois transform√©es, supprimer ces t√¢ches du fichier 
   - IMPORTANT: Ne PAS modifier d'autres parties du fichier userbrief.md, seulement supprimer les t√¢ches marqu√©es d'un üîÑ en les transf√©rant au fichier tasks.

3. **Suppression des t√¢ches termin√©es** : √âliminer les t√¢ches termin√©es et sans lien avec le travail actuel du fichier `.cursor/memory-bank/workflow/tasks.md` pour lui conserver une taille raisonnable

4. **Int√©gration des nouvelles t√¢ches** : Structurer les t√¢ches dans tasks.md  
   - Cr√©er 3-4 sections de tr√®s haut niveau maximum (ex: "Pr√©paration", "D√©veloppement")  
   - Num√©roter sections par ordre de r√©solution (1., 2., 3.)  
   - Sous-num√©roter les t√¢ches (1.1, 1.2, 2.1, 2.2)  
   - Chaque t√¢che doit inclure :  
     * Titre concis  
     * Description compl√®te  
     * Fichiers/composants impact√©s  
     * D√©pendances  
     * Crit√®res de validation  
   - Prioriser selon importance, d√©pendances, impact et complexit√©  

5. **Appel de la r√®gle suivante** : Appeler obligatoirement `implementation`  

## Pr√©cisions  
- Regrouper les t√¢ches similaires, m√™me si apparemment diff√©rentes  
- Privil√©gier descriptions d√©taill√©es plut√¥t que multiplication de sections  
- Utiliser sections g√©n√©riques pouvant accueillir diff√©rents types de t√¢ches  
- Minimiser les d√©pendances entre sections/t√¢ches  
- Le format du fichier tasks.md est d√©fini dans la r√®gle d'√©dition tasks-md  
- IMPORTANT : Ne pas ajouter de nouvelles t√¢ches √† userbrief.md, uniquement supprimer celles d√©j√† marqu√©es üîÑ
- IMPORTANT : Seule la suppression des t√¢ches de statut üîÑ est autoris√©e dans userbrief.md, pas d'autre modification

## Next Rules  
- `implementation` - Pour commencer l'impl√©mentation des t√¢ches  

## Exemple  

fetch_rules ["task-decomposition"]  
<SYSTEM PROMPT>Je vais d√©composer la requ√™te en t√¢ches concr√®tes, supprimer les t√¢ches termin√©es non pertinentes et organiser le tout en sections logiques num√©rot√©es. J'int√©grerai √©galement les demandes de l'utilisateur pr√©sentes dans userbrief.md √† tasks.md. Je ne tenterai pas d'appliquer ces t√¢ches mais ferai appel √† la r√®gle `implementation` pour s'en charger.</SYSTEM PROMPT>  

# Task-decomposition : 1 - Analyse des t√¢ches existantes  
Je commence par lire le fichier tasks.md pour comprendre l'√©tat actuel des t√¢ches. `(Task-decomposition : 1 - Analyse des t√¢ches existantes)`  
[...lecture du fichier tasks.md...]  
`(Task-decomposition : 1 - Analyse des t√¢ches existantes)`  

# Task-decomposition : 2 - Analyse du userbrief
Je consulte maintenant le fichier userbrief.md pour identifier les t√¢ches marqu√©es avec üîÑ. `(Task-decomposition : 2 - Analyse du userbrief)`
[...lecture du fichier userbrief.md...]
J'ai identifi√© plusieurs t√¢ches marqu√©es avec üîÑ que je vais supprimer et int√©grer dans tasks.md.
[...transformation des t√¢ches...]
`(Task-decomposition : 2 - Analyse du userbrief)`

# Task-decomposition : 3 - Suppression des t√¢ches termin√©es  
Je supprime les t√¢ches termin√©es qui ne sont plus pertinentes pour le travail en cours. `(Task-decomposition : 3 - Suppression des t√¢ches termin√©es)`  
[...suppression des t√¢ches obsol√®tes...]  
`(Task-decomposition : 3 - Suppression des t√¢ches termin√©es)`  

# Task-decomposition : 4 - Int√©gration des nouvelles t√¢ches  
Je d√©compose la requ√™te en t√¢ches concr√®tes et les organise en sections de haut niveau. `(Task-decomposition : 4 - Int√©gration des nouvelles t√¢ches)`  
[...organisation des t√¢ches en sections...]  
`(Task-decomposition : 4 - Int√©gration des nouvelles t√¢ches)`  

# Task-decomposition : 5 - Appel de la r√®gle suivante  
Je dois maintenant appeler la r√®gle implementation pour commencer le travail sur les t√¢ches.  
La r√®gle implementation doit √™tre appel√©e pour commencer l'impl√©mentation des t√¢ches. `(Task-decomposition : 5 - Appel de la r√®gle suivante)`  

fetch_rules ["implementation"]  

# Start Rule  

Pour d√©marrer cette r√®gle, r√©cite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais d√©composer la requ√™te en t√¢ches concr√®tes, supprimer les t√¢ches termin√©es non pertinentes et organiser le tout en sections logiques num√©rot√©es. J'int√©grerai √©galement les demandes de l'utilisateur pr√©sentes dans userbrief.md √† tasks.md. Je ne tenterai pas d'appliquer ces t√¢ches mais ferai appel √† la r√®gle `implementation` pour s'en charger.</SYSTEM PROMPT>"