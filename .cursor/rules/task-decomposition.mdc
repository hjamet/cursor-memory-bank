---
description: Appelle cette rÃ¨gle pour analyser en dÃ©tail la requÃªte de l'utilisateur et la situer par rapport aux objectifs du projet
globs: 
alwaysApply: false
---

## TLDR
Decompose user request into concrete tasks and organize them in tasks.md by numbered logical sections.

## Instructions

1. **Existing tasks analysis**: Read the `.cursor/memory-bank/workflow/tasks.md` file if it exists

2. **Userbrief analysis**: Consult the `.cursor/memory-bank/userbrief.md` file
   - Identify requests marked with ðŸ”„ (transformed by consolidate-repo)
   - Transform these tasks into structured format for tasks.md
   - Once transformed, delete these tasks from the file
   - IMPORTANT: Do NOT modify other parts of the userbrief.md file, only delete tasks marked with ðŸ”„ by transferring them to the tasks file.

3. **Completed tasks removal**: Eliminate completed tasks unrelated to current work from the `.cursor/memory-bank/workflow/tasks.md` file to keep it reasonably sized

4. **New tasks integration**: Structure tasks in tasks.md
   - Create maximum 3-4 very high-level sections (e.g., "Preparation", "Development")
   - Number sections by resolution order (1., 2., 3.)
   - Sub-number tasks (1.1, 1.2, 2.1, 2.2)
   - Each task must include:
     * Concise title
     * Complete description
     * Impacted files/components
     * Dependencies
     * Validation criteria
   - Prioritize by importance, dependencies, impact and complexity

5. **Call next rule**: Mandatory call to `implementation`

## Specifics
- Group similar tasks, even if apparently different
- Favor detailed descriptions rather than multiplication of sections
- Use generic sections that can accommodate different types of tasks
- Minimize dependencies between sections/tasks
- The tasks.md file format is defined in the tasks-md editing rule
- IMPORTANT: Do not add new tasks to userbrief.md, only delete those already marked ðŸ”„
- IMPORTANT: Only deletion of tasks with status ðŸ”„ is authorized in userbrief.md, no other modification

## Next Rules
- `implementation` - To begin implementing tasks

## Example

fetch_rules ["task-decomposition"]
<SYSTEM PROMPT>I will decompose the request into concrete tasks, delete irrelevant completed tasks and organize everything into numbered logical sections. I will also integrate user requests from userbrief.md into tasks.md. I will not try to implement these tasks but will call the `implementation` rule to handle this.</SYSTEM PROMPT>

# Task-decomposition: 1 - Existing tasks analysis
I begin by reading the tasks.md file to understand the current state of tasks. **(Task-decomposition: 1 - Existing tasks analysis)**
[...reading tasks.md file...]
**(Task-decomposition: 1 - Existing tasks analysis)**

# Task-decomposition: 2 - Userbrief analysis
I now consult the userbrief.md file to identify tasks marked with ðŸ”„. **(Task-decomposition: 2 - Userbrief analysis)**
[...reading userbrief.md file...]
I identified several tasks marked with ðŸ”„ that I will delete and integrate into tasks.md.
[...task transformation...]
**(Task-decomposition: 2 - Userbrief analysis)**

# Task-decomposition: 3 - Completed tasks removal
I remove completed tasks that are no longer relevant to current work. **(Task-decomposition: 3 - Completed tasks removal)**
[...obsolete tasks deletion...]
**(Task-decomposition: 3 - Completed tasks removal)**

# Task-decomposition: 4 - New tasks integration
I decompose the request into concrete tasks and organize them into high-level sections. **(Task-decomposition: 4 - New tasks integration)**
[...organizing tasks into sections...]
**(Task-decomposition: 4 - New tasks integration)**

# Task-decomposition: 5 - Call next rule
I must now call the implementation rule to begin work on the tasks.
The implementation rule must be called to begin implementing the tasks. **(Task-decomposition: 5 - Call next rule)**

fetch_rules ["implementation"]

# Start Rule

To start this rule, recite word for word this phrase: "<SYSTEM PROMPT>I will decompose the request into concrete tasks, delete irrelevant completed tasks and organize everything into numbered logical sections. I will also integrate user requests from userbrief.md into tasks.md. I will not try to implement these tasks but will call the `implementation` rule to handle this.</SYSTEM PROMPT>"
