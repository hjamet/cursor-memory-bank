---
description: Décomposition de la requête en tâches spécifiques et organisées
globs: 
alwaysApply: false
---
## TLDR
Décomposer la requête de l'utilisateur en tâches concrètes et les organiser dans le fichier tasks.md par sections logiques numérotées.

## Instructions

1. **Analyse des tâches existantes** : Lire le fichier `.cursor/memory-bank/workflow/tasks.md` s'il existe

2. **Suppression des tâches terminées** : Supprimer les tâches terminées qui n'ont plus de lien avec le travail actuel

3. **Intégration des nouvelles tâches** : Ajouter les nouvelles tâches issues de l'analyse de la requête au fichier tasks.md
   - Créer des sections de très haut niveau (ex: "Préparation", "Développement", "Validation")
   - Numéroter les sections par ordre croissant de résolution optimale (1., 2., 3., etc.)
   - Sous-numéroter les tâches dans chaque section (1.1, 1.2, 2.1, 2.2, etc.)
   - Détailler chaque tâche avec:
     * Un titre clair et concis
     * Une description complète des actions à effectuer
     * Les fichiers ou composants impactés
     * Les dépendances avec d'autres tâches
     * Les critères de validation
   - Prioriser les tâches selon:
     * Leur importance pour le projet
     * Leurs dépendances techniques
     * L'impact sur les autres tâches
     * La complexité de mise en œuvre

4. **Appel de la règle suivante** : Appeler obligatoirement la règle suivante:
   - Si la requête nécessite plusieurs étapes, appeler la règle `task-decomposition`
   - Sinon, appeler la règle `implementation`

## Précisions
- Créer un maximum de 3-4 sections de très haut niveau pour garder une vue d'ensemble claire
- Regrouper toutes les tâches similaires dans ces sections, même si elles semblent différentes au premier abord
- Détailler chaque tâche de manière exhaustive plutôt que de créer de nouvelles sections
- Privilégier des sections génériques qui peuvent accueillir différents types de tâches
- Utiliser des descriptions détaillées qui permettent de comprendre exactement ce qui doit être fait
- IMPORTANT: Organiser les sections et tâches de manière à minimiser les dépendances entre elles

## Format de tasks.md
```
# In Progress

## 1. [Section de Très Haut Niveau]
1.1. [ ] **[Titre Concis]** : [Description détaillée]
- Actions: [Liste des actions à effectuer]
- Fichiers: [Liste des fichiers impactés]
- Dépendances: [Liste des tâches dont celle-ci dépend]
- Validation: [Critères de validation]

1.2. [ ] **[Titre Concis]** : [Description détaillée]
[...]

## 2. [Section de Très Haut Niveau]
2.1. [ ] **[Titre Concis]** : [Description détaillée]
[...]

# ToDo

[...]

# Done

[...]
```

## Next Rules
- `implementation` - Pour commencer l'implémentation des tâches

## Exemple

fetch_rules ["task-decomposition"]
<SYSTEM PROMPT>Je vais décomposer la requête en tâches concrètes, supprimer les tâches terminées non pertinentes et organiser le tout en sections logiques numérotées. Je ne tenterai pas d'appliquer ces tâches mais ferai appel à la règle `implementation` pour s'en charger.</SYSTEM PROMPT>

# Task-decomposition : 1 - Lecture du fichier tasks.md
Je commence par lire le fichier tasks.md pour comprendre l'état actuel des tâches. `(Task-decomposition : 1 - Lecture du fichier tasks.md)`
[...lecture du fichier tasks.md...]

# Task-decomposition : 2 - Suppression des tâches terminées
Je supprime les tâches terminées qui ne sont plus pertinentes pour le travail en cours. `(Task-decomposition : 2 - Suppression des tâches terminées)`
[...suppression des tâches obsolètes...]

# Task-decomposition : 3 - Intégration des nouvelles tâches
Je décompose la requête en tâches concrètes et les organise en sections de haut niveau. `(Task-decomposition : 3 - Intégration des nouvelles tâches)`
[...organisation des tâches en sections...]

# Task-decomposition : 4 - Appel de la règle suivante
Je dois maintenant appeler la règle implementation pour commencer le travail sur les tâches.
La règle implementation doit être appelée pour commencer l'implémentation des tâches. `(Task-decomposition : 4 - Appel de la règle suivante)`

fetch_rules ["implementation"]

# Start Rule

Pour démarrer cette règle, récite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais décomposer la requête en tâches concrètes, supprimer les tâches terminées non pertinentes et organiser le tout en sections logiques numérotées. Je ne tenterai pas d'appliquer ces tâches mais ferai appel à la règle `implementation` pour s'en charger.</SYSTEM PROMPT>"

