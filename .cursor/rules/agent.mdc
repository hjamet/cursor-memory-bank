---
alwaysApply: true
description: R√®gle pour g√©rer la cr√©ation automatique de t√¢ches dans la roadmap centralis√©e lorsque des t√¢ches sont identifi√©es pour le futur
---

# R√®gle Agent ‚Äî Gestion de la Roadmap Centralis√©e üìã

## Objectif

Cette r√®gle t'explique **quand** et **comment** cr√©er des t√¢ches dans la roadmap centralis√©e (`.cursor/agents/roadmap.yaml`) lorsque tu identifies des travaux √† faire dans le futur ou qui peuvent √™tre effectu√©s en parall√®le.

## Principe Fondamental

Le syst√®me de roadmap permet de :
- Coordonner plusieurs agents Cursor travaillant en parall√®le
- Garder une trace centralis√©e de toutes les t√¢ches √† faire
- Permettre √† chaque agent de consulter le travail accompli par les autres via les fichiers de r√©sultats
- Faciliter le saut d'un chat √† l'autre tout en gardant le contexte

## Quand Cr√©er une T√¢che dans la Roadmap

Tu **DOIS** cr√©er une t√¢che dans la roadmap lorsque :

1. **T√¢che mentionn√©e pour le futur** : Une t√¢che est mentionn√©e ou identifi√©e qui ne sera **certainement pas** effectu√©e dans le chat actuel
2. **T√¢che parall√©lisable** : Une t√¢che peut √™tre effectu√©e en parall√®le avec d'autres travaux en cours
3. **D√©pendance future** : Une t√¢che doit √™tre faite plus tard mais d√©pend de travaux actuels

Tu **NE DOIS PAS** cr√©er de t√¢che si :
- La t√¢che sera effectu√©e imm√©diatement dans le chat actuel
- La t√¢che est d√©j√† dans la roadmap
- La t√¢che est trop vague pour √™tre utile (il faut un minimum de contexte)

## Comment Cr√©er une T√¢che ‚Äî Processus Complet

### √âtape 1 : Identifier les M√©tadonn√©es

Avant de cr√©er la t√¢che, identifier :

- **Titre descriptif** : Un titre clair et actionnable (ex: "Optimiser les performances d'authentification")
  - **IMPORTANT** : Le titre doit √™tre unique pour √©viter les collisions de noms de fichiers
- **Priorit√©** : De 1 √† 5 (5 = plus haute priorit√©)
  - 5 = Critique/Blocant
  - 4 = Haute priorit√©
  - 3 = Priorit√© normale (d√©faut)
  - 2 = Nice-to-have
  - 1 = Faible priorit√©
- **D√©pendances** : Liste des IDs de t√¢ches qui doivent √™tre termin√©es avant (peut √™tre vide)
- **Contexte** : Pourquoi cette t√¢che existe, ce qui a √©t√© d√©couvert, etc.

### √âtape 2 : G√©n√©rer le Nom de Fichier

1. Convertir le titre en format kebab-case (ex: "Optimiser les performances" ‚Üí "optimiser-performances")
2. **IMPORTANT** : V√©rifier que le titre est unique dans la roadmap pour √©viter les collisions de noms de fichiers
3. Nom du fichier de t√¢che : `{titre-kebab-case}.md`
4. Nom du fichier de r√©sultat : `rapport-{titre-kebab-case}.md`

Exemple :
- Titre : "Supprimer tous les serveurs MCP obsol√®tes"
- Fichier t√¢che : `supprimer-tous-les-serveurs-mcp-obsoletes.md`
- Fichier r√©sultat : `rapport-supprimer-tous-les-serveurs-mcp-obsoletes.md`

### √âtape 3 : Cr√©er le Fichier de T√¢che

Cr√©er le fichier `.cursor/agents/{nom-fichier-tache}.md` avec **exactement** ce format :

```markdown
## Contexte

[√âcrire en fran√ßais une histoire narrative expliquant pourquoi cette t√¢che existe. Mentionner ce qui a √©t√© d√©couvert, les probl√®mes identifi√©s, ou les opportunit√©s qui justifient cette t√¢che. Utiliser un langage naturel et narratif, sans trop de d√©tails techniques.]

## Objectif

[√âcrire en fran√ßais une description vague mais claire de ce qui doit √™tre accompli. L'objectif doit √™tre exploratoire, pas trop pr√©cis. Accepter le vague - la pr√©cision viendra avec la discussion lors de l'impl√©mentation.]

Exemple : "Explorer la possibilit√© d'optimiser le syst√®me d'authentification pour am√©liorer les performances sous charge" plut√¥t que "Configurer un cache Redis avec param√®tres sp√©cifiques X, Y, Z".

## Fichiers Concern√©s

[√âcrire en fran√ßais. Lister DEUX cat√©gories de fichiers/dossiers/recherches :]

### Du travail effectu√© pr√©c√©demment :
- `chemin/vers/fichier1` : [Expliquer ce qui a √©t√© fait ou d√©couvert dans ce fichier]
- `chemin/vers/fichier2` : [Expliquer ce qui est pertinent]

### Fichiers potentiellement pertinents pour l'exploration :
- `chemin/vers/fichier3` : [Expliquer pourquoi ce fichier pourrait √™tre important]
- `chemin/vers/dossier/` : [Expliquer la pertinence]

### Recherches √† effectuer :
- Recherche s√©mantique : "Comment sont g√©r√©es les performances dans le codebase ?"
- Recherche web : "Meilleures pratiques pour optimiser l'authentification JWT"
- Documentation : Lire `README.md` et `documentation/architecture.md`

### Fichiers de r√©sultats d'autres agents (si pertinents) :
- `.cursor/agents/rapport-tache-precedente.md` : [Expliquer pourquoi ce rapport est utile]

**Fichier output pour le rapport final :**
- `.cursor/agents/rapport-{titre-kebab-case}.md`

## Instructions de Collaboration

[√âcrire en fran√ßais. **OBLIGATOIRE ET CRITIQUE** : Cette section doit √™tre extr√™mement directive et imp√©rative. Tu DOIS sp√©cifier que l'agent :]

- **EST INTERDIT** de commencer √† impl√©menter quoi que ce soit imm√©diatement
- **DOIT** lire EXHAUSTIVEMENT tous les fichiers list√©s dans "Fichiers Concern√©s" avant toute action
- **DOIT** effectuer toutes les recherches s√©mantiques et web mentionn√©es
- **DOIT** lire le README et toute documentation pertinente
- **DOIT** atteindre une compr√©hension approfondie du contexte et du projet avant toute discussion
- **DOIT** discuter avec l'utilisateur pour clarifier les attentes pr√©cises, poser des questions sur les contraintes techniques, et √©tablir un plan d'action d√©taill√© ensemble
- **DOIT** √©crire le rapport final dans le fichier output mentionn√© apr√®s avoir termin√©
- Seulement APR√àS avoir compl√©t√© cette exploration exhaustive et cette planification collaborative, peut commencer toute impl√©mentation

Emphasizer que l'exploration est OBLIGATOIRE, pas optionnelle.
```

**IMPORTANT** : Tous les fichiers de t√¢ches doivent suivre **exactement** ce format avec les 4 sections obligatoires.

### √âtape 4 : Ajouter l'Entr√©e dans roadmap.yaml

Lire le fichier `.cursor/agents/roadmap.yaml` et ajouter une nouvelle entr√©e dans la liste `tasks` :

```yaml
- id: "task-{unique-id}"  # G√©n√©rer un ID unique (ex: task-1, task-2, etc.)
  title: "Titre descriptif de la t√¢che"
  status: "TODO"
  priority: 3  # 1-5
  dependencies: []  # Liste d'IDs de t√¢ches ou []
  task_file: "{nom-fichier-tache}.md"
  output_file: "rapport-{nom-fichier-tache}.md"
  created_at: "2025-01-20T10:00:00Z"  # ISO 8601 timestamp actuel
  started_at: null
  deadline: null  # Optionnel
```

**G√©n√©ration d'ID unique** :
- Si le fichier roadmap.yaml existe d√©j√†, lire toutes les t√¢ches existantes
- Identifier le plus grand ID num√©rique utilis√© (ex: si task-5 existe, le prochain est task-6)
- Utiliser le format `task-{numero}` pour garantir l'unicit√©

**Validation** :
- V√©rifier que le fichier `task_file` existe (que tu viens de cr√©er)
- V√©rifier que les d√©pendances mentionn√©es existent dans la roadmap (si des d√©pendances sont sp√©cifi√©es)
- Si validation √©choue ‚Üí **√âCHOUER EXPLICITEMENT** avec un message clair

### √âtape 5 : Sauvegarder

Sauvegarder le fichier `roadmap.yaml` avec la nouvelle entr√©e ajout√©e.

## Exemple Complet

Supposons que tu travailles sur l'authentification et d√©couvres des probl√®mes de performance. Tu veux cr√©er une t√¢che pour optimiser plus tard.

**√âtape 1 - M√©tadonn√©es** :
- Titre : "Optimiser les performances d'authentification"
- Priorit√© : 4
- D√©pendances : []
- Contexte : Probl√®mes de performance d√©couverts lors des tests

**√âtape 2 - Noms de fichiers** :
- Fichier t√¢che : `optimiser-performances-auth.md`
- Fichier r√©sultat : `rapport-optimiser-performances-auth.md`

**√âtape 3 - Cr√©er le fichier de t√¢che** :
- Cr√©er `.cursor/agents/optimiser-performances-auth.md` avec les 4 sections (v√©rifier l'unicit√© du titre)

**√âtape 4 - Ajouter dans roadmap.yaml** :
```yaml
- id: "task-1"
  title: "Optimiser les performances d'authentification"
  status: "TODO"
  priority: 4
  dependencies: []
  task_file: "optimiser-performances-auth.md"
  output_file: "rapport-optimiser-performances-auth.md"
  created_at: "2025-01-20T14:30:00Z"
  started_at: null
  deadline: null
```

## Points d'Attention

- **Fail-Fast** : Si roadmap.yaml n'existe pas, le cr√©er avec la structure de base (`version: "1.0"`, `tasks: []`)
- **Format coh√©rent** : Tous les fichiers de t√¢ches doivent suivre exactement le m√™me format
- **Validation** : Valider que les d√©pendances existent avant d'ajouter la t√¢che
- **Fran√ßais** : Tout le contenu des fichiers de t√¢ches doit √™tre en fran√ßais
- **Unicit√©** : Garantir que les IDs de t√¢ches sont uniques

## Int√©gration avec le Workflow

Cette r√®gle fonctionne en compl√©ment de :
- La commande `/agent` qui permet de s√©lectionner et traiter une t√¢che
- Les autres r√®gles existantes (peut √™tre combin√©e avec `agent.mdc`, `debug.mdc`, etc.)

Quand tu identifies une t√¢che future, cr√©e-la imm√©diatement dans la roadmap plut√¥t que de la noter mentalement ou de l'oublier.
