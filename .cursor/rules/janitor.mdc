---
alwaysApply: false
description: Guide méthodologique pour nettoyer et organiser systématiquement le repository via une machine à états modulaire
---

# Règle Janitor : Nettoyage Systématique du Repository 🧹

## Principe Fondamental : Nettoyage Complet et Organisation

Cette règle implémente un système de nettoyage systématique du repository : **maintenir la propreté, structurer la documentation et assurer la connectivité des docs sans rien casser**. L'objectif est de traiter UN SEUL dossier par exécution avec un processus méthodologique rigoureux.

**Philosophie** : Un repository propre est un repository maintenable. Mieux vaut traiter un dossier complètement que plusieurs superficiellement.

---

## ⛔🚫❌ INTERDICTION ABSOLUE DE CASSER ❌🚫⛔

**RÈGLE CRITIQUE** : Le janitor doit UNIQUEMENT nettoyer et organiser. **TOUTE tentative de modification qui pourrait casser le fonctionnement interrompt immédiatement le cycle.**

### Interdictions strictes :
- 🚫 **Ne jamais supprimer** sans vérification préalable
- 🚫 **Ne jamais modifier** du code fonctionnel sans nécessité
- 🚫 **Ne jamais casser** des liens existants dans la documentation
- ❌ **Arrêt immédiat** si l'agent risque de compromettre la fonctionnalité

**Rappel constant** : Cette règle **NETTOIE**, ne casse pas. Préserver l'intégrité fonctionnelle est primordial.

## 🏗️ Architecture de Machine à États Modulaire

### Nouveau Système : Architecture Janitor/

Cette règle a été **transformée en une architecture de machine à états modulaire** pour garantir un processus de nettoyage rigoureux et fiable. Le système monolithique précédent a été décomposé en **6 étapes interconnectées** dans le dossier `.cursor/rules/janitor/`.

### Pourquoi cette Architecture ?

**Problèmes du système précédent** :
- L'agent avait tendance à oublier où il en était
- Risque d'abandon prématuré du processus
- Tentatives de modification excessive pendant le nettoyage
- Manque de rigueur dans la validation des résultats

**Solutions apportées** :
- ✅ **Machine à états stricte** : chaque étape est autonome et obligatoire
- ✅ **Transitions explicites** : l'agent doit invoquer la règle suivante avec `fetch_rules`
- ✅ **Boucle interne contrôlée** : étape 04-clean-files avec gestion des sous-dossiers
- ✅ **Reminder standardisé** : rappel constant des règles dans chaque étape

## 🔄 Processus Méthodologique en 6 Étapes

### Vue d'Ensemble du Système à États

```
00-start (point d'entrée)
  ↓
01-root-check       # Vérification racine du repository
  ↓
02-select-folder    # Sélection du dossier à traiter
  ↓
03-explore-folder   # Exploration structure du dossier
  ↓
04-clean-files      # Nettoyage fichiers (boucle sous-dossiers)
  ↓ (loop interne)
  ├→ 04-clean-files (si sous-dossiers restants)
  └→ 05-update-docs (si tous sous-dossiers traités)
  ↓
05-update-docs      # Mise à jour documentation
```

### Caractéristiques Clés de l'Architecture

#### 1. **Machine à États Stricte**
- **INTERDICTION ABSOLUE** de mélanger ou sauter des étapes
- **OBLIGATION** de marquer explicitement le titre de l'étape actuelle
- **Chaque étape** a un objectif précis et ne peut pas être contournée

#### 2. **Transitions Explicites**
- L'agent DOIT invoquer la règle suivante avec `fetch_rules`
- Chaque règle indique clairement quelle règle invoquer ensuite
- La règle 04-clean-files offre une boucle interne pour les sous-dossiers

#### 3. **Traitement Complet par Dossier**
- **UN SEUL dossier** traité par exécution complète
- **TOUS les sous-dossiers** du dossier sélectionné sont traités
- **Boucle interne** dans 04-clean-files pour traiter chaque sous-dossier

#### 4. **Reminder Standardisé**
- Chaque règle (01 à 05) commence par un rappel identique
- Interdictions absolues répétées dans chaque étape
- Machine à états clairement affichée

## 🎯 Comment Utiliser cette Architecture

### Activation du Système

**Pour démarrer un nettoyage du repository** :

1. **Invoquer cette règle** : `fetch_rules` avec `janitor`
2. **Démarrer la machine à états** : Invoquer `fetch_rules` avec `00-start`
3. **Suivre le processus** : L'agent suivra automatiquement les 6 étapes dans l'ordre
4. **Valider** : Vérifier que le repo est plus propre après le nettoyage

### Exemple d'Activation

```
Utilisateur : "Utilise la règle janitor pour nettoyer le repository"

Agent : [Invoque cette règle, puis] 
→ Invoque `fetch_rules` avec `00-start`
→ Suit automatiquement : 01-root-check → 02-select-folder → 03-explore-folder → 04-clean-files ⟲ → 05-update-docs
→ [Termine] : Dossier nettoyé et documenté
```

## 📁 Structure des Fichiers Janitor/

```
.cursor/rules/janitor/
├── 00-start.mdc          # Point d'entrée : explique le système à états
├── 01-root-check.mdc     # Vérification racine du repository
├── 02-select-folder.mdc  # Sélection du dossier à traiter
├── 03-explore-folder.mdc # Exploration structure du dossier
├── 04-clean-files.mdc    # Nettoyage fichiers (boucle sous-dossiers)
└── 05-update-docs.mdc    # Mise à jour documentation finale
```

## ⚠️ Règles de la Machine à États

### Règles de fonctionnement obligatoires :
- ✅ **UNIQUEMENT** effectuer les actions décrites dans la règle actuelle
- ❌ **INTERDICTION ABSOLUE** de faire autre chose (même si ça semble utile)
- ❌ **NE RIEN CASSER** : préserver fonctionnalité existante
- ✅ **OBLIGATION** d'invoquer la règle suivante en fin d'étape avec l'outil `fetch_rules`

### Indication Obligatoire de l'Étape

L'agent DOIT **toujours** indiquer son étape actuelle avec des titres markdown explicites :
- `## Étape 01 : Vérification racine du repository`
- `## Étape 02 : Sélection du dossier à traiter`
- `## Étape 03 : Exploration de la structure du dossier`
- `## Étape 04 : Nettoyage systématique des fichiers`
- `## Étape 05 : Mise à jour de la documentation`

**Règle de Machine à État** : Lors des retours/redirections, l'agent DOIT marquer le titre correspondant pour indiquer clairement qu'il change d'état.

## 🚀 Activation Immédiate

**Pour commencer le nettoyage, invoquez immédiatement la première règle de la machine à états :**

**Prochaine étape** : Invoquer la règle `00-start` avec l'outil `fetch_rules` pour démarrer le processus de nettoyage en 6 étapes.

---

## Transitions Possibles

**Toujours vers** : `00-start` - Point d'entrée de la machine à états de nettoyage

**Action requise** : Une fois cette règle invoquée, invoquer `fetch_rules` avec le nom `00-start` pour commencer le processus de nettoyage systématique.