---
alwaysApply: false
description: Guide m√©thodologique pour identifier syst√©matiquement l'origine pr√©cise d'un bug via hypoth√®ses, logs de d√©bogage et analyse
---

# R√®gle Enqu√™teur : Identification Syst√©matique des Bugs üïµÔ∏è

## Principe Fondamental : Fail-Fast Appliqu√© au D√©bogage

Cette r√®gle impl√©mente le principe "Fail-Fast" dans le contexte du d√©bogage : **identifier rapidement et pr√©cis√©ment l'origine du bug sans le masquer**. L'objectif n'est PAS de r√©soudre le bug, mais de le localiser avec une pr√©cision chirurgicale pour permettre une correction cibl√©e.

**Philosophie** : Un bug mal localis√© est un bug qui reviendra. Mieux vaut √©chouer rapidement avec une origine claire qu'un contournement qui masque la cause racine.

---

## ‚õîüö´‚ùå INTERDICTION ABSOLUE DE CORRECTION ‚ùåüö´‚õî

**R√àGLE CRITIQUE** : L'enqu√™teur doit UNIQUEMENT identifier l'origine du bug. **TOUTE tentative de correction interrompt imm√©diatement le cycle d'enqu√™te.**

### Interdictions strictes :
- üö´ **Ne jamais modifier le code** pour "tester une correction"
- üö´ **Ne jamais proposer de solutions** dans le rapport final
- üö´ **Ne jamais impl√©menter de fix** ou workaround
- ‚ùå **Arr√™t imm√©diat** si l'agent commence √† corriger au lieu d'enqu√™ter

**Rappel constant** : Cette r√®gle **IDENTIFIE**, ne corrige pas. Une fois l'origine claire, c'est √† l'utilisateur ou √† une autre r√®gle de proc√©der √† la correction.

## Processus M√©thodologique en 5 √âtapes

### ‚ö†Ô∏è R√àGLE CRITIQUE : Indication Obligatoire de l'√âtape

L'agent DOIT **toujours** indiquer son √©tape actuelle avec des titres markdown explicites :
- `## √âtape 1.a : Exploration des fichiers de code`
- `## √âtape 1.b : Formulation d'hypoth√®ses`
- `## √âtape 2 : Placement de logs de d√©bogage`
- `## √âtape 3 : Ex√©cution et r√©cup√©ration des logs`
- `## √âtape 4 : Analyse des r√©sultats`
- `## √âtape 4.a : Questionnement "POURQUOI" obligatoire`
- `## √âtape 4.b : D√©cision de poursuite ou d'it√©ration`
- `## √âtape 5 : Nettoyage et rapport final`

---

## √âtape 1.a : Exploration des Fichiers de Code üîç

**Objectif** : Identifier tous les fichiers impliqu√©s et comprendre le flux d'ex√©cution complet.

**Actions** :
- Cartographier les fichiers (via `codebase_search`, `read_file`, `grep`)
- Analyser le parcours d'ex√©cution 
- Identifier les d√©pendances (variables, fonctions, services)
- Localiser les points critiques (conditions, validations, transformations)

**Sortie** : Liste des fichiers, flux d'ex√©cution, et points de d√©faillance potentiels.

---

## √âtape 1.b : Formulation d'Hypoth√®ses üéØ

**Objectif** : Formuler 3-5 hypoth√®ses pr√©cises et testables sur l'origine du bug.

**Approche** :
- Synth√©tiser les informations de l'√©tape 1.a
- Identifier les points de d√©faillance probables (variables, fonctions, conditions)
- Prioriser par probabilit√© et impact
- Chaque hypoth√®se doit pointer vers une ligne/instruction sp√©cifique

**Exemple** :
- Hypoth√®se 1 : `user_id` est `None` car `extract_user_id_from_token()` ligne 23 √©choue
- Hypoth√®se 2 : Exception non catch√©e dans `db.get_user()` ligne 45
- Hypoth√®se 3 : Logique invers√©e dans `verify_signature()` ligne 12

### ‚ö†Ô∏è R√àGLE CRITIQUE 
**Ne jamais se satisfaire de solutions simples** : creuser jusqu'√† la ligne exacte, identifier la CAUSE racine, pas les sympt√¥mes.

---

## √âtape 2 : Placement de Logs de D√©bogage üìù

**Objectif** : Ins√©rer des logs "avant/apr√®s" pour identifier la ligne exacte du bug.

### ‚ö†Ô∏è R√àGLES CRITIQUES POUR LES LOGS

1. **Format dictionnaire obligatoire** : `{"cl√©": str(valeur)[:limite]}`
2. **Limitation de caract√®res** : Maximum 100-500 caract√®res selon l'importance
3. **Exit apr√®s boucles** : Protection obligatoire contre les boucles infinies
4. **Logs "sandwich"** : Log AVANT et APR√àS la ligne suspecte

### Format standard des logs
```python
# Log AVANT - tout doit √™tre normal
print({
    "BEFORE_line_47": "true",
    "a": str(a)[:50],
    "b": str(b)[:50],
    "state": "NORMAL"
})

# Ligne suspecte 47
result = a - b  # BUG ICI : devrait √™tre a + b

# Log APR√àS - probl√®me visible ici
print({
    "AFTER_line_47": "true", 
    "result": str(result)[:50],
    "expected": str(a + b)[:50],
    "state": "ANOMALIE_DETECTED" if result != (a + b) else "NORMAL"
})
exit(1)  # Arr√™t obligatoire pour analyse
```

---

## √âtape 3 : Ex√©cution et R√©cup√©ration des Logs üöÄ

**Objectif** : Lancer le programme et r√©cup√©rer tous les logs dans les conditions du bug.

**M√©thodes** :
- Ex√©cution directe : `python main.py` ou `npm start`
- Script temporaire : Cr√©er `debug_scenario.py` √† la racine avec code minimal
- Conditions exactes : Reproduire l'environnement du bug

**R√©cup√©ration** : Capturer stdout/stderr, pr√©server l'ordre chronologique.

---

## √âtape 4 : Analyse des R√©sultats üîç

**Objectif** : Analyser les logs pour identifier les patterns et sympt√¥mes du bug.

**M√©thodologie** :
1. Examiner les logs pour valeurs inattendues
2. Corr√©ler avec les hypoth√®ses formul√©es
3. Identifier les sympt√¥mes pr√©cis
4. Pr√©parer le questionnement "POURQUOI"

**R√©sultat attendu** : Liste des sympt√¥mes clairs avec hypoth√®ses valid√©es/invalid√©es.

---

## √âtape 4.a : Questionnement "POURQUOI" Obligatoire ‚ùì

**Objectif** : Se poser "POURQUOI" pour chaque sympt√¥me et r√©pondre avec certitude absolue.

### ‚ö†Ô∏è R√àGLE CRITIQUE - VALIDATION OBLIGATOIRE

**Avant l'√©tape 4.b, l'agent DOIT avoir :**

1. **Question "POURQUOI" pos√©e et r√©pondue** pour chaque sympt√¥me
2. **Preuves par logs** que tout est normal AVANT la ligne identifi√©e
3. **Preuves par logs** que le probl√®me appara√Æt APR√àS cette ligne

### Processus de validation
- **Identifier le sympt√¥me** ‚Üí **Poser "POURQUOI"** ‚Üí **R√©pondre avec pr√©cision ligne/instruction**
- **V√©rifier** : √âtat normal AVANT + Probl√®me visible APR√àS + UNIQUE passage probl√©matique

**Si validation √©choue** ‚Üí Retour √©tape 2 pour logs suppl√©mentaires

### Questions typiques
- POURQUOI cette variable a cette valeur inattendue ?
- POURQUOI cette fonction retourne ce r√©sultat incorrect ?
- POURQUOI cette condition est toujours vraie/fausse ?

---

## √âtape 4.b : D√©cision de Poursuite ou d'It√©ration üéØ

**Objectif** : D√©cider si l'origine du bug est suffisamment claire pour le rapport final.

### Checkpoint de Validation : 3 Questions Obligatoires

**Avant l'√©tape 5, r√©pondre OUI avec preuves :**

1. **Ai-je la ligne EXACTE du bug ?** (pas "dans la fonction X")
2. **Ai-je des logs AVANT cette ligne** prouvant que tout est normal ?
3. **Ai-je des logs APR√àS cette ligne** prouvant l'anomalie ?

**D√©cision** :
- 3 OUI ‚Üí ‚úÖ Passage √† l'√©tape 5
- 1 NON ‚Üí ‚ùå Retour √©tape 2

### ‚ö†Ô∏è R√àGLE DE PROFONDEUR : Fonctions Locales

**Si la ligne identifi√©e est un APPEL de fonction locale** (pas biblioth√®que externe) :
- ‚ùå Tu ne peux PAS t'arr√™ter
- ‚ùå Tu dois RENTRER dans cette fonction
- ‚ùå Continue jusqu'√† trouver l'instruction primitive (assignation, condition, op√©ration, retour)

**Exemples** :
- `result = calculate_total(items)` ‚Üí RENTRER DEDANS
- `data = json.loads(raw_data)` ‚Üí Ne pas rentrer (biblioth√®que externe)

### D√©cisions INACCEPTABLES
- Arr√™t sur sympt√¥me ("`user_id` est None")
- Localisation vague ("dans la fonction X")
- Justification sans preuves ("√ßa doit √™tre ligne 15")

---

## √âtape 5 : Rapport Final üìã

**Objectif** : Fournir un r√©sum√© pr√©cis de l'origine du bug identifi√©.

### Rapport obligatoire
- **Bug identifi√©** : Description du comportement probl√©matique
- **Origine pr√©cise** : Fichier, fonction, ligne exacte
- **Cause racine** : Pourquoi le bug se produit
- **Hypoth√®ses valid√©es/invalid√©es** : Liste avec logs d√©cisifs
- **Conditions de reproduction** : Environnement exact n√©cessaire

**Rappel** : Ce rapport identifie l'origine, ne propose AUCUNE correction.

---

## Mini-Cas Pratiques

### Cas 1 : Fonction Locale √Ä Explorer
**Probl√®me** : `result = calculate_total(items)` retourne 0 au lieu de 150.
**Action** : RENTRER dans `calculate_total()` pour trouver l'instruction primitive probl√©matique.

### Cas 2 : Logs Avant/Apr√®s
```python
# AVANT - tout normal
print({"BEFORE_line_47": "true", "a": str(a)[:50], "b": str(b)[:50]})
result = a - b  # BUG ICI : devrait √™tre a + b  
# APR√àS - anomalie d√©tect√©e
print({"AFTER_line_47": "true", "result": str(result)[:50], "expected": str(a + b)[:50]})
```

### Cas 3 : Arr√™t Pr√©matur√© √âvit√©
**Mauvais** : "Le bug vient de l'authentification car `user_id` est None"
**Bon** : "Ligne 23 dans `extract_user_id()` : `return None` au lieu de `return payload['user_id']`"

---

## R√®gles de S√©curit√© et Erreurs √† √âviter

### ‚ö†Ô∏è Interdictions Absolues
- **Ne jamais simuler** : Tester le v√©ritable code uniquement
- **Ne jamais masquer** : Logs doivent r√©v√©ler, pas cacher
- **Ne jamais contourner** : Identifier la cause, pas les sympt√¥mes
- **Ne jamais proposer de corrections** : UNIQUEMENT identifier l'origine

### Erreurs Fr√©quentes (2-3 lignes chacune)
- **Arr√™t sur sympt√¥me** : "`user_id` est None" ‚Üí Creuse jusqu'√† la ligne exacte
- **Localisation vague** : "Dans le module auth" ‚Üí Fichier + fonction + ligne + instruction pr√©cise  
- **Justification sans preuves** : "√áa doit √™tre ligne 15" ‚Üí Logs avant/apr√®s obligatoires
- **Manquer validation avant/apr√®s** : Preuve que tout est normal avant ET probl√®me apr√®s
- **Confondre cause/cons√©quence** : Remonter √† la PREMI√àRE instruction incorrecte
- **Arr√™t sur fonction locale** : Si appel de fonction locale ‚Üí RENTRER dedans jusqu'√† instruction primitive

---

## Activation de la R√®gle

Cette r√®gle est activ√©e manuellement par l'utilisateur lors de sessions de d√©bogage. Pour l'utiliser :

1. **D√©clencher** : "Utilise la r√®gle enqu√™teur pour identifier l'origine de ce bug"
2. **Contextualiser** : Fournir la description du bug et les conditions de reproduction
3. **Suivre** : L'agent suivra automatiquement le processus en 5 √©tapes
4. **Valider** : V√©rifier que le repo est propre apr√®s l'enqu√™te

**Rappel** : Cette r√®gle identifie, ne corrige pas. Une fois l'origine claire, c'est √† l'utilisateur ou √† une autre r√®gle de proc√©der √† la correction.