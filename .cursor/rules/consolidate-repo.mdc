---
description: RÃ¨gle pour consolider le dÃ©pÃ´t, gÃ©rer userbrief.md et maintenir une structure de projet propre
globs: 
alwaysApply: false
---

## TLDR
Consolidation du dÃ©pÃ´t, transformation des demandes utilisateur en tÃ¢ches, nettoyage de userbrief.md et vÃ©rification de l'intÃ©gritÃ© des fichiers mÃ©moire.

## Structure du dÃ©pÃ´t (pour rÃ©fÃ©rence)
```
.cursor/memory-bank/  
â”œâ”€â”€ context/                 # Contexte du projet  
â”‚   â”œâ”€â”€ projectBrief.md      # Vision globale du projet  
â”‚   â”œâ”€â”€ activeContext.md     # Contexte de travail actuel  
â”‚   â””â”€â”€ techContext.md       # Technologies et dÃ©pendances  
â”œâ”€â”€ workflow/                # Gestion du flux de travail  
â”‚   â”œâ”€â”€ progress.md          # Suivi de la progression  
â”‚   â””â”€â”€ tasks.md             # Liste des tÃ¢ches Ã  accomplir
â”‚   â””â”€â”€ tests.md             # Suivi du rÃ©sultats des tests
src/                         # Scripts sources du projet  
tests/                       # Tests unitaires et d'intÃ©gration  
```

## Instructions

1. **Traitement de userbrief.md** : Analyser et transformer le contenu :
   - Lire le contenu de la section "User Input" dans `.cursor/memory-bank/userbrief.md`
   - Transformer les demandes en tÃ¢ches dans `.cursor/memory-bank/workflow/tasks.md`
   - DÃ©placer le contenu traitÃ© de "User Input" vers "Processing"
   - Identifier les prÃ©fÃ©rences Ã  long terme et les dÃ©placer vers "Precisions"
   - Nettoyer la section "Processing" des Ã©lÃ©ments complÃ¨tement traitÃ©s

2. **Organisation de userbrief.md** : Structurer le contenu selon le template :
   - Maintenir les 3 sections principales : "User Input", "Processing", "Precisions"
   - Appliquer les statuts appropriÃ©s (â¬œ, ğŸ”„, ğŸ“Œ, âœ…) aux Ã©lÃ©ments
   - S'assurer que la structure reste claire et lisible

3. **VÃ©rification de l'intÃ©gritÃ©** : ContrÃ´le des fichiers mÃ©moire :
   - ExÃ©cuter la commande `find . -type f -name "*.md"` pour lister tous les fichiers markdown
   - Analyser les rÃ©sultats pour rechercher les doublons dans les rÃ©pertoires memory-bank
   - Fusionner le contenu des fichiers en double avec les fichiers principaux
   - Supprimer les doublons aprÃ¨s fusion
   - VÃ©rifier que tous les fichiers mÃ©moire sont au bon endroit

4. **Identification des tÃ¢ches de nettoyage** : GÃ©nÃ©rer des tÃ¢ches pour tasks.md :
   - Identifier les fichiers temporaires inutiles
   - RepÃ©rer les fichiers mal placÃ©s
   - Lister les actions de nettoyage nÃ©cessaires
   - Ajouter ces tÃ¢ches Ã  `.cursor/memory-bank/workflow/tasks.md` (sans les exÃ©cuter directement)

5. **Ã‰valuation des demandes utilisateur** : DÃ©cider de la suite du workflow :
   - Si des nouvelles demandes ont Ã©tÃ© identifiÃ©es dans userbrief.md:
     - Formuler clairement la requÃªte utilisateur extraite de userbrief.md
     - Appeler la rÃ¨gle `request-analysis` pour traiter cette requÃªte
   - Sinon:
     - Appeler la rÃ¨gle `context-update` pour continuer le workflow

## PrÃ©cisions

- Le contenu de `.cursor/memory-bank/userbrief.md` ne doit jamais Ãªtre supprimÃ© sans l'autorisation explicite de l'utilisateur
- Seule la structure et l'organisation peuvent Ãªtre modifiÃ©es
- Les demandes utilisateur doivent toujours Ãªtre traitÃ©es en prioritÃ©
- Les doublons doivent Ãªtre fusionnÃ©s avec soin pour ne perdre aucune information
- Les tÃ¢ches de nettoyage doivent Ãªtre ajoutÃ©es Ã  `.cursor/memory-bank/workflow/tasks.md` pour validation ultÃ©rieure
- Cette rÃ¨gle ne doit Ãªtre appelÃ©e que par context-update quand des problÃ¨mes de structure sont dÃ©tectÃ©s

## Next Rules

- `request-analysis` - Si des nouvelles demandes ont Ã©tÃ© identifiÃ©es dans userbrief.md
- `context-update` - Si aucune nouvelle demande n'a Ã©tÃ© identifiÃ©e

## Exemple

fetch_rules ["consolidate-repo"]
<SYSTEM PROMPT>Je vais consolider le dÃ©pÃ´t en transformant les demandes utilisateur en tÃ¢ches, nettoyant userbrief.md selon la nouvelle structure Ã  3 sections, vÃ©rifiant l'intÃ©gritÃ© des fichiers mÃ©moire et identifiant les tÃ¢ches de nettoyage Ã  ajouter Ã  tasks.md.</SYSTEM PROMPT>

# Consolidate-repo : 1 - Traitement de userbrief.md
Je commence par analyser le contenu de la section "User Input" dans `.cursor/memory-bank/userbrief.md`. `(Consolidate-repo : 1 - Traitement de userbrief.md)`
[...lecture et analyse du contenu de userbrief.md...]
J'ai identifiÃ© plusieurs demandes utilisateur que je vais transformer en tÃ¢ches dans `.cursor/memory-bank/workflow/tasks.md`. `(Consolidate-repo : 1 - Traitement de userbrief.md)`
[...transformation des demandes en tÃ¢ches...]
J'ai maintenant dÃ©placÃ© le contenu traitÃ© vers la section "Processing". `(Consolidate-repo : 1 - Traitement de userbrief.md)`

# Consolidate-repo : 2 - Organisation de userbrief.md
Je rÃ©organise maintenant le contenu de `.cursor/memory-bank/userbrief.md` selon la structure Ã  3 sections. `(Consolidate-repo : 2 - Organisation de userbrief.md)`
[...rÃ©organisation du contenu...]
J'ai appliquÃ© les statuts appropriÃ©s aux diffÃ©rents Ã©lÃ©ments. `(Consolidate-repo : 2 - Organisation de userbrief.md)`

# Consolidate-repo : 3 - VÃ©rification de l'intÃ©gritÃ©
Je vÃ©rifie maintenant l'intÃ©gritÃ© des fichiers mÃ©moire. `(Consolidate-repo : 3 - VÃ©rification de l'intÃ©gritÃ©)`
find . -type f -name "*.md"
[...analyse des rÃ©sultats de la commande...]
J'ai identifiÃ© quelques doublons que j'ai fusionnÃ©s avec les fichiers principaux. `(Consolidate-repo : 3 - VÃ©rification de l'intÃ©gritÃ©)`

# Consolidate-repo : 4 - Identification des tÃ¢ches de nettoyage
J'identifie maintenant les tÃ¢ches de nettoyage nÃ©cessaires. `(Consolidate-repo : 4 - Identification des tÃ¢ches de nettoyage)`
[...identification des tÃ¢ches...]
J'ai ajoutÃ© ces tÃ¢ches Ã  `.cursor/memory-bank/workflow/tasks.md` pour une validation ultÃ©rieure. `(Consolidate-repo : 4 - Identification des tÃ¢ches de nettoyage)`

# Consolidate-repo : 5 - Ã‰valuation des demandes utilisateur
J'Ã©value maintenant si j'ai identifiÃ© de nouvelles demandes utilisateur. `(Consolidate-repo : 5 - Ã‰valuation des demandes utilisateur)`
J'ai trouvÃ© les demandes suivantes dans le fichier userbrief.md:
- [RÃ©sumÃ© des demandes extraites]

Je vais maintenant appeler la rÃ¨gle request-analysis pour traiter ces demandes. `(Consolidate-repo : 5 - Ã‰valuation des demandes utilisateur)`

fetch_rules ["request-analysis"]

# Start Rule

Pour dÃ©marrer cette rÃ¨gle, rÃ©cite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais consolider le dÃ©pÃ´t en transformant les demandes utilisateur en tÃ¢ches, nettoyant userbrief.md selon la nouvelle structure Ã  3 sections, vÃ©rifiant l'intÃ©gritÃ© des fichiers mÃ©moire et identifiant les tÃ¢ches de nettoyage Ã  ajouter Ã  tasks.md.</SYSTEM PROMPT>"
