---
description: Rule to consolidate the repository, manage userbrief.md, and maintain a clean project structure
globs: 
alwaysApply: false
---

## TLDR
Repository consolidation, transformation of user requests into tasks, cleaning userbrief.md, and verification of memory files integrity.

## Repository Structure (for reference)
```
.cursor/memory-bank/  
├── context/                 # Project context  
│   ├── projectBrief.md      # Project global vision  
│   ├── activeContext.md     # Current work context  
│   └── techContext.md       # Technologies and dependencies  
├── workflow/                # Workflow management  
│   ├── tasks.md             # List of tasks to accomplish
│   └── tests.md             # Test results tracking
src/                         # Project source scripts  
tests/                       # Unit and integration tests  
```

## Instructions

1. **Processing userbrief.md**: Analyze and transform content:
   - Read content from "User Input" section in `.cursor/memory-bank/userbrief.md` (lines starting with `-`)
   - Identify content type: tasks or preferences
   - For tasks: mark with ⏳ and move to "Processing"
   - For preferences: mark with 📌 and move to "Precisions"
   - Don't convert tasks for tasks.md yet (this will be done by task-decomposition)

2. **Organizing userbrief.md**: Structure content according to template:
   - Maintain sections: "User Input", "Processing", "Precisions" (and potentially "Archives", although this rule doesn't interact with it)
   - Apply appropriate statuses:
     - - : To be processed (in "User Input")
     - ⏳ : In processing (in "Processing", for tasks only)
     - 📌 : Long-term preference (in "Precisions")
     - (Do not use 🗄️ - these are handled by other rules)
   - Ensure structure remains clear and readable

3. **Integrity verification**: Control of memory files:
   - Use the MCP command execution tool via Git Bash to list all markdown files: `mcp_MyMCP_execute_command(command = "\"C:\\Program Files\\Git\\bin\\bash.exe\" -c \"find . -type f -name '*.md'\"")`
   - Analyze results to identify duplicates or misplaced files in `memory-bank` directories.

4. **Direct Cleanup**: Directly resolve integrity issues identified in step 3:
   - If duplicates found:
     - Merge content of duplicate files into the main corresponding file (using file edit tools).
     - Delete duplicates after merging using the MCP command execution tool via Git Bash (e.g., `mcp_MyMCP_execute_command(command = "\"C:\\Program Files\\Git\\bin\\bash.exe\" -c \"rm <duplicate_file_path>\""")`).
   - If misplaced files found:
     - Move misplaced files to their correct location within the `memory-bank` structure (using `mcp_MyMCP_execute_command` with `mv`).
   - If other temporary/unnecessary files identified:
     - Delete them using the MCP command execution tool via Git Bash (`rm`).

5. **MCP Terminal Cleanup**: Clean up finished terminal processes used in this rule.
   - Call `mcp_get_terminal_status` to check the status of running/finished processes.
   - For each process with a final status (e.g., 'Success', 'Failure'), call `mcp_stop_terminal_command` with its `pid` to release resources.

6. **Evaluation of user requests**: Decide next workflow step:
   - IF new requests identified in userbrief.md:
     - Clearly formulate user request extracted from userbrief.md
     - Call `request-analysis` rule to process this request
   - ELSE:
     - Call `context-update` rule to continue workflow

## Specifics

- Only structure and organization can be modified
- User requests must always be processed with priority
- Duplicates must be carefully merged to lose no information
- Files to be deleted should be deleted only after merging and using the MCP command execution tool (`mcp_MyMCP_execute_command`) with Git Bash to run the `rm` command (not the `delete_file` tool because of a bug)
- This rule should only be called by context-update when structure problems are detected
- IMPORTANT: Only this rule is authorized to modify userbrief.md to move items from "User Input" to "Processing" or "Precisions".
- IMPORTANT: Mark new tasks from "User Input" with ⏳ (only) and move to "Processing". Mark preferences with 📌 and move to "Precisions".
- IMPORTANT: Never use 🗄️ in this rule; these are handled by `task-decomposition`.

## Next Rules

- `request-analysis` - If new requests identified in userbrief.md
- `context-update` - If no new request identified in userbrief.md

## Example

# Consolidate-repo: 1 - Processing userbrief.md  
I begin by analyzing the content of `.cursor/memory-bank/userbrief.md`. **(Consolidate-repo: 1 - Processing userbrief.md)**  
[...reading and analyzing userbrief.md content...]  
I've identified several user requests that I will mark as follows:  
- Tasks to perform: ⏳ (moving to "Processing")  
- Long-term preferences: 📌 (moving to "Precisions")  
**(Consolidate-repo: 1 - Processing userbrief.md)**  

# Consolidate-repo: 2 - Organizing userbrief.md  
I'm now reorganizing the content of `.cursor/memory-bank/userbrief.md` according to the template. **(Consolidate-repo: 2 - Organizing userbrief.md)**  
[...content reorganization...]  
I've applied appropriate statuses to the different elements.  
**(Consolidate-repo: 2 - Organizing userbrief.md)**  

# Consolidate-repo: 3 - Integrity verification  
I'm now verifying the integrity of memory files using MCP via Git Bash. **(Consolidate-repo: 3 - Integrity verification)**  
[...calling tool `mcp_MyMCP_execute_command` with command="\"C:\\Program Files\\Git\\bin\\bash.exe\" -c \"find . -type f -name '*.md'\""...]
[...analyzing command results...]
I've identified some duplicates/misplaced files.
**(Consolidate-repo: 3 - Integrity verification)**  

# Consolidate-repo: 4 - Direct Cleanup
I will now directly resolve the identified integrity issues. **(Consolidate-repo: 4 - Direct Cleanup)**
[...merging duplicate file content using edit tools...]
[...deleting duplicate file using `mcp_MyMCP_execute_command` with `rm`...]
[...moving misplaced file using `mcp_MyMCP_execute_command` with `mv`...]
Cleanup actions performed.
**(Consolidate-repo: 4 - Direct Cleanup)**

# Consolidate-repo: 5 - MCP Terminal Cleanup  
I'm now checking MCP terminal processes used in this rule for cleanup. **(Consolidate-repo: 5 - MCP Terminal Cleanup)**  
Calling `mcp_get_terminal_status`...  
[...retrieving process statuses...]
I've found finished processes used for verification/cleanup. Stopping these with `mcp_stop_terminal_command` to free up resources.  
Cleanup complete.  
**(Consolidate-repo: 5 - MCP Terminal Cleanup)**  

# Consolidate-repo: 6 - Evaluation of user requests  
I'm now evaluating if new user requests were identified in userbrief.md during step 1. **(Consolidate-repo: 6 - Evaluation of user requests)**  
[...checking if any requests were marked ⏳ or 📌 in step 1...]
[If yes:] I found the following requests: [...]. I will now call the `request-analysis` rule.
[If no:] No new requests were identified. I will call `context-update`.
**(Consolidate-repo: 6 - Evaluation of user requests)**  

[...] (The workflow must continue uninterrupted: even if the example stops here, the agent must IMPERATIVELY continue in reality: it MUST call and execute the following rule, then the next, etc., without ever stopping -> It is completely autonomous.)  