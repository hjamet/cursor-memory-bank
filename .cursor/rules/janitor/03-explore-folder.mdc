---
alwaysApply: false
description: Exploration syst√©matique de la structure du dossier s√©lectionn√© pour comprendre son organisation
---

# √âtape 03 : Exploration de la Structure du Dossier üîç

## ‚ö†Ô∏è SYST√àME √Ä √âTATS - RAPPEL OBLIGATOIRE

Vous √™tes actuellement dans une **machine √† √©tats stricte** pour le nettoyage du repository :

### R√®gles de fonctionnement
- ‚úÖ **UNIQUEMENT** effectuer les actions d√©crites dans cette r√®gle
- ‚ùå **INTERDICTION ABSOLUE** de faire autre chose (m√™me si √ßa semble utile)
- ‚ùå **NE RIEN CASSER** : pr√©server fonctionnalit√© existante
- ‚úÖ **OBLIGATION** d'invoquer la r√®gle suivante en fin d'√©tape avec l'outil `fetch_rules`

### Machine √† √©tats
Cette √©tape fait partie d'un processus en 6 √©tapes :
`00-start ‚Üí 01-root-check ‚Üí 02-select-folder ‚Üí 03-explore-folder ‚Üí 04-clean-files ‚ü≤ ‚Üí 05-update-docs`

**Votre √©tape actuelle** : 03-explore-folder - Exploration de la structure du dossier

---

## Objectif de l'√âtape 03

**Analyser en d√©tail la structure du dossier s√©lectionn√©** pour comprendre son organisation, identifier les probl√®mes potentiels et pr√©parer le nettoyage syst√©matique.

### Actions Obligatoires √† Effectuer

1. **Explorer la structure compl√®te** :
   - Utiliser `list_dir` pour obtenir tous les fichiers et sous-dossiers
   - Utiliser `glob_file_search` pour identifier les patterns de fichiers
   - Analyser la hi√©rarchie compl√®te du dossier

2. **Comprendre le r√¥le du dossier** :
   - Analyser le fichier Markdown existant (s'il existe)
   - Identifier le type de contenu (code, documentation, scripts, tests)
   - Comprendre la logique d'organisation

3. **Identifier les probl√®mes d'organisation** :
   - Compter le nombre de fichiers dans chaque sous-dossier
   - D√©tecter si >5 fichiers dans un dossier (n√©cessite sous-division)
   - Identifier les fichiers mal plac√©s ou redondants

4. **Proposer une restructuration si n√©cessaire** :
   - Si >5 fichiers : cr√©er une structure de sous-dossiers logique
   - Organiser par type de fichier ou par fonctionnalit√©
   - Pr√©parer le plan de r√©organisation

5. **Analyser les scripts de g√©n√©ration** :
   - Identifier les scripts qui g√©n√®rent des fichiers
   - V√©rifier o√π ils placent les fichiers g√©n√©r√©s
   - D√©tecter si les chemins de sortie sont appropri√©s

### Crit√®res d'Analyse

#### Structure Actuelle
- **Nombre de fichiers** par dossier
- **Types de fichiers** pr√©sents
- **Hi√©rarchie** des sous-dossiers
- **Coh√©rence** de l'organisation

#### Probl√®mes Potentiels
- **Trop de fichiers** dans un dossier (>5)
- **Fichiers mal plac√©s** (ex: .md dans un dossier de code)
- **Scripts mal configur√©s** (chemins de sortie incorrects)
- **Documentation manquante** ou obsol√®te

#### Restructuration N√©cessaire
- **Cr√©ation de sous-dossiers** pour organiser les fichiers
- **D√©placement de fichiers** vers des emplacements plus logiques
- **Modification de scripts** pour g√©n√©rer dans les bons dossiers

### Sortie Attendue

√Ä la fin de cette √©tape, vous devez fournir :
- **Structure actuelle** : arbre complet des fichiers et dossiers
- **Analyse du r√¥le** : compr√©hension de la fonction du dossier
- **Probl√®mes identifi√©s** : liste des probl√®mes d'organisation
- **Plan de restructuration** : actions √† effectuer pour am√©liorer l'organisation

### Exemple de Sortie

```
Structure actuelle du dossier tests/ :
tests/
‚îú‚îÄ‚îÄ test_auth.py
‚îú‚îÄ‚îÄ test_user.py
‚îú‚îÄ‚îÄ test_api.py
‚îú‚îÄ‚îÄ test_database.py
‚îú‚îÄ‚îÄ test_utils.py
‚îú‚îÄ‚îÄ test_integration.py
‚îú‚îÄ‚îÄ fixtures/
‚îÇ   ‚îú‚îÄ‚îÄ user_data.json
‚îÇ   ‚îî‚îÄ‚îÄ api_responses.json
‚îî‚îÄ‚îÄ README.md

Analyse :
- R√¥le : Tests unitaires et d'int√©gration
- Probl√®me : 6 fichiers Python √† la racine (>5)
- Documentation : README.md pr√©sent mais peut-√™tre obsol√®te

Plan de restructuration :
- Cr√©er tests/unit/ pour les tests unitaires
- Cr√©er tests/integration/ pour les tests d'int√©gration
- D√©placer les fichiers selon leur type
- Mettre √† jour les imports dans les fichiers de test
```

### R√®gles de S√©curit√©

1. **Ne pas modifier** : cette √©tape est uniquement d'analyse
2. **Documenter tout** : noter chaque observation importante
3. **Pr√©parer le plan** : mais ne pas l'ex√©cuter encore
4. **Identifier les d√©pendances** : comprendre les liens entre fichiers

---

## Transitions Possibles

**Toujours vers** : `04-clean-files` - Nettoyage syst√©matique des fichiers avec boucle pour les sous-dossiers

**Action requise** : Une fois l'exploration termin√©e et le plan de restructuration √©tabli, invoquer `fetch_rules` avec le nom `04-clean-files` pour commencer le nettoyage syst√©matique.