---
description: Call this rule to create unit tests for new features
globs: 
alwaysApply: false
---
## TLDR
Create unit tests for implemented features following testing best practices.

## Instructions

1. **Feature analysis**: Identify what needs to be tested
   - Examine modified/created files to find behaviors to test
   - List necessary test cases (basic behavior only)
   - After each tool call, write **(Test-implementation - 1.[Feature name] in progress...)**

2. **Test creation**: For each feature
   - Create a test file in the `tests/` folder starting with `test_`
   - Implement a single test focusing on basic, expected behavior
   - Use the format defined in the test-files editing rule
   - After each tool call, write **(Test-implementation - 2.[Test name] in progress...)**

3. **Call next rule**: Mandatory call to `test-execution`

## Specifics

- Verify expected behavior, not internal implementation
- STRICTLY create only one test per function/method, focusing solely on its basic intended behavior. DO NOT test edge cases, error conditions, or complex scenarios.
- Create only classic usage tests, focusing on basic behavior
- Use descriptive names clearly explaining what is being tested
- All test files must begin with `test_` and be placed in the `tests/` folder
- Include logging using `src/utils/logger.py` if the code is in Python
- To avoid losing the workflow, systematically write `Test-implementation - [number].[Name] in progress...` between each step

## Next Rules
- `test-execution` - To execute created tests and analyze results

## Example

[...fetching rule `test-implementation`...] # Use your rule-calling tool to call the rule, then apply it !

# Test-implementation: 1 - Feature analysis
I begin by identifying features to test. **(Test-implementation: 1 - Feature analysis)**
[...analysis of modified files...]
**(Test-implementation - 1.Authentication in progress...)**
[...identification of behaviors to test...]
**(Test-implementation: 1 - Feature analysis)**

# Test-implementation: 2 - Test creation
I will create tests for each identified feature. **(Test-implementation: 2 - Test creation)**
[...creation of first test file...]
**(Test-implementation - 2.TestLogin in progress...)**
[...creation of second test file...]
**(Test-implementation - 2.TestValidation in progress...)**
**(Test-implementation: 2 - Test creation)**

# Test-implementation: 3 - Call next rule
I must now call the test-execution rule to execute the tests.
The test-execution rule must be called to execute and analyze the tests. **(Test-implementation: 3 - Call next rule)**

[...fetching rule `test-execution`...] # Use your rule-calling tool to call the rule, then apply it !

# Test-execution: 1 - Test execution
I begin by executing the unit tests. **(Test-execution: 1 - Test execution)**

[...] (The workflow must continue uninterrupted: the agent executes the following rule, then the next, etc., without ever stopping -> It is completely autonomous.)