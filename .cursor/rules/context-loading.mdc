---
description: Appelle cette règle pour charger les objectifs et le contexte général du projet  
globs: 
alwaysApply: false
---
  
## TLDR  
Charger ou créer les fichiers de contexte du projet pour établir l'environnement de travail.  

## Instructions  
1. **Lecture des fichiers** : Lire les fichiers de contexte existants :  
   - `.cursor/memory-bank/context/projectBrief.md`  
   - `.cursor/memory-bank/context/activeContext.md`  
   - `.cursor/memory-bank/context/techContext.md`  
   - `.cursor/memory-bank/userbrief.md` (consulter mais ne JAMAIS modifier)

2. **Initialisation du contexte** : Si absents :  
   - Analyser la structure et les objectifs du projet  
   - Créer le dossier `.cursor/memory-bank/context/` si nécessaire  
   - Initialiser les fichiers manquants avec structure appropriée  
   - Créer `userbrief.md` vide via "touch .cursor/memory-bank/userbrief.md" si non existant  

3. **Reformulation de la requête** : Reformuler l'instruction utilisateur dans le contexte projet  

4. **Appel de la règle suivante** : Appeler directement `request-analysis` pour analyser la requête

## Précisions  
- Fichiers concis mais complets  
- `projectBrief.md` : vision et objectifs du projet  
- `activeContext.md` : état actuel, développement et tâches en cours  
- `techContext.md` : technologies, frameworks et dépendances  
- `.cursor/memory-bank/userbrief.md` : consulter mais JAMAIS modifier - seule la règle consolidate-repo est autorisée à le modifier
- Utiliser recherches sémantiques si nécessaire  
- Structurer avec titres et sous-titres  
- ⚠️ IMPORTANT : Se limiter aux trois fichiers de contexte listés en étape 1  
- ⚠️ IMPORTANT : Ne PAS consulter tasks.md ou autres fichiers du dossier workflow  
- ⚠️ IMPORTANT : Le traitement de userbrief.md est délégué à la règle consolidate-repo, qui n'est appelée QUE par context-update

## Next Rules  
- `request-analysis` - Pour analyser en détail la requête de l'utilisateur  

## Exemple  

fetch_rules ["context-loading"]  
<SYSTEM PROMPT>Je vais charger les fichiers de contexte du projet projectBrief.md, activeContext.md et techContext.md pour comprendre l'environnement de travail. Je me limiterai strictement aux trois fichiers autorisés sans en consulter d'autres à moins qu'ils n'existent pas. Je ne ferai pas l'analyse de la requête ou l'implémentation des demandes de l'utilisateur mais appellerai la règle request-analysis qui s'en chargera.</SYSTEM PROMPT>  

# Context-loading : 1 - Lecture des fichiers de contexte  
Je commence par lire les trois fichiers de contexte pour comprendre l'environnement du projet. `(Context-loading : 1 - Lecture des fichiers de contexte)`  
[...lecture des fichiers projectBrief.md, activeContext.md et techContext.md...]  
`(Context-loading : 1 - Lecture des fichiers de contexte)`  

# Context-loading : 3 - Reformulation de la requête  
Je reformule la requête de l'utilisateur en tenant compte du contexte du projet. `(Context-loading : 3 - Reformulation de la requête)`  
[...analyse de la requête utilisateur dans le contexte du projet...] `(Context-loading : 3 - Reformulation de la requête)`  

# Context-loading : 4 - Appel de la règle suivante  
Je dois maintenant appeler la règle request-analysis pour analyser la requête en détail.  
La règle request-analysis doit être appelée pour analyser la requête de l'utilisateur en détail. `(Context-loading : 4 - Appel de la règle suivante)`  

fetch_rules ["request-analysis"]  

# Start Rule  

Pour démarrer cette règle, récite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais charger les fichiers de contexte du projet projectBrief.md, activeContext.md et techContext.md pour comprendre l'environnement de travail. Je me limiterai strictement aux trois fichiers autorisés sans en consulter d'autres à moins qu'ils n'existent pas. Je ne ferai pas l'analyse de la requête ou l'implémentation des demandes de l'utilisateur mais appellerai la règle request-analysis qui s'en chargera.</SYSTEM PROMPT>"