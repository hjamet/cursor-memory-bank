---
description: Call this rule to update context files and commit the changes.
globs: 
alwaysApply: false
---

## TLDR
Update context files to reflect changes, update tasks.md based on test results, and make a commit following conventions.

## Instructions
1. **Context update**: Update the three context files if necessary:
   - `.cursor/memory-bank/context/projectBrief.md`: Update global vision if impacted
   - `.cursor/memory-bank/context/activeContext.md`: Reflect current state after modifications
   - `.cursor/memory-bank/context/techContext.md`: Add/modify technical information if necessary

2. **Context cleanup**: Clean context and workflow files:
   - Remove obsolete or redundant information
   - Condense overly detailed sections
   - Ensure each file remains under 200 lines
   - Prioritize conciseness while maintaining clarity

3. **tasks.md update**: Update tasks.md file based on test results:
   - Move successful tasks from "In Progress" to "Done"

4. **File integrity verification**: Look for structural problems:
   - Read the `.cursor/memory-bank/userbrief.md` file.
   - Execute the command `find . -type f -name "*.md"`
   - Analyze results to identify:
     - File duplicates
     - Misplaced files
     - Unnecessary temporary files
     - Files with incorrect names
   - If structural problems are identified OR if the `.cursor/memory-bank/userbrief.md` file contains unprocessed comments (marked with ⬜ symbol), call the `consolidate-repo` rule
   - Otherwise, continue with the next step: 5. **Commit changes**

5. **Commit changes**: Make a commit with the modifications:
   - Prepare files and create commit in a single command:
     `git commit -a -m "[message]"` (MANDATORY to use `git commit -a` and NEVER `git add [files]` or any other variant specifying individual files - this is crucial to ensure all changes are properly tracked)
   - Follow conventional commit format with emoji for the message

6. **Call the next rule**: Mandatory call to the next rule if the workflow is not complete:
   - Read the `.cursor/memory-bank/workflow/test.md` file
     - If at least one test fails, call the `fix` rule
     - Otherwise, check if there are still tasks in progress or to do in tasks.md
       - If yes, call the `implementation` rule
       - Otherwise, indicate that the workflow is complete

## Specifics
- Mark tasks as complete only if all associated tests pass
- Use conventional commit format by adding an emoji to describe the operation performed
- Systematically delete old history entries that are no longer relevant
- NEVER end without either explicitly calling a next rule or explicitly indicating that the workflow is complete
- The workflow must NEVER be considered complete if there are remaining tasks in "In Progress" or "ToDo" OR if there is at least one failing test (marked ❌) or with warning (marked ⚠️)
- For the commit, MANDATORY to use `git commit -a` and NEVER `git add [files]` or any other variant specifying individual files - this is crucial to ensure all changes are properly tracked
- ⚠️ **Command Execution Note**: The terminal tool occasionally exhibits a bug that adds "[200~" prefix and/or "~" suffix to commands (e.g., "[200~.venv/Scripts/python.exe" instead of ".venv/Scripts/python.exe"), resulting in "command not found" errors. These are NOT code or logic errors but tool-specific issues. If this occurs, simply retry the exact same command 2-3 times until it executes properly. Never treat these specific formatting errors as actual code problems or test failures.
- If all tasks are complete (meaning there are NO MORE tasks in the "In Progress" and "ToDo" sections of the tasks.md file) AND all tests pass (ALL marked ✅), then:
   - Present a clear and concise synthesis of the work done
   - Summarize implemented features and resolved issues
   - Explicitly indicate that the workflow is successfully completed
   - Explicitly state: "The workflow is complete, no next rule to call."
- If the workflow is not complete, call the appropriate next rule

## Format for commit message
```
<emoji_code><type>: description générale
- détail 1
- détail 2
- détail 3
[etc...]

[optional footer]
```

Examples avec codes emoji:
- :sparkles: feat: pour une nouvelle fonctionnalité
  - amélioration X ajoutée
  - nouvelle feature Y
  - support de Z

- :bug: fix: pour une correction de bug
  - correction du problème A
  - résolution du crash B

- :memo: docs: pour la documentation
  - mise à jour de la section X
  - clarification de Y
  
- :recycle: refactor: pour une refactorisation
  - restructuration du module X
  - optimisation de Y

- :white_check_mark: test: pour les tests
  - nouveaux tests pour X
  - amélioration couverture Y

- :wrench: chore: pour la maintenance
  - mise à jour dépendance X
  - nettoyage Y

## Next Rules
- `consolidate-repo` - If file structure problems are detected or unprocessed comments exist in userbrief.md
- `fix` - If at least one test fails
- `implementation` - If at least one task is still in progress or to do and no test fails

## Example

fetch_rules ["context-update"]

# Context-update: 1 - Context update
I begin by updating the context files to reflect changes. **(Context-update: 1 - Context update)**
[...updating projectBrief.md file...]
**(Context-update: 1 - Context update)**
[...updating activeContext.md file...]
**(Context-update: 1 - Context update)**
[...updating techContext.md file...]
**(Context-update: 1 - Context update)**

# Context-update: 2 - Context cleanup
I clean up context files by removing obsolete information. **(Context-update: 2 - Context cleanup)**
[...cleaning up context files...]
**(Context-update: 2 - Context cleanup)**

# Context-update: 3 - Updating tasks.md file
I update the tasks.md file by moving completed tasks to Done. **(Context-update: 3 - Updating tasks.md file)**
[...updating tasks.md file...]
**(Context-update: 3 - Updating tasks.md file)**

# Context-update: 4 - File integrity verification
I now check the integrity of project files. **(Context-update: 4 - File integrity verification)**
find . -type f -name "*.md"
[...analyzing command results...]
I have not identified structural problems in the files. I will now check the content of the `userbrief.md` file. **(Context-update: 4 - File integrity verification)**
[...checking .cursor/memory-bank/userbrief.md file...]
I don't see new tasks or advice to process. I will therefore proceed to the next step.
**(Context-update: 4 - File integrity verification)**

# Context-update: 5 - Making a commit
I prepare and make a commit with the changes made. **(Context-update: 5 - Making a commit)**
[...creating commit...]
**(Context-update: 5 - Making a commit)**

# Context-update: 6 - Calling the next rule
I now check the tests and remaining tasks to determine which rule to call. **(Context-update: 6 - Calling the next rule)**
[...checking tests and tasks...]
I see there are tasks left to do and all tests pass. I will therefore call the `implementation` rule. **(Context-update: 6 - Calling the next rule)**

fetch_rules ["implementation"]