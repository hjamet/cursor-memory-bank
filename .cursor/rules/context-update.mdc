---
description: # R√®gle: context-update  **Description**: [tests] - Mise √† jour des fichiers de contexte et pr√©paration du commit  """ ## TLDR Mettre √† jour les fichiers de contexte pour refl√©ter les changements, actualiser tasks.md en fonction des r√©sultats des tests, et effectuer un commit suivant les conventions.  ## Instructions 1. Mettre √† jour les trois fichiers de contexte si n√©cessaire:    - `.cursor/memory-bank/context/projectbrief.md`: Actualiser la vision globale si impact√©e    - `.cursor/memory-bank/context/activeContext.md`: Refl√©ter l'√©tat actuel apr√®s les modifications    - `.cursor/memory-bank/context/techContext.md`: Ajouter/modifier les informations techniques si n√©cessaire  2. Mettre √† jour le fichier tasks.md en fonction des r√©sultats des tests:    - D√©placer les t√¢ches r√©ussies de "In Progress" vers "Done"    - Ajouter des d√©tails ou notes bas√©s sur les r√©sultats des tests    - Ajuster les priorit√©s des t√¢ches restantes si n√©cessaire  3. Effectuer un commit avec les modifications:    - Pr√©parer les fichiers et cr√©er le commit en une seule commande:      `git add [fichiers] && git commit -m "[message]"`    - Suivre le format conventional commit avec emoji pour le message  4. Si toutes les t√¢ches sont termin√©es et tous les tests passent:    - Pr√©senter une synth√®se claire et concise du travail effectu√©    - R√©sumer les fonctionnalit√©s impl√©ment√©es et les probl√®mes r√©solus    - Sugg√©rer des am√©liorations futures ou des points d'attention  ## Pr√©cisions - Les mises √† jour des fichiers de contexte doivent √™tre concises mais compl√®tes - Ne mettre √† jour que les sections pertinentes des fichiers de contexte - Marquer les t√¢ches comme termin√©es uniquement si tous les tests associ√©s passent - Suivre strictement le format conventional commit pour le message de commit - Inclure un emoji appropri√© au d√©but du message de commit - Inclure une r√©f√©rence aux tests r√©ussis dans le message de commit - S'assurer que tous les fichiers modifi√©s sont inclus dans le commit  ## Format pour le message de commit ``` <emoji> <type>(<scope>): <description>  [corps du message optionnel]  [footer optionnel] ```  Exemples d'emojis et types: - ‚ú® feat: pour une nouvelle fonctionnalit√© - üêõ fix: pour une correction de bug - üìù docs: pour la documentation - ‚ôªÔ∏è refactor: pour une refactorisation - ‚úÖ test: pour l'ajout ou la modification de tests - üîß chore: pour les t√¢ches de maintenance  ## Next Rules - `fix` - Si au moins un test √©choue toujours - `implementation` - Si au moins une t√¢che est toujours en cours ou √† faire """
globs: 
alwaysApply: false
---
## TLDR
Mettre √† jour les fichiers de contexte pour refl√©ter les changements, actualiser tasks.md en fonction des r√©sultats des tests, et effectuer un commit suivant les conventions.

## Instructions
1. Mettre √† jour les trois fichiers de contexte si n√©cessaire:
   - `.cursor/memory-bank/context/projectbrief.md`: Actualiser la vision globale si impact√©e
   - `.cursor/memory-bank/context/activeContext.md`: Refl√©ter l'√©tat actuel apr√®s les modifications
   - `.cursor/memory-bank/context/techContext.md`: Ajouter/modifier les informations techniques si n√©cessaire

2. Mettre √† jour le fichier tasks.md en fonction des r√©sultats des tests:
   - D√©placer les t√¢ches r√©ussies de "In Progress" vers "Done"
   - Ajouter des d√©tails ou notes bas√©s sur les r√©sultats des tests
   - Ajuster les priorit√©s des t√¢ches restantes si n√©cessaire

3. Effectuer un commit avec les modifications:
   - Pr√©parer les fichiers et cr√©er le commit en une seule commande:
     `git add [fichiers] && git commit -m "[message]"`
   - Suivre le format conventional commit avec emoji pour le message

4. Si toutes les t√¢ches sont termin√©es et tous les tests passent:
   - Pr√©senter une synth√®se claire et concise du travail effectu√©
   - R√©sumer les fonctionnalit√©s impl√©ment√©es et les probl√®mes r√©solus
   - N'appelle pas de r√®gle suivante : le workflow est termin√© ! :D

## Pr√©cisions
- Les mises √† jour des fichiers de contexte doivent √™tre concises mais compl√®tes
- Ne mettre √† jour que les sections pertinentes des fichiers de contexte
- Marquer les t√¢ches comme termin√©es uniquement si tous les tests associ√©s passent
- Suivre strictement le format conventional commit pour le message de commit
- Inclure un emoji appropri√© au d√©but du message de commit
- Inclure une r√©f√©rence aux tests r√©ussis dans le message de commit
- S'assurer que tous les fichiers modifi√©s sont inclus dans le commit

## Format pour le message de commit
```
<emoji> <type>(<scope>): <description>

[corps du message optionnel]

[footer optionnel]
```

Exemples d'emojis et types:
- ‚ú® feat: pour une nouvelle fonctionnalit√©
- üêõ fix: pour une correction de bug
- üìù docs: pour la documentation
- ‚ôªÔ∏è refactor: pour une refactorisation
- ‚úÖ test: pour l'ajout ou la modification de tests
- üîß chore: pour les t√¢ches de maintenance

## Next Rules
- `fix` - Si au moins un test √©choue toujours
- `implementation` - Si au moins une t√¢che est toujours en cours ou √† faire
