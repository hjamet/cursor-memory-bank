---
description: Appelle cette r√®gle pour mettre √† jour les fichiers de contexte et commiter les changements
globs: 
alwaysApply: false
---

## TLDR
Mettre √† jour les fichiers de contexte pour refl√©ter les changements, actualiser tasks.md en fonction des r√©sultats des tests, et effectuer un commit via le serveur MCP suivant les conventions.

## Instructions
1. **Mise √† jour du contexte**: Mettre √† jour les trois fichiers de contexte si n√©cessaire:
   - `.cursor/memory-bank/context/projectBrief.md`: Actualiser la vision globale si impact√©e
   - `.cursor/memory-bank/context/activeContext.md`: Refl√©ter l'√©tat actuel apr√®s les modifications
   - `.cursor/memory-bank/context/techContext.md`: Ajouter/modifier les informations techniques si n√©cessaire

2. **Nettoyage du contexte**: Nettoyer les fichiers de contexte et workflow:
   - Supprimer les informations obsol√®tes ou redondantes
   - Condenser les sections trop d√©taill√©es
   - S'assurer que chaque fichier reste en dessous de 200 lignes
   - Privil√©gier la concision tout en maintenant la clart√©

3. **Mise √† jour de tasks.md**: Mettre √† jour le fichier tasks.md en fonction des r√©sultats des tests:
   - D√©placer les t√¢ches r√©ussies de "In Progress" vers "Done"

4. **Commit des modifications via le serveur MCP**: Effectuer un commit en utilisant le serveur MCP:
   - Utiliser uniquement le serveur MCP pour effectuer le commit, jamais de commande Git directe
   - Si le serveur MCP n'est pas accessible au moment d'effectuer le commit, le d√©marrer avec `make -C .cursor/MCP start`
   - Envoyer une requ√™te au serveur MCP avec le message de commit appropri√©
   - Suivre le format conventional commit avec emoji pour le message

5. **Appel de la r√®gle suivante**: Appeler obligatoirement la r√®gle suivante si le workflow n'est pas termin√©:
   - V√©rifier si le fichier `.cursor/memory-bank/userbrief.md` n'est pas vide
      - Si le fichier n'est pas vide, appeler la r√®gle `request-analysis`
      - Sinon, lire le fichier `.cursor/memory-bank/workflow/test.md`
         - Si au moins un test √©choue, appeler la r√®gle `fix`
         - Sinon, indiquer que le workflow est termin√©

## Pr√©cisions
- Ne jamais ex√©cuter directement les commandes Git, toujours utiliser le serveur MCP
- La v√©rification de l'√©tat du serveur MCP se fait uniquement au moment d'effectuer le commit
- Marquer les t√¢ches comme termin√©es uniquement si tous les tests associ√©s passent
- Utilise le format comventional commit en ajoutant un emoji pour d√©crire l'op√©ration effectu√©e
- Supprimer syst√©matiquement les anciennes entr√©es d'historique qui ne sont plus pertinentes
- Ne JAMAIS terminer sans soit appeler explicitement une r√®gle suivante, soit indiquer explicitement que le workflow est termin√©
- Le workflow ne doit JAMAIS √™tre consid√©r√© comme termin√© s'il reste des t√¢ches dans "In Progress" ou "ToDo" OU s'il y a au moins un test qui √©choue (marqu√© ‚ùå) ou avec avertissement (marqu√© ‚ö†Ô∏è) OU si le fichier `.cursor/memory-bank/userbrief.md` n'est pas vide.
- Si toutes les t√¢ches sont termin√©es (c'est-√†-dire qu'il n'y a plus AUCUNE t√¢che dans les sections "In Progress" et "ToDo" du fichier tasks.md) ET que tous les tests passent (TOUS marqu√©s ‚úÖ) ET que le fichier `.cursor/memory-bank/userbrief.md` est vide, alors:
   - Pr√©senter une synth√®se claire et concise du travail effectu√©
   - R√©sumer les fonctionnalit√©s impl√©ment√©es et les probl√®mes r√©solus
   - Indiquer explicitement que le workflow est termin√© avec succ√®s
   - Indiquer explicitement: "Le workflow est termin√©, aucune r√®gle suivante √† appeler."
- Si le workflow n'est pas termin√©, appeler la r√®gle suivante appropri√©e

## Format pour le message de commit
```
<emoji> <type>(<scope>): <description>

[corps du message optionnel]

[footer optionnel]
```

Exemples d'emojis et types:
- ‚ú® feat: pour une nouvelle fonctionnalit√©
- üêõ fix: pour une correction de bug
- üìù docs: pour la documentation
- ‚ôªÔ∏è refactor: pour une refactorisation
- ‚úÖ test: pour l'ajout ou la modification de tests
- üîß chore: pour les t√¢ches de maintenance

## Next Rules
- `request-analysis` - Si le fichier `.cursor/memory-bank/userbrief.md` n'est pas vide
- `fix` - Si au moins un test √©choue toujours et que le fichier `.cursor/memory-bank/userbrief.md` est vide
- `implementation` - Si au moins une t√¢che est toujours en cours ou √† faire, qu'aucun test n'√©choue et que le fichier `.cursor/memory-bank/userbrief.md` est vide

## Exemple

fetch_rules ["context-update"]
<SYSTEM PROMPT>Je vais mettre √† jour les fichiers de contexte pour refl√©ter les changements, d√©placer les t√¢ches r√©ussies vers 'Done', et nettoyer le contenu obsol√®te. J'effectuerai un commit pour les modifications via le serveur MCP et d√©terminerai si le workflow est termin√© ou s'il faut continuer avec la r√®gle 'fix', 'request-analysis' ou 'implementation' selon les tests, l'existance d'un brief utilisateur et les t√¢ches restantes. Si le serveur MCP n'est pas accessible au moment d'effectuer le commit, je le d√©marrerai avec make -C .cursor/MCP start.</SYSTEM PROMPT>

# Context-update : 1 - Mise √† jour du contexte
Je commence par mettre √† jour les fichiers de contexte pour refl√©ter les changements. `(Context-update : 1 - Mise √† jour du contexte)`
[...mise √† jour du fichier projectBrief.md...]
`(Context-update : 1 - Mise √† jour du contexte)`
[...mise √† jour du fichier activeContext.md...]
`(Context-update : 1 - Mise √† jour du contexte)`
[...mise √† jour du fichier techContext.md...]
`(Context-update : 1 - Mise √† jour du contexte)`

# Context-update : 2 - Nettoyage du contexte
Je nettoie les fichiers de contexte en supprimant les informations obsol√®tes. `(Context-update : 2 - Nettoyage du contexte)`
[...nettoyage des fichiers de contexte...]
`(Context-update : 2 - Nettoyage du contexte)`

# Context-update : 3 - Mise √† jour du fichier tasks.md
Je mets √† jour le fichier tasks.md en d√©pla√ßant les t√¢ches termin√©es vers Done. `(Context-update : 3 - Mise √† jour du fichier tasks.md)`
[...mise √† jour du fichier tasks.md...]
`(Context-update : 3 - Mise √† jour du fichier tasks.md)`

# Context-update : 4 - Effectuer un commit via le serveur MCP
Je pr√©pare et effectue un commit avec les modifications apport√©es via le serveur MCP. Si le serveur n'est pas accessible, je vais le d√©marrer. `(Context-update : 4 - Effectuer un commit via le serveur MCP)`
[...tentative de commit via le serveur MCP...]
[Si n√©cessaire: Le serveur MCP n'est pas accessible, je le d√©marre avec `make -C .cursor/MCP start`]
[...envoi d'une requ√™te au serveur MCP pour cr√©er le commit...]
`(Context-update : 4 - Effectuer un commit via le serveur MCP)`

# Context-update : 5 - Appel de la r√®gle suivante
Je vais consulter le fichier `.cursor/memory-bank/workflow/userbrief.md` pour v√©rifier si le fichier est vide. `(Context-update : 5 - Appel de la r√®gle suivante)`
[...consultation du fichier userbrief.md...]
Je vois que le fichier est vide. Je vais donc consulter le fichier `.cursor/memory-bank/workflow/test.md` pour v√©rifier si au moins un test a √©chou√©. `(Context-update : 5 - Appel de la r√®gle suivante)`
[...consultation du fichier test.md...]
Je constate que les tests [...] ont √©chou√©. Je vais donc appeler la r√®gle `fix`. `(Context-update : 5 - Appel de la r√®gle suivante)`

fetch_rules ["fix"]

# Start Rule

Pour d√©marrer cette r√®gle, r√©cite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais mettre √† jour les fichiers de contexte pour refl√©ter les changements, d√©placer les t√¢ches r√©ussies vers 'Done', et nettoyer le contenu obsol√®te. J'effectuerai un commit pour les modifications via le serveur MCP et d√©terminerai si le workflow est termin√© ou s'il faut continuer avec la r√®gle 'fix', 'request-analysis' ou 'implementation' selon les tests, l'existance d'un brief utilisateur et les t√¢ches restantes. Si le serveur MCP n'est pas accessible au moment d'effectuer le commit, je le d√©marrerai avec make -C .cursor/MCP start.</SYSTEM PROMPT>"
