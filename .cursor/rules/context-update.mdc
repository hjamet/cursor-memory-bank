---
description: [tests] - Mise √† jour des fichiers de contexte et pr√©paration du commit
globs: 
alwaysApply: false
---
## TLDR
Mettre √† jour les fichiers de contexte pour refl√©ter les changements, actualiser tasks.md en fonction des r√©sultats des tests, et effectuer un commit suivant les conventions.

## Instructions
1. Mettre √† jour les trois fichiers de contexte si n√©cessaire:
   - `.cursor/memory-bank/context/projectbrief.md`: Actualiser la vision globale si impact√©e
   - `.cursor/memory-bank/context/activeContext.md`: Refl√©ter l'√©tat actuel apr√®s les modifications
   - `.cursor/memory-bank/context/techContext.md`: Ajouter/modifier les informations techniques si n√©cessaire

2. Nettoyer les fichiers de contexte et workflow:
   - Supprimer les informations obsol√®tes ou redondantes
   - Condenser les sections trop d√©taill√©es
   - S'assurer que chaque fichier reste en dessous de 200 lignes
   - Privil√©gier la concision tout en maintenant la clart√©
   - Conserver uniquement les informations essentielles √† la compr√©hension du projet

3. Mettre √† jour le fichier tasks.md en fonction des r√©sultats des tests:
   - D√©placer les t√¢ches r√©ussies de "In Progress" vers "Done"
   - Ajouter des d√©tails ou notes bas√©s sur les r√©sultats des tests
   - Ajuster les priorit√©s des t√¢ches restantes si n√©cessaire

4. Effectuer un commit avec les modifications:
   - Pr√©parer les fichiers et cr√©er le commit en une seule commande:
     `git add [fichiers] && git commit -m "[message]"`
   - Suivre le format conventional commit avec emoji pour le message

5. V√©rifier si le workflow est termin√©:
   - Le workflow ne doit JAMAIS √™tre consid√©r√© comme termin√© s'il reste des t√¢ches dans "In Progress" ou "ToDo" OU s'il y a au moins un test qui √©choue (marqu√© ‚ùå) ou avec avertissement (marqu√© ‚ö†Ô∏è)
   - Si toutes les t√¢ches sont termin√©es (c'est-√†-dire qu'il n'y a plus AUCUNE t√¢che dans les sections "In Progress" et "ToDo" du fichier tasks.md) ET que tous les tests passent (TOUS marqu√©s ‚úÖ) alors:
     - Pr√©senter une synth√®se claire et concise du travail effectu√©
     - R√©sumer les fonctionnalit√©s impl√©ment√©es et les probl√®mes r√©solus
     - Indiquer explicitement que le workflow est termin√© avec succ√®s
     - Indiquer explicitement: "Le workflow est termin√©, aucune r√®gle suivante √† appeler."
   - Si le workflow n'est pas termin√©, appeler la r√®gle suivante appropri√©e

6. Appeler obligatoirement la r√®gle suivante si le workflow n'est pas termin√©:
   - Si au moins un test √©choue, appeler la r√®gle `fix`
   - Sinon, s'il reste des t√¢ches en cours ou √† faire, appeler la r√®gle `implementation`
   - Utiliser TOUJOURS la syntaxe explicite: `@cursor-rules fetch [nom-de-la-r√®gle]`

## Pr√©cisions
- Les mises √† jour des fichiers de contexte doivent √™tre concises mais compl√®tes
- Ne mettre √† jour que les sections pertinentes des fichiers de contexte
- Marquer les t√¢ches comme termin√©es uniquement si tous les tests associ√©s passent
- Suivre strictement le format conventional commit pour le message de commit
- Inclure un emoji appropri√© au d√©but du message de commit
- Inclure une r√©f√©rence aux tests r√©ussis dans le message de commit
- S'assurer que tous les fichiers modifi√©s sont inclus dans le commit
- Toujours v√©rifier que les fichiers ne d√©passent pas 200 lignes apr√®s les mises √† jour
- Supprimer syst√©matiquement les anciennes entr√©es d'historique qui ne sont plus pertinentes
- Les scripts sources doivent √™tre plac√©s dans le dossier `src/`
- Les scripts de test doivent √™tre plac√©s dans le dossier `tests/`
- Ne JAMAIS terminer sans soit appeler explicitement une r√®gle suivante, soit indiquer explicitement que le workflow est termin√©

## Format pour le message de commit
```
<emoji> <type>(<scope>): <description>

[corps du message optionnel]

[footer optionnel]
```

Exemples d'emojis et types:
- ‚ú® feat: pour une nouvelle fonctionnalit√©
- üêõ fix: pour une correction de bug
- üìù docs: pour la documentation
- ‚ôªÔ∏è refactor: pour une refactorisation
- ‚úÖ test: pour l'ajout ou la modification de tests
- üîß chore: pour les t√¢ches de maintenance

## Next Rules
- `fix` - Si au moins un test √©choue toujours
- `implementation` - Si au moins une t√¢che est toujours en cours ou √† faire
