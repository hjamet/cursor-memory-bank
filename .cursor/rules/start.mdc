---
description: 
globs: 
alwaysApply: false
---
# START - Workflow Autonome MCP Memory Bank

## OBJECTIF
Cette r√®gle explique le fonctionnement complet du syst√®me de workflow autonome MCP Memory Bank. L'agent doit comprendre qu'il va entrer dans une boucle infinie de traitement des t√¢ches et ne doit jamais s'arr√™ter sans instruction explicite de l'utilisateur.

## FONCTIONNEMENT DU WORKFLOW AUTONOME

### Vue d'ensemble
Le syst√®me fonctionne selon un pattern de boucle infinie qui permet √† l'agent de traiter de mani√®re autonome toutes les demandes utilisateur et t√¢ches du projet :

```
START ‚Üí start-workflow ‚Üí next_rule ‚Üí [√©tape] ‚Üí remember ‚Üí next_rule ‚Üí [√©tape] ‚Üí remember ‚Üí ...
```

### √âtapes d√©taill√©es du workflow

#### 1. INITIALISATION (premi√®re fois seulement)
- L'agent lit cette r√®gle START pour comprendre le fonctionnement
- L'agent appelle `mcp_MemoryBankMCP_next_rule` avec le param√®tre `step_name: "start-workflow"`
- **IMPORTANT** : Cette √©tape d'initialisation ne se fait qu'une seule fois au d√©but

#### 2. START-WORKFLOW (point d'entr√©e du cycle)
- Charge l'√©tat pr√©c√©dent de l'agent depuis la m√©moire
- Affiche le contexte complet du projet
- R√©cup√®re les souvenirs pertinents
- Indique o√π l'agent en √©tait dans le workflow pr√©c√©dent
- **Se termine TOUJOURS par un appel √† `remember`** qui indique les √©tapes suivantes possibles

#### 3. BOUCLE INFINIE DU WORKFLOW
√Ä partir de `start-workflow`, l'agent entre dans une boucle infinie :

**3a. APPEL NEXT_RULE**
- L'agent appelle `mcp_MemoryBankMCP_next_rule` avec l'une des √©tapes sugg√©r√©es par `remember`
- Cet outil retourne les instructions d√©taill√©es de l'√©tape √† ex√©cuter

**3b. EX√âCUTION DE L'√âTAPE**
- L'agent suit scrupuleusement toutes les instructions de l'√©tape retourn√©e
- L'agent utilise tous les outils MCP n√©cessaires (gestion des t√¢ches, lecture de fichiers, etc.)
- **CRITIQUE** : La derni√®re action de chaque √©tape est TOUJOURS un appel √† `remember`

**3c. STOCKAGE ET TRANSITION**
- L'outil `remember` stocke les souvenirs de ce qui vient d'√™tre accompli
- `remember` retourne les √©tapes suivantes possibles dans le workflow
- L'agent choisit l'√©tape la plus appropri√©e et retourne √† 3a

### √âtapes disponibles dans le workflow

#### `start-workflow`
- **Quand** : Au d√©but de chaque session ou apr√®s une interruption
- **Objectif** : Charger le contexte et l'√©tat pr√©c√©dent
- **Suivantes** : task-decomposition, implementation, context-update, fix, experience-execution

#### `task-decomposition`
- **Quand** : Nouvelles demandes utilisateur √† traiter
- **Objectif** : Analyser et d√©composer les demandes en t√¢ches concr√®tes
- **Suivantes** : implementation, context-update

#### `implementation`
- **Quand** : T√¢ches techniques √† r√©aliser
- **Objectif** : Impl√©menter du code, cr√©er des fichiers, modifier le syst√®me
- **Suivantes** : fix, experience-execution, context-update

#### `fix`
- **Quand** : Bugs ou probl√®mes √† r√©soudre
- **Objectif** : Diagnostiquer et corriger les probl√®mes
- **Suivantes** : implementation, experience-execution, context-update

#### `context-update`
- **Quand** : Besoin de faire le point sur l'√©tat du projet
- **Objectif** : Analyser l'√©tat complet, mettre √† jour les t√¢ches, faire des commits
- **Suivantes** : task-decomposition, implementation, fix, experience-execution

#### `experience-execution`
- **Quand** : Tests manuels ou validation requise
- **Objectif** : Tester les fonctionnalit√©s, valider les impl√©mentations
- **Suivantes** : fix, implementation, context-update

## R√àGLES CRITIQUES POUR L'AGENT

### üîÑ BOUCLE INFINIE OBLIGATOIRE
- **L'agent ne doit JAMAIS s'arr√™ter** sauf instruction explicite de l'utilisateur
- Apr√®s chaque `remember`, l'agent DOIT appeler `next_rule` avec l'√©tape suivante
- Si aucune t√¢che n'est en cours, l'agent doit appeler `context-update` pour analyser la situation

### üìù PATTERN OBLIGATOIRE DE CHAQUE √âTAPE
1. Lire les instructions de l'√©tape via `next_rule`
2. Ex√©cuter toutes les actions demand√©es
3. **TERMINER OBLIGATOIREMENT** par un appel √† `remember`
4. Choisir l'√©tape suivante parmi celles sugg√©r√©es par `remember`
5. Retourner √† l'√©tape 1 avec la nouvelle √©tape

### üõ†Ô∏è OUTILS MCP DISPONIBLES
- `mcp_MemoryBankMCP_next_rule` : Obtenir les instructions d'une √©tape
- `mcp_MemoryBankMCP_remember` : Stocker les souvenirs et obtenir les √©tapes suivantes
- `mcp_MemoryBankMCP_create_task` : Cr√©er de nouvelles t√¢ches
- `mcp_MemoryBankMCP_update_task` : Mettre √† jour les t√¢ches existantes
- `mcp_MemoryBankMCP_get_all_tasks` : Lister toutes les t√¢ches
- `mcp_MemoryBankMCP_get_next_tasks` : Obtenir les prochaines t√¢ches √† traiter
- `mcp_MemoryBankMCP_read_userbrief` : Lire les demandes utilisateur
- `mcp_MemoryBankMCP_update_userbrief` : Mettre √† jour les demandes utilisateur
- `mcp_MemoryBankMCP_commit` : Faire des commits git avec description
- `mcp_ToolsMCP_*` : Outils pour l'ex√©cution de commandes, lecture de fichiers, etc.

### üéØ PRIORIT√âS DE L'AGENT
1. **Traiter les demandes utilisateur** (task-decomposition ‚Üí implementation)
2. **R√©soudre les probl√®mes** (fix ‚Üí implementation)
3. **Tester et valider** (experience-execution ‚Üí fix si n√©cessaire)
4. **Maintenir le contexte √† jour** (context-update r√©guli√®rement)

## D√âMARRAGE IMM√âDIAT

**L'agent doit maintenant :**
1. Appeler `mcp_MemoryBankMCP_next_rule` avec `step_name: "start-workflow"`
2. Entrer dans la boucle infinie du workflow
3. Ne jamais s'arr√™ter sans instruction explicite

**COMMENCER MAINTENANT LE WORKFLOW AUTONOME !**

