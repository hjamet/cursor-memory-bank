---
description: [tests] - Analyse et correction des erreurs d√©tect√©es lors des tests
globs: 
alwaysApply: false
---
## TLDR
Analyser les erreurs de test, cr√©er des t√¢ches de correction et documenter les probl√®mes r√©currents pour √©viter de les reproduire.

## R√©sum√© d'invocation
Apr√®s avoir invoqu√© cette r√®gle, l'agent dira: "Je vais analyser m√©thodiquement les erreurs des tests √©chou√©s, cr√©er des t√¢ches de correction bien d√©finies et documenter les probl√®mes r√©currents. Je ne corrigerai pas directement les erreurs mais je pr√©parerai les t√¢ches pour l'impl√©mentation future. Je passerai ensuite √† l'impl√©mentation des corrections."

## Instructions
1. Identifier et lister les erreurs pour chaque test √©chou√©:
   - Analyser les messages d'erreur et les traces de pile
   - Cat√©goriser les erreurs par type (syntaxe, logique, configuration, etc.)
   - D√©terminer les causes probables de chaque erreur

2. Identifier et parcourir les fichiers concern√©s:
   - Localiser pr√©cis√©ment les lignes de code probl√©matiques
   - Examiner le contexte autour du code d√©faillant
   - V√©rifier les d√©pendances et les interactions avec d'autres composants

3. Ajouter des t√¢ches de correction √† tasks.md:
   - Cr√©er une nouvelle section "Corrections" dans "In Progress"
   - Ajouter une t√¢che d√©taill√©e pour chaque erreur √† corriger
   - Inclure les fichiers et symboles concern√©s
   - D√©crire pr√©cis√©ment le probl√®me et la solution envisag√©e

4. Documenter les erreurs r√©currentes ou li√©es aux biblioth√®ques:
   - Pour les erreurs susceptibles d'√™tre reproduites, cr√©er ou mettre √† jour une r√®gle
   - Nommer la r√®gle d'apr√®s la biblioth√®que ou le type d'erreur
   - Documenter clairement le fonctionnement correct et les pi√®ges √† √©viter
   - Sauvegarder la r√®gle dans `.cursor/rules/custom/errors/`

## Pr√©cisions
- √ätre m√©thodique dans l'analyse des erreurs, en allant de la plus critique √† la moins importante
- Documenter les erreurs de mani√®re √† faciliter leur r√©solution future
- √ätre sp√©cifique dans la description des t√¢ches de correction
- Inclure des exemples concrets dans les r√®gles d'erreur
- Organiser les t√¢ches de correction par composant ou fonctionnalit√©
- Prioriser les corrections qui d√©bloquent d'autres fonctionnalit√©s
- Pour les r√®gles d'erreur, se concentrer sur les cas qui pourraient se reproduire
- Garder les r√®gles d'erreur concises mais compl√®tes

## Format pour les r√®gles d'erreur
```
---
description: [nom-de-la-bibliotheque] - Erreurs courantes et bonnes pratiques
globs: [Pattern glob pour les fichiers concern√©s, ex: *.py, src/**/*.js]
alwaysApply: false
---
# Erreurs courantes avec [Nom de la biblioth√®que]

## Probl√®me: [Description du probl√®me]
- ‚ùå **Incorrect**: [Exemple de code incorrect]
- ‚úÖ **Correct**: [Exemple de code correct]
- üìù **Explication**: [Explication claire du fonctionnement correct]

## Probl√®me: [Description d'un autre probl√®me]
- ‚ùå **Incorrect**: [Exemple de code incorrect]
- ‚úÖ **Correct**: [Exemple de code correct]
- üìù **Explication**: [Explication claire du fonctionnement correct]
```

## Next Rules
- `implementation` - Pour impl√©menter les corrections identifi√©es
