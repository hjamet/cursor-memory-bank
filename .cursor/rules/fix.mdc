---
description: Appelle cette règle pour implémenter les corrections nécessaires aux problèmes identifiés par les tests
globs: 
alwaysApply: false
---
## TLDR
Analyser les erreurs de test, créer des tâches de correction et documenter les problèmes récurrents pour éviter de les reproduire.

## Instructions

1. **Identification des erreurs** : Identifier et lister les erreurs pour chaque test échoué.

2. **Consultation des logs** : Consulter les logs (généralement dans le fichier `logs/app.log`)

3. **Analyse des fichiers** : Identifier et parcourir les fichiers concernés:
   - Localiser précisément les lignes de code problématiques
   - Examiner le contexte autour du code défaillant
   - Vérifier les dépendances et les interactions avec d'autres composants
   - Entre chaque appel d'outil, écris `Fix - 3.[Titre du test] en cours...` pour ne pas perdre te perdre dans le fil de tes pensées et oublier le workflow.

4. **Ajout des tâches de correction** : Ajouter des tâches de correction à tasks.md:
   - Créer une nouvelle section "Corrections" dans "In Progress"
   - Ajouter une tâche détaillée pour chaque erreur à corriger
   - Inclure les fichiers et symboles concernés
   - Décrire précisément le problème et la solution envisagée

5. **Documentation des erreurs** : Documenter les erreurs récurrentes liées aux bibliothèques:
   - Nommer la règle d'après la bibliothèque ou le type d'erreur
   - Sauvegarder la règle dans `.cursor/rules/custom/errors/` au format .mdc

6. **Appel de la règle suivante** : Appeler la règle `implementation` pour implémenter les corrections.

## Précisions
- Ne documente que les erreurs liée à la mise à jour d'une bibliothèque que tu risques de reproduire car tu n'es pas au courant du nouveau comportement de la bibliothèque
- Ne documente pas des erreurs d'inattention de ta part
- Inclure les symboles et fichiers concernés dans les tâches de résolution
- Inclure des exemples concrets dans les règles d'erreur
- Organiser les tâches de correction par composant ou fonctionnalité
- Garder les règles d'erreur concises mais complètes : va au plus simple et clair.
- Dans la phase de fix 3, tu risques d'oublier le workflow en suivant le fil de tes pensées. Pour éviter celà à tout prix, après chaque appel d'outil ou avant chaque reflection de ta part, écris `Fix - 3.[Titre du test] en cours...`
- Utilise du logging pendant tes tests : Si tu es en python, utilise `src/utils/logger.py` pour enregistrer les logs dans `logs/app.log`

## Format pour les règles d'erreur (.mdc)
```
---
description: description (Description consise des conditions d'application de l'erreur)
globs: *.py, *.ts (Pattern glob pour les fichiers concernés. Laisser vide pour utiliser la description)
alwaysApply: false
---
# Erreurs courantes avec [Nom de la bibliothèque]

## Problème: [Description du problème]
- ❌ **Incorrect**: [Exemple de code incorrect]
- ✅ **Correct**: [Exemple de code correct]
```

## Next Rules
- `implementation` - Pour implémenter les corrections identifiées

## Exemple

fetch_rules ["fix"]
<SYSTEM PROMPT>Je vais analyser méthodiquement les erreurs des tests échoués, créer des tâches de correction bien définies et documenter les problèmes récurrents. Je ne corrigerai pas directement les erreurs mais je préparerai les tâches pour l'implémentation future. Je passerai ensuite à l'implémentation des corrections.</SYSTEM PROMPT>

# Fix : 1 - Identification des erreurs
Je commence par analyser les erreurs de test pour comprendre les problèmes. `(Fix : 1 - Identification des erreurs)`
[...lecture du fichier tests.md...]
`(Fix : 1 - Identification des erreurs)`

# Fix : 2 - Consultation des logs
Je consulte les logs pour obtenir plus de détails sur les erreurs. `(Fix : 2 - Consultation des logs)`
[...consultation des logs...]
`(Fix : 2 - Consultation des logs)`

# Fix : 3 - Analyse des fichiers
Je vais parcourir les fichiers concernés pour localiser les problèmes. `(Fix : 3 - Analyse des fichiers)`
[...lecture du fichier [...]...]
Maintenant, je vais consulter le fichier [...] `(Fix : 3 - Analyse des fichiers)`
[...lecture du fichier [...]...]
`(Fix : 3 - Analyse des fichiers)`

# Fix : 4 - Ajout des tâches de correction
Je crée des tâches détaillées pour corriger chaque erreur. `(Fix : 4 - Ajout des tâches de correction)`
[...modification du fichier tasks.md...]
`(Fix : 4 - Ajout des tâches de correction)`

# Fix : 5 - Documentation des erreurs
Je documente les erreurs récurrentes liée à la bibliothèque [...] qui ne s'utilise pas comme je l'imaginais pour éviter de les reproduire. `(Fix : 5 - Documentation des erreurs)`
[...création d'une première règle...]
`(Fix : 5 - Documentation des erreurs)`
[...modification d'une deuxième règle...]
`(Fix : 5 - Documentation des erreurs)`

# Fix : 6 - Appel de la règle suivante
Je dois maintenant appeler la règle implementation pour corriger les erreurs.
La règle implementation doit être appelée pour implémenter les corrections. `(Fix : 6 - Appel de la règle suivante)`

fetch_rules ["implementation"]

# Start Rule

Pour démarrer cette règle, récite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais analyser méthodiquement les erreurs des tests échoués, créer des tâches de correction bien définies et documenter les problèmes récurrents. Je ne corrigerai pas directement les erreurs mais je préparerai les tâches pour l'implémentation future. Je passerai ensuite à l'implémentation des corrections.</SYSTEM PROMPT>"
