---
description: Call this rule to analyze the user's request in detail and situate it in relation to the project objectives.
globs: 
alwaysApply: false
---

## TLDR
Analyze user request, explore existing code, search for additional information, retrieve high-level context, and store relevant vision elements to prepare implementation.

## Instructions

1. **Request analysis**: Understand the user's request:
   - Analyze direct request or request transmitted by calling rule
   - Identify requested features or modifications
   - Extract important keywords and concepts
   - **High-Level Context Retrieval**: Use `codebase_search` targeting the `.cursor_memory` directory with keywords from the request to find relevant high-level vision or context notes.
   - **Vision Storage**: If the user expresses high-level goals, preferences, or vision elements ("I want the app to...", "The overall goal is...", "I prefer bright colors..."), create a concise Markdown note summarizing this point and save it in the `.cursor_memory` directory using `edit_file`. Choose a descriptive filename (e.g., `user_preference_color_palette.md`, `project_goal_user_auth.md`).

2. **Code analysis**: Identify concerned files and symbols:
   - ONLY AUTHORIZED: up to 3 semantic searches (code base search) based on request keywords
   - OPTIONALLY AUTHORIZED: tree command to visualize directory structure
   - STRICTLY FORBIDDEN: listing folders/files, reading specific files, or using any other tool
   - Don't limit to files explicitly mentioned in the request
   - Add brief descriptions for each important element

3. **Tree creation**: Represent concerned files:
   - Create a visual "tree" representation only of elements relevant for modifications
   - Include only files/symbols/functions that will be modified or created
   - Clearly mark what already exists and what needs to be created/modified
   - Add brief descriptions for each important element

4. **Additional research**: Consult documentation and resources:
   - Research library documentation, patterns, or relevant best practices.
   - PREFERRED for external library documentation (especially less common ones): Use `mcp_Context7_resolve-library-id` then `mcp_Context7_get-library-docs` for structured docs and examples.
   - ALTERNATIVE/General research: Use the `mcp_brave-search_brave_web_search` tool, limited to 5 searches maximum.
   - Note consulted sources.

5. **Conclusion**: Summarize information and necessary changes
   - Synthesize findings from request analysis, context retrieval, code analysis, and research.

6. **Call next rule**:
   - If complex/multi-step request â†’ `task-decomposition`

## Specifics

- If you were called from consolidate-repo, consider the formulated request as the user request to analyze
- If the brief is empty without explicit request, consider tasks.md content as request
- Strict tool limits:
  - Phase 2 (Code analysis): only code base search (max 3) and tree
  - Phase 4 (Research): only mcp_Context7_* tools OR `mcp_brave-search_brave_web_search` (max 5 searches)
- Never mention planned modifications to context files (.cursor/memory-bank/* or .cursor/memory/*) unless creating a new vision note.

## Next Rules
- `task-decomposition` - To decompose request into specific tasks

## Example

# Request-analysis: 1 - Request analysis
I begin by analyzing the user's request to properly understand their demand. **(Request-analysis: 1 - Request analysis)**
[...request analysis...]
I identified the following key elements in the request: [...] **(Request-analysis: 1 - Request analysis)**
*I search for existing high-level context notes related to these keywords in `.cursor_memory`.*
`codebase_search(query='...', target_directories=['.cursor/memory'])`
*If the user stated a new high-level vision element like 'The UI should feel modern and clean', I create a note:*
`edit_file(target_file='.cursor/memory/ui_vision_modern_clean.md', code_edit='The user wants a modern and clean UI.', instructions='Create new vision note.')`
**(Request-analysis: 1 - Request analysis)**

# Request-analysis: 2 - Code analysis
I begin by performing semantic searches to identify relevant files.
Let's perform a first semantic search: **(Request-analysis: 2 - Code analysis)**
[...first semantic search...]
Let's perform a second semantic search: **(Request-analysis: 2 - Code analysis)**
[...second semantic search...]
Let's visualize the directory structure to better understand the organization: **(Request-analysis: 2 - Code analysis)**
[...tree command...]
I now better understand the code and relevant files. **(Request-analysis: 2 - Code analysis)**

# Request-analysis: 3 - Tree creation
I will create a tree representation of files concerned by the modifications. **(Request-analysis: 3 - Tree creation)**
[...creation of tree representation only for relevant elements...]
**(Request-analysis: 3 - Tree creation)**

# Request-analysis: 4 - Additional research
I need to understand how to use the 'some-obscure-library'. I will use the MCP Context7 tools for this. **(Request-analysis: 4 - Additional research)**
[...calling `mcp_Context7_resolve-library-id` with libraryName="some-obscure-library"...]
[...calling `mcp_Context7_get-library-docs` with the resolved ID...]
Alternatively, I might search the web for general patterns related to [...]. **(Request-analysis: 4 - Additional research)**
`mcp_brave-search_brave_web_search(...)`
**(Request-analysis: 4 - Additional research)**

# Request-analysis: 5 - Conclusion
I summarize the results of my analysis and determine the next step. **(Request-analysis: 5 - Conclusion)**
[...analysis conclusion...]
**(Request-analysis: 5 - Conclusion)**

# Request-analysis: 6 - Call next rule
The task-decomposition rule must be called to decompose the request into specific tasks. **(Request-analysis: 6 - Call next rule)**

[...] (The workflow must continue uninterrupted: even if the example stops here, the agent must IMPERATIVELY continue in reality: it MUST call and execute the following rule, then the next, etc., without ever stopping -> It is completely autonomous.)