---
description: Call this rule to analyze the user's request in detail and situate it in relation to the project objectives.
globs: 
alwaysApply: false
---
## TLDR
Analyze user request, explore existing code and search for additional information to prepare implementation.

## Instructions

1. **Request analysis**: Understand the user's request:
   - Analyze direct request or request transmitted by calling rule
   - Identify requested features or modifications
   - Extract important keywords and concepts
   - **(Situational) Memory Lookup**: If you need information to understand the general structure of the algorithm and/or if you think you have stored it in the past, use `mcp_servers_search_nodes` with the keywords to find relevant past analyses or context in the knowledge graph.
   - **(Situational) Memory Storage**: If the user has given an explanation of the desired functionality of the algorithm, has described the code and the expected results in more detail, then use `mcp_servers_add_observations` to store this information in the knowledge graph.

2. **Code analysis**: Identify concerned files and symbols:
   - ONLY AUTHORIZED: up to 3 semantic searches (code base search) based on request keywords
   - OPTIONALLY AUTHORIZED: tree command to visualize directory structure
   - STRICTLY FORBIDDEN: listing folders/files, reading specific files, or using any other tool
   - Don't limit to files explicitly mentioned in the request

3. **Tree creation**: Represent concerned files:
   - Create a visual "tree" representation only of elements relevant for modifications
   - Include only files/symbols/functions that will be modified or created
   - Clearly mark what already exists and what needs to be created/modified
   - Add brief descriptions for each important element

4. **Additional research**: Consult documentation and resources:
   - ONLY AUTHORIZED: web search tool, limited to 5 searches maximum
   - Research library documentation, patterns, or relevant best practices
   - Note consulted sources

5. **Conclusion**: Summarize information and necessary changes
   - **(Optional but recommended) Memory Storage**: Use `mcp_servers_add_observations` to store key findings (request summary, identified files/symbols, conclusion) in the knowledge graph for future reference, associated with an entity like 'RequestAnalysisContext'.

6. **Call next rule**:
   - If complex/multi-step request → `task-decomposition`
   - If simple request → `implementation`

## Specifics

- If you were called from consolidate-repo, consider the formulated request as the user request to analyze
- If the brief is empty without explicit request, consider tasks.md content as request
- Strict tool limits:
  - Phase 2 (Code analysis): only code base search (max 3) and tree
  - Phase 4 (Research): only web search (max 5)
- Never mention planned modifications to memory bank files (.cursor/memory-bank/*)

## Next Rules
- `task-decomposition` - To decompose request into specific tasks
- `implementation` - To proceed directly to implementation if request is simple

## Example

# Request-analysis: 1 - Request analysis
I begin by analyzing the user's request to properly understand their demand. **(Request-analysis: 1 - Request analysis)**
[...request analysis...]
I identified the following key elements in the request: [...] **(Request-analysis: 1 - Request analysis)**
*(Optional) I search the knowledge graph for similar past analyses using keywords: [...]*
`mcp_servers_search_nodes(...)`
*(Optional) If the user provided detailed explanations, I store them in the knowledge graph.*
`mcp_servers_add_observations(...)`

# Request-analysis: 2 - Code analysis
I begin by performing semantic searches to identify relevant files.
Let's perform a first semantic search: **(Request-analysis: 2 - Code analysis)**
[...first semantic search...]
Let's perform a second semantic search: **(Request-analysis: 2 - Code analysis)**
[...second semantic search...]
Let's visualize the directory structure to better understand the organization: **(Request-analysis: 2 - Code analysis)**
[...tree command...]
I now better understand the code and relevant files. **(Request-analysis: 2 - Code analysis)**

# Request-analysis: 3 - Tree creation
I will create a tree representation of files concerned by the modifications. **(Request-analysis: 3 - Tree creation)**
[...creation of tree representation only for relevant elements...]
**(Request-analysis: 3 - Tree creation)**

# Request-analysis: 4 - Additional research
I will search for information on the web about [...] **(Request-analysis: 4 - Additional research)**
[...first web search...]
I will search for more information about [...] **(Request-analysis: 4 - Additional research)**
[...second web search...]
**(Request-analysis: 4 - Additional research)**

# Request-analysis: 5 - Conclusion
I summarize the results of my analysis and determine the next step. **(Request-analysis: 5 - Conclusion)**
[...analysis conclusion...]
*(Optional) I store the key findings of this analysis in the knowledge graph.* 
`mcp_servers_add_observations(...)`
**(Request-analysis: 5 - Conclusion)**

# Request-analysis: 6 - Call next rule
I must now call the task-decomposition rule because the request requires multiple steps.
The task-decomposition rule must be called to decompose the request into specific tasks. **(Request-analysis: 6 - Call next rule)**

[...] (The workflow must continue uninterrupted: even if the example stops here, the agent must IMPERATIVELY continue in reality: it MUST call and execute the following rule, then the next, etc., without ever stopping -> It is completely autonomous.)