---
description: Appelle cette r√®gle pour analyser en d√©tail la requ√™te de l'utilisateur et la situer par rapport aux objectifs du projet  
globs: 
alwaysApply: false
---

## TLDR  
Analyser la requ√™te utilisateur, explorer le code existant et rechercher des informations compl√©mentaires pour pr√©parer l'impl√©mentation.  

## Instructions  

1. **Analyse du brief utilisateur** : V√©rifier le fichier `.cursor/memory-bank/userbrief.md` :  
   - Lire son contenu comme requ√™te compl√©mentaire, surtout s'il contient de nouvelles requ√™tes  
   - Mettre √† jour les statuts des √©l√©ments en fonction de leur traitement :
     - Utiliser ‚¨ú pour les √©l√©ments non trait√©s (Todo)
     - Utiliser üîÑ pour les √©l√©ments en cours de traitement (In Progress)
     - Conserver üìå pour les pr√©f√©rences persistantes (√Ä garder)
     - Utiliser ‚úÖ pour les √©l√©ments compl√®tement trait√©s (Done)
   - R√©organiser les requ√™tes en les d√©pla√ßant des "Nouvelles requ√™tes" vers les sections th√©matiques appropri√©es
   - Ne jamais supprimer d'√©l√©ments ou vider le fichier (seul l'utilisateur peut le faire)

2. **Analyse du code** : Identifier les fichiers et symboles concern√©s :  
   - UNIQUEMENT AUTORIS√â : jusqu'√† 3 recherches s√©mantiques (code base search) bas√©es sur les mots-cl√©s de la requ√™te  
   - UNIQUEMENT AUTORIS√â EN OPTION : commande tree pour visualiser la structure du r√©pertoire  
   - STRICTEMENT INTERDIT : lister les dossiers/fichiers, lire des fichiers sp√©cifiques, ou utiliser tout autre outil  
   - Ne pas se limiter aux fichiers explicitement mentionn√©s dans la requ√™te  

3. **Cr√©ation de l'arborescence** : Repr√©senter les fichiers concern√©s :  
   - Cr√©er une repr√©sentation visuelle de type "tree" uniquement des √©l√©ments pertinents pour les modifications  
   - Inclure seulement les fichiers/symboles/fonctions qui seront modifi√©s ou cr√©√©s  
   - Marquer clairement ce qui existe d√©j√† et ce qui doit √™tre cr√©√©/modifi√©  
   - Ajouter de br√®ves descriptions pour chaque √©l√©ment important  

4. **Recherche compl√©mentaire** : Consulter documentation et ressources :  
   - UNIQUEMENT AUTORIS√â : outil de recherche web, limit√© √† 5 recherches maximum  
   - Rechercher documentation des biblioth√®ques, patterns, ou meilleures pratiques pertinentes  
   - Noter les sources consult√©es  

5. **Conclusion** : R√©sumer les informations et changements n√©cessaires  

6. **Appel de la r√®gle suivante** :  
   - Si requ√™te complexe/multi-√©tapes ‚Üí `task-decomposition`  
   - Si requ√™te simple ‚Üí `implementation`  

## Pr√©cisions  

- Si le brief est vide et sans requ√™te explicite, consid√©rer le contenu de tasks.md comme requ√™te  
- Le brief et la requ√™te peuvent √™tre identiques ou diff√©rents - analyser les deux  
- Pour vider userbrief.md, utiliser ECHO (et non l'outil d'√©dition)  
- Limites strictes des outils :  
  - Phase 2 (Analyse du code) : uniquement code base search (max 3) et tree  
  - Phase 4 (Recherche) : uniquement recherche web (max 5)  
- Ne jamais mentionner les modifications pr√©vues aux fichiers memory bank (.cursor/memory-bank/*)  

## Next Rules  
- `task-decomposition` - Pour d√©composer la requ√™te en t√¢ches sp√©cifiques  
- `implementation` - Pour passer directement √† l'impl√©mentation si la requ√™te est simple  

## Exemple  

fetch_rules ["request-analysis"]  
<SYSTEM PROMPT>Je vais analyser en d√©tail la requ√™te et explorer le code pertinent pour comprendre ce qui doit √™tre fait. Je ne mentionnerai pas les fichiers Memory Bank dans mes analyses. Je n'implementerai pas les changements demand√©s mais expliquerai leur but en langage naturel. √Ä la fin de mon travail, je ferai appel aux r√®gles `task-decomposition` ou `implementation` pour qu'elles se chargent de l'impl√©mentation.</SYSTEM PROMPT>  

# Request-analysis : 1 - Analyse du brief utilisateur  
Je commence par analyser le brief de l'utilisateur pour identifier les fichiers et symboles concern√©s.  
Commen√ßons par lire le fichier `.cursor/memory-bank/userbrief.md` `(Request-analysis : 1 - Analyse du brief utilisateur)`  
[...lecture du fichier userbrief...]  
Je vois que le fichier n'est pas vide. J'ai donc ajout√© son contenu √† la requ√™te de l'utilisateur et vais maintenant mettre √† jour les statuts des √©l√©ments en fonction de leur traitement. `(Request-analysis : 1 - Analyse du brief utilisateur)`  
[...mise √† jour des statuts des √©l√©ments...]  
J'ai lu des informations importantes dans le brief que je vais ajouter √† la requ√™te de l'utilisateur.  

# Request-analysis : 2 - Analyse du code  
Je commence par effectuer des recherches s√©mantiques pour identifier les fichiers pertinents.  
Effectuons une premi√®re recherche s√©mantique : `(Request-analysis : 2 - Analyse du code)`  
[...premi√®re recherche s√©mantique...]  
Effectuons une deuxi√®me recherche s√©mantique : `(Request-analysis : 2 - Analyse du code)`  
[...deuxi√®me recherche s√©mantique...]  
Visualisons la structure du r√©pertoire pour mieux comprendre l'organisation : `(Request-analysis : 2 - Analyse du code)`  
[...commande tree...]  
Je comprends maintenant mieux le code et les fichiers pertinents. `(Request-analysis : 2 - Analyse du code)`  

# Request-analysis : 3 - Cr√©ation de l'arborescence  
Je vais cr√©er une repr√©sentation arborescente des fichiers concern√©s par les modifications. `(Request-analysis : 3 - Cr√©ation de l'arborescence)`  
[...cr√©ation de l'arborescence uniquement des √©l√©ments pertinents...]  
`(Request-analysis : 3 - Cr√©ation de l'arborescence)`  

# Request-analysis : 4 - Recherche compl√©mentaire  
Je vais rechercher des informations sur le web √† propos de [...] `(Request-analysis : 4 - Recherche compl√©mentaire)`  
[...premi√®re recherche web...]  
Je vais rechercher plus d'informations sur [...] `(Request-analysis : 4 - Recherche compl√©mentaire)`  
[...deuxi√®me recherche web...]  
`(Request-analysis : 4 - Recherche compl√©mentaire)`  

# Request-analysis : 5 - Conclusion  
Je r√©sume les r√©sultats de mon analyse et d√©termine la prochaine √©tape. `(Request-analysis : 5 - Conclusion)`  
[...conclusion de l'analyse...]  
`(Request-analysis : 5 - Conclusion)`  

# Request-analysis : 6 - Appel de la r√®gle suivante  
Je dois maintenant appeler la r√®gle task-decomposition car la requ√™te n√©cessite plusieurs √©tapes.  
La r√®gle task-decomposition doit √™tre appel√©e pour d√©composer la requ√™te en t√¢ches sp√©cifiques. `(Request-analysis : 6 - Appel de la r√®gle suivante)`  

fetch_rules ["task-decomposition"]  

# Start Rule  

Pour d√©marrer cette r√®gle, r√©cite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais analyser en d√©tail la requ√™te et explorer le code pertinent pour comprendre ce qui doit √™tre fait. Je ne mentionnerai pas les fichiers Memory Bank dans mes analyses. Je n'implementerai pas les changements demand√©s mais expliquerai leur but en langage naturel. √Ä la fin de mon travail, je ferai appel aux r√®gles `task-decomposition` ou `implementation` pour qu'elles se chargent de l'impl√©mentation.</SYSTEM PROMPT>"