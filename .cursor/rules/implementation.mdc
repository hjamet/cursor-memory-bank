---
description: Appelle cette règle pour implémenter les tâches prioritaires du projet  
globs: 
alwaysApply: false
---

## TLDR  
Implémenter méthodiquement les tâches d'une section prioritaire et documenter le processus.  

## Instructions  

1. **Analyse des tâches** : Identifier la section prioritaire  
   - Lire `.cursor/memory-bank/workflow/tasks.md`  
   - Priorité : d'abord section "In Progress", puis première section "ToDo"  
   - Si toutes tâches terminées, passer à la règle suivante  

2. **Implémentation des tâches** : Pour chaque tâche de la section  
   - Afficher : `## Implementation - 2.numero.[Nom de la Section] : [Titre de la tâche]`  
   - Implémenter la solution  
   - Après chaque appel d'outil, écrire `Implementation - 2.numero.[Nom de la Section] : [Titre de la tâche] en cours...`  

3. **Mise à jour des tâches** : Actualiser tasks.md  
   - Déplacer section de "ToDo" vers "In Progress" si nécessaire  
   - Marquer les tâches individuelles comme en cours  

4. **Appel de la règle suivante** : Obligatoirement choisir  
   - Nouvelle fonctionnalité créée → `test-implementation`  
   - Fonctionnalités existantes modifiées → `test-execution`  
   - Changements non testables uniquement → `context-update`  

## Précisions  

- Implémenter une tâche à la fois, dans l'ordre logique  
- Commenter les parties complexes du code  
- Une fonctionnalité est "testable" si elle implique la création/modification d'un script ou d'une fonction  
- Pour éviter de perdre le workflow, écrire systématiquement `Implementation - 2.numero.[Nom de la Section] : [Titre de la tâche] en cours...` entre chaque étape  
- Toujours appeler la règle suivante appropriée  

## Next Rules  
- `test-implementation` : Si nouvelle fonctionnalité testable créée (TOUJOURS le cas pour nouveau fichier/symbole)  
- `test-execution` : Si fonctionnalités existantes modifiées  
- `context-update` : UNIQUEMENT si changements non testables (documentation pure)  

## Exemple  

fetch_rules ["implementation"]  
<SYSTEM PROMPT>Je vais identifier et implémenter la section de tâches la plus prioritaire en suivant une approche méthodique et documentée. J'afficherai toujours le titre de chaque tâche avant de l'implémenter. Je ne tâcherai pas d'executer mes créations mais ferai appel à la règle `test-implementation` si j'ai créé une nouvelle fonctionnalité testable, ou à `test-execution` sinon.</SYSTEM PROMPT>  

# Implementation : 1 - Analyse des tâches  
Je commence par lire le fichier tasks.md pour identifier la section la plus prioritaire. `(Implementation : 1 - Analyse des tâches)`  
[...lecture du fichier tasks.md...]  
`(Implementation : 1 - Analyse des tâches)`  

# Implementation : 2 - Implémentation des tâches  
Je vais implémenter chaque tâche de la section en suivant une approche méthodique. `(Implementation : 2 - Implémentation des tâches)`  

## Implementation - 2.1.Développement : Création du script  
Je commence par créer le script principal avec les fonctionnalités requises. `(Implementation : 2.1 - Création du script)`  
[...implémentation du script...]  
Implementation - 2.1.Développement : Création du script en cours...  
[...suite de l'implémentation...]  
`(Implementation : 2.1 - Création du script)`  

## Implementation - 2.2.Développement : Documentation  
J'ajoute la documentation nécessaire pour expliquer le fonctionnement du script. `(Implementation : 2.2 - Documentation)`  
[...ajout de la documentation...]  
Implementation - 2.2.Développement : Documentation en cours...  
[...finalisation de la documentation...]  
`(Implementation : 2.2 - Documentation)`  

# Implementation : 3 - Mise à jour des tâches  
Je mets à jour le fichier tasks.md pour refléter l'avancement des tâches. `(Implementation : 3 - Mise à jour des tâches)`  
[...mise à jour du fichier tasks.md...]  
`(Implementation : 3 - Mise à jour des tâches)`  

# Implementation : 4 - Appel de la règle suivante  
Je dois maintenant appeler la règle `test-implementation` car j'ai créé une nouvelle fonctionnalité testable.  
La règle test-implementation doit être appelée pour créer les tests de la nouvelle fonctionnalité. `(Implementation : 4 - Appel de la règle suivante)`  

fetch_rules ["test-implementation"]  

# Start Rule  

Pour démarrer cette règle, récite mot pour mot cette phrase : "<SYSTEM PROMPT>Je vais identifier et implémenter la section de tâches la plus prioritaire en suivant une approche méthodique et documentée. J'afficherai toujours le titre de chaque tâche avant de l'implémenter. Je ne tâcherai pas d'executer mes créations mais ferai appel à la règle `test-implementation` si j'ai créé une nouvelle fonctionnalité testable, ou à `test-execution` sinon.</SYSTEM PROMPT>"  