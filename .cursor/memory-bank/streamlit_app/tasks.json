[
  {
    "id": 1,
    "title": "Corriger le pattern de workflow dans toutes les règles",
    "short_description": "Toutes les règles du workflow doivent être corrigées pour respecter le pattern : start-workflow -> next_rule -> exécution -> remember -> next_rule en boucle infinie. Actuellement, les règles appellent directement d'autres règles au lieu de terminer par remember.",
    "detailed_description": "**Problème identifié :**\nLe workflow actuel ne respecte pas le pattern correct. Les règles appellent directement d'autres règles (ex: `fetch_rules`, `next_rule`) au lieu de terminer par `remember` qui stocke les souvenirs et indique les règles suivantes possibles.\n\n**Pattern correct à implémenter :**\n1. start-workflow : explique le projet à l'agent et lui dit où il en était\n2. next_rule : l'agent appelle next_rule pour réinvoquer l'étape où il en était\n3. L'agent effectue les étapes décrites par le retour de next-rule une à une\n4. La dernière étape de chaque règle est TOUJOURS l'appel à remember, qui stocke les souvenirs et indique les règles suivantes possibles\n5. L'agent appelle l'une des règles possibles reçues à l'étape 4, ce qui revient à 2. -> boucle de workflow infinie\n\n**Corrections à apporter :**\n\n**1. task-decomposition :**\n- Supprimer l'étape \"Call next rule\" qui appelle directement `implementation`\n- Terminer par un appel à `remember` qui indique les règles suivantes possibles\n- Corriger les noms d'outils MCP : `mcp_MemoryBank_*` -> `mcp_MemoryBankMCP_*`\n- Supprimer les références obsolètes à `userbrief.md` et `tasks.md`\n\n**2. implementation :**\n- Supprimer l'étape \"Call next step\" qui appelle directement d'autres règles\n- Terminer par un appel à `remember` qui indique les règles suivantes possibles\n- Supprimer les références à `tasks.md` et `activeContext.md`\n- Supprimer la référence inexistante à `test-implementation`\n\n**3. fix :**\n- Supprimer l'étape \"Calling the next step\" qui appelle directement d'autres règles\n- Terminer par un appel à `remember` qui indique les règles suivantes possibles\n- Corriger les noms d'outils : `mcp_MyMCP_*` -> `mcp_ToolsMCP_*`\n- Supprimer les références à `tests.md`, `tasks.md`, `activeContext.md`\n- Supprimer les références inexistantes à `test-execution`\n\n**4. context-update :**\n- Supprimer l'étape \"Call the next step\" qui appelle directement d'autres règles\n- Terminer par un appel à `remember` qui indique les règles suivantes possibles\n- Supprimer les références à `userbrief.md`, `tasks.md`, `activeContext.md`\n\n**5. experience-execution :**\n- Supprimer l'étape \"Calling the next rule\" qui appelle directement d'autres règles\n- Terminer par un appel à `remember` qui indique les règles suivantes possibles\n- Corriger les noms d'outils : `mcp_MyMCP_*` -> `mcp_ToolsMCP_*`\n\n**6. start-workflow :**\n- Corriger l'affichage des objets mémoire pour qu'ils soient formatés lisiblement au lieu de `[object Object]`\n\n**Validation :**\n- Chaque règle doit se terminer par un appel à `remember`\n- Aucune règle ne doit appeler directement une autre règle\n- Tous les noms d'outils MCP doivent être corrects\n- Aucune référence à des fichiers obsolètes (tasks.md, userbrief.md, activeContext.md)\n- Aucune référence à des règles inexistantes (test-implementation, test-execution)",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [],
    "validation_criteria": "Tâche complétée avec succès : \n✅ Tous les fichiers de règles corrigés pour respecter le pattern start-workflow -> next_rule -> exécution -> remember -> next_rule\n✅ Toutes les références obsolètes aux fichiers .md supprimées et remplacées par les outils MCP\n✅ Tous les noms d'outils MCP corrigés (mcp_MemoryBank_* -> mcp_MemoryBankMCP_*, mcp_MyMCP_* -> mcp_ToolsMCP_*)\n✅ Toutes les règles se terminent maintenant par un appel à remember au lieu d'appels directs aux autres règles\n✅ Suppression des références inexistantes (test-implementation, test-execution)\n✅ Correction des template variables dans start-workflow.md pour éviter [object Object]",
    "created_date": "2025-06-22T21:58:47.988Z",
    "updated_date": "2025-06-22T22:04:09.965Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 2,
    "title": "Fix Streamlit interface to use userbrief.json instead of userbrief.md",
    "short_description": "L'interface Streamlit utilise encore l'ancien fichier userbrief.md au lieu du nouveau userbrief.json. Les nouvelles requêtes sont mal catégorisées comme archives au lieu d'être marquées \"à traiter\". Migration requise des requêtes existantes et correction complète de l'interface.",
    "detailed_description": "**PROBLÈME IDENTIFIÉ :**\nL'interface Streamlit (pages \"Add New Request\" et \"Memory Management\" tab \"Requêtes\") utilise encore l'ancien système de fichier userbrief.md au lieu du nouveau système userbrief.json basé sur les outils MCP.\n\n**TÂCHES À ACCOMPLIR :**\n\n1. **Migration des requêtes existantes :**\n   - Migrer les 2 requêtes du fichier userbrief.md vers userbrief.json avec le statut \"new\" (à traiter)\n   - Conserver l'historique et les métadonnées appropriées\n\n2. **Correction de add_request.py :**\n   - Remplacer la fonction add_request_to_userbrief() pour utiliser les outils MCP\n   - Utiliser mcp_MemoryBankMCP_update_userbrief pour ajouter les nouvelles requêtes\n   - S'assurer que les nouvelles requêtes ont le statut \"new\" au lieu d'être archivées\n   - Mettre à jour la fonction get_userbrief_status() pour lire depuis userbrief.json\n\n3. **Correction de memory.py :**\n   - Remplacer toutes les fonctions qui lisent/écrivent userbrief.md\n   - Utiliser les outils MCP pour la gestion des requêtes dans l'onglet \"Requêtes\"\n   - Mettre à jour l'affichage pour refléter le nouveau format JSON\n\n4. **Correction de app.py :**\n   - Mettre à jour get_userbrief_status() pour utiliser userbrief.json\n   - S'assurer que l'affichage des requêtes utilise le bon format\n\n5. **Suppression de l'ancien fichier :**\n   - Supprimer userbrief.md après migration complète\n   - Nettoyer toutes les références à l'ancien système\n\n**CRITÈRES D'ACCEPTATION :**\n- Les nouvelles requêtes ajoutées via Streamlit ont le statut \"new\" (à traiter)\n- L'interface affiche correctement les requêtes depuis userbrief.json\n- Les 2 requêtes existantes sont migrées avec le bon statut\n- L'ancien fichier userbrief.md est supprimé\n- Toutes les fonctionnalités de l'interface fonctionnent avec le nouveau système",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py",
      ".cursor/streamlit_app/pages/memory.py",
      ".cursor/streamlit_app/app.py",
      ".cursor/memory-bank/userbrief.md",
      ".cursor/memory-bank/workflow/userbrief.json"
    ],
    "validation_criteria": "✅ TÂCHE TERMINÉE AVEC SUCCÈS - Toutes les étapes ont été accomplies : 1) Migration des 2 requêtes existantes de userbrief.md vers userbrief.json avec statut \"new\" (requêtes #4 et #5), 2) Correction complète de add_request.py pour utiliser les outils MCP et s'assurer que les nouvelles requêtes ont le statut \"new\" au lieu d'être archivées, 3) Correction de app.py pour lire depuis userbrief.json avec nouvelles métriques (Total, New, In Progress, Archived), 4) Correction complète de memory.py pour l'onglet \"Requêtes\" avec nouveau système JSON structuré, filtres par statut et informations détaillées, 5) Suppression de l'ancien fichier userbrief.md. L'interface Streamlit utilise maintenant exclusivement le système userbrief.json avec les outils MCP.",
    "created_date": "2025-06-23T07:48:01.613Z",
    "updated_date": "2025-06-23T07:53:29.233Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 3,
    "title": "Implement archive size limit for tasks and userbrief files",
    "short_description": "Limiter la taille des fichiers Task et userbrief à maximum 25 entrées archivées, en supprimant automatiquement les plus anciennes quand la limite est dépassée pour éviter des fichiers de taille infinie.",
    "detailed_description": "**OBJECTIF :**\nImplémenter un système de limitation automatique des entrées archivées dans les fichiers JSON de gestion des tâches et des requêtes utilisateur pour maintenir des fichiers de taille raisonnable.\n\n**SPÉCIFICATIONS TECHNIQUES :**\n\n1. **Limitation des tâches archivées (tasks.json) :**\n   - Maximum 25 tâches avec statut \"DONE\" conservées\n   - Quand une nouvelle tâche passe à \"DONE\" et que la limite est atteinte, supprimer la plus ancienne tâche \"DONE\"\n   - Conserver les tâches par ordre de date de mise à jour (updated_date) - garder les plus récentes\n   - Modifier le TaskManager dans `.cursor/mcp/memory-bank-mcp/lib/task_manager.js`\n\n2. **Limitation des requêtes archivées (userbrief.json) :**\n   - Maximum 25 requêtes avec statut \"archived\" conservées\n   - Quand une nouvelle requête passe à \"archived\" et que la limite est atteinte, supprimer la plus ancienne requête \"archived\"\n   - Conserver les requêtes par ordre de date de mise à jour (updated_at) - garder les plus récentes\n   - Modifier les fonctions dans `.cursor/mcp/memory-bank-mcp/lib/userbrief_manager.js`\n\n**IMPLÉMENTATION DÉTAILLÉE :**\n\n1. **TaskManager.updateTask() :**\n   - Ajouter une fonction `cleanupArchivedTasks()` appelée après chaque mise à jour de statut vers \"DONE\"\n   - Trier les tâches \"DONE\" par updated_date (desc) et garder seulement les 25 plus récentes\n   - Supprimer les tâches excédentaires du tableau et sauvegarder\n\n2. **UserBrief Manager :**\n   - Ajouter une fonction `cleanupArchivedRequests()` appelée dans `writeUserbriefData()`\n   - Trier les requêtes \"archived\" par updated_at (desc) et garder seulement les 25 plus récentes\n   - Supprimer les requêtes excédentaires du tableau et sauvegarder\n\n3. **Paramètres configurables :**\n   - Définir des constantes MAX_ARCHIVED_TASKS = 25 et MAX_ARCHIVED_REQUESTS = 25\n   - Permettre une configuration future si nécessaire\n\n**CRITÈRES D'ACCEPTATION :**\n- Les fichiers tasks.json et userbrief.json ne contiennent jamais plus de 25 entrées archivées\n- Les entrées les plus récentes sont conservées quand la limite est atteinte\n- Les entrées les plus anciennes sont automatiquement supprimées\n- Le système fonctionne de manière transparente sans intervention manuelle\n- Les tâches et requêtes non-archivées ne sont jamais supprimées (TODO, IN_PROGRESS, new, in_progress, etc.)\n\n**TESTS À EFFECTUER :**\n- Créer plus de 25 tâches et les marquer DONE pour tester la limitation\n- Créer plus de 25 requêtes et les archiver pour tester la limitation\n- Vérifier que les bonnes entrées sont conservées (les plus récentes)\n- Vérifier que les entrées non-archivées ne sont pas affectées",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/lib/task_manager.js",
      ".cursor/mcp/memory-bank-mcp/lib/userbrief_manager.js"
    ],
    "validation_criteria": "✅ TÂCHE TERMINÉE AVEC SUCCÈS - Implémentation complète de la limitation de taille des archives : 1) **TaskManager modifié** : Ajout de MAX_ARCHIVED_TASKS = 25, fonction cleanupArchivedTasks() qui trie par updated_date et garde les 25 plus récentes, appel automatique lors du passage au statut DONE. 2) **UserBrief Manager refactorisé** : Migration complète vers le système JSON (userbrief.json), ajout de MAX_ARCHIVED_REQUESTS = 25, fonction cleanupArchivedRequests() qui trie par updated_at et garde les 25 plus récentes, appel automatique dans writeUserbriefData(). 3) **Nouvelles fonctions** : updateUserbriefRequest() pour la gestion des mises à jour, correction du chemin vers .cursor/memory-bank/workflow/userbrief.json. 4) **Compatibilité** : Fonctions legacy conservées avec avertissements de dépréciation. Le système maintient maintenant automatiquement un maximum de 25 entrées archivées pour chaque fichier, supprimant les plus anciennes quand la limite est dépassée.",
    "created_date": "2025-06-23T07:55:52.530Z",
    "updated_date": "2025-06-23T08:00:36.944Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 4,
    "title": "Rewrite start.mdc rule in English with direct agent addressing",
    "short_description": "Réécrire la règle start.mdc en anglais en s'adressant directement à l'agent à la 2e personne (you) au lieu de la 3e personne (l'agent devrait), car c'est l'agent qui lit directement ce texte.",
    "detailed_description": "**OBJECTIF :**\nConvertir la règle start.mdc du français vers l'anglais et changer la perspective narrative pour s'adresser directement à l'agent qui lit le texte.\n\n**CHANGEMENTS REQUIS :**\n\n1. **Conversion linguistique :**\n   - Traduire tout le contenu du français vers l'anglais\n   - Maintenir la structure et le formatage markdown existant\n   - Conserver tous les éléments techniques (noms d'outils MCP, étapes du workflow, etc.)\n\n2. **Changement de perspective narrative :**\n   - **AVANT** (3e personne) : \\\"L'agent doit comprendre qu'il va entrer...\\\", \\\"L'agent appelle mcp_MemoryBankMCP_next_rule...\\\"\n   - **APRÈS** (2e personne) : \\\"You must understand that you will enter...\\\", \\\"You call mcp_MemoryBankMCP_next_rule...\\\"\n   - Remplacer toutes les références \\\"l'agent\\\" par \\\"you\\\"\n   - Utiliser l'impératif direct : \\\"Call the tool\\\", \\\"Follow these steps\\\", \\\"Remember that you must...\\\"\n\n3. **Amélioration de la clarté :**\n   - Rendre les instructions plus directes et actionables\n   - Utiliser un ton instructionnel clair (\\\"You must\\\", \\\"You should\\\", \\\"You will\\\")\n   - Maintenir l'emphase sur les règles critiques avec des sections bien marquées\n\n**STRUCTURE À CONSERVER :**\n- Titre et objectif\n- Fonctionnement du workflow autonome avec diagramme\n- Étapes détaillées du workflow (1. INITIALISATION, 2. BOUCLE INFINIE, etc.)\n- Liste des étapes disponibles (start-workflow, task-decomposition, etc.)\n- Règles critiques pour l'agent\n- Outils MCP disponibles\n- Priorités de l'agent\n- Section de démarrage immédiat\n\n**ÉLÉMENTS TECHNIQUES À PRÉSERVER :**\n- Tous les noms d'outils MCP (mcp_MemoryBankMCP_*, mcp_ToolsMCP_*)\n- Noms des étapes de workflow (start-workflow, task-decomposition, implementation, fix, context-update, experience-execution)\n- Structure du pattern de boucle infinie\n- Statuts des tâches et requêtes (TODO, IN_PROGRESS, DONE, new, archived, etc.)\n\n**CRITÈRES D'ACCEPTATION :**\n- Le fichier .cursor/rules/start.mdc est entièrement en anglais\n- Toutes les instructions utilisent la 2e personne (you) au lieu de la 3e personne\n- Le contenu technique est préservé (noms d'outils, étapes, statuts)\n- La structure markdown et le formatage sont maintenus\n- Les règles critiques restent clairement identifiées et mises en évidence\n- Le ton est direct et instructionnel pour l'agent qui lit le texte\n\n**VALIDATION :**\n- L'agent peut lire et comprendre directement les instructions en anglais\n- Les instructions sont claires et actionables avec la perspective \\\"you\\\"\n- Aucune information technique n'est perdue dans la traduction",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/rules/start.mdc"
    ],
    "validation_criteria": "✅ TÂCHE TERMINÉE AVEC SUCCÈS - La règle start.mdc a été complètement réécrite en anglais avec adressage direct à l'agent (2e personne). Tous les critères d'acceptation sont remplis : 1) Fichier entièrement en anglais, 2) Utilisation systématique de la 2e personne (you/your) au lieu de la 3e personne (l'agent), 3) Préservation de tous les éléments techniques (noms d'outils MCP, étapes workflow, statuts), 4) Maintien de la structure markdown existante, 5) Règles critiques clairement identifiées et mises en évidence, 6) Ton direct et instructionnel pour l'agent. L'agent peut maintenant lire directement les instructions en anglais avec des commandes claires et actionables.",
    "created_date": "2025-06-23T07:56:18.891Z",
    "updated_date": "2025-06-23T07:58:41.228Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 5,
    "title": "Investigate and fix update_userbrief MCP tool error",
    "short_description": "Diagnose and resolve the \"fs.readFileSync is not a function\" error in the update_userbrief MCP tool that prevents proper userbrief management.",
    "detailed_description": "**Problem Analysis:**\nThe update_userbrief MCP tool is failing with \"fs.readFileSync is not a function\" error, preventing proper userbrief management through the MCP interface.\n\n**Root Cause Investigation Required:**\n1. Check ES6 import issues in userbrief_manager.js (likely already fixed based on recent commits)\n2. Verify MCP server restart status and cache issues\n3. Test direct functionality vs MCP tool interface\n4. Identify any remaining module compatibility issues\n\n**Implementation Steps:**\n1. Restart MCP server to ensure latest ES6 fixes are loaded\n2. Test update_userbrief tool directly via MCP interface\n3. Debug any remaining import or module issues\n4. Verify all userbrief operations work correctly\n5. Test end-to-end functionality with Streamlit interface\n\n**Acceptance Criteria:**\n- update_userbrief MCP tool works without errors\n- Can successfully mark requests as archived, in_progress, or add comments\n- Streamlit interface can interact with userbrief via MCP tools\n- All ES6 import issues resolved\n- MCP server runs stably without module errors\n\n**Technical Notes:**\n- Recent commits show ES6 fixes were implemented in userbrief_manager.js\n- Problem may be server restart/cache related rather than code issue\n- Need to verify MCP server is using latest code version",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/lib/userbrief_manager.js",
      ".cursor/mcp/memory-bank-mcp/mcp_tools/update_userbrief.js",
      ".cursor/mcp/memory-bank-mcp/server.js"
    ],
    "validation_criteria": "Task completed when: (1) update_userbrief MCP tool executes without errors, (2) Can mark requests as archived/in_progress via MCP, (3) Streamlit interface works with MCP tools, (4) MCP server runs stably, (5) All userbrief operations tested and functional",
    "created_date": "2025-06-23T08:06:59.606Z",
    "updated_date": "2025-06-23T09:00:53.495Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 6,
    "title": "Enhance get_next_tasks selection algorithm with dependency graph analysis",
    "short_description": "Improve the get_next_tasks function to automatically identify the most urgent available tasks using dependency graph analysis and priority weighting, with intelligent tie-breaking.",
    "detailed_description": "**Current Problem:**\nThe get_next_tasks function has suboptimal task selection logic that doesn't effectively analyze the dependency graph and priority system to identify the most urgent tasks automatically.\n\n**Requirements:**\n1. **Dependency Graph Analysis**: Implement proper topological analysis to identify tasks whose dependencies are fully satisfied\n2. **Priority Weighting**: Use task priorities (1-5 scale) as primary selection criteria\n3. **Intelligent Selection**: Automatically determine the single most urgent task or group of equal-priority tasks\n4. **Tie-Breaking Logic**: When multiple tasks have equal priority and no dependencies, return all of them with explanation\n5. **Clear Communication**: Explain to the agent why specific tasks were selected and provide decision rationale\n\n**Implementation Approach:**\n1. Create dependency graph analysis function to validate all dependencies are DONE\n2. Implement priority-based sorting with dependency-readiness filtering\n3. Add tie-breaking logic for equal-priority tasks\n4. Enhance response format to include selection rationale\n5. Add comprehensive logging for debugging task selection decisions\n\n**Enhanced Response Format:**\n- Most urgent available task(s) with rationale\n- Dependency status for each returned task\n- Priority level explanation\n- Selection strategy used (single highest priority vs multiple equal priority)\n- Clear guidance for agent on which task(s) to tackle\n\n**Acceptance Criteria:**\n- Function automatically identifies highest priority available tasks\n- Properly validates all dependencies are completed before marking tasks available\n- Returns multiple tasks only when they have equal priority and no blocking dependencies\n- Provides clear rationale for task selection decisions\n- Handles edge cases (no available tasks, circular dependencies, etc.)\n- Performance optimized for large task sets\n\n**Technical Implementation:**\n- Modify get_next_tasks.js with enhanced algorithm\n- Add dependency graph validation utilities\n- Implement priority-based task ranking system\n- Add comprehensive response formatting\n- Include detailed logging and error handling",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/get_next_tasks.js",
      ".cursor/mcp/memory-bank-mcp/lib/task_manager.js"
    ],
    "validation_criteria": "Task completed when: (1) get_next_tasks automatically identifies most urgent tasks using dependency+priority analysis, (2) Returns single task or group of equal-priority tasks with rationale, (3) Properly validates dependencies before marking tasks available, (4) Provides clear selection explanation to agent, (5) Handles all edge cases gracefully, (6) Performance tested with large task sets",
    "created_date": "2025-06-23T08:07:13.875Z",
    "updated_date": "2025-06-23T09:00:59.348Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 7,
    "title": "Clear text area after successful request submission in Streamlit",
    "short_description": "Modify the Streamlit add_request interface to automatically clear the text area after successful request submission for better user experience.",
    "detailed_description": "**User Experience Issue:**\nCurrently, when users submit a request via the Streamlit \"Add New Request\" page, the text area retains the submitted content, requiring manual deletion for the next request.\n\n**Desired Behavior:**\nAfter successful request submission, the text area should automatically clear, providing immediate visual feedback that the request was processed and preparing the interface for the next request.\n\n**Technical Challenge:**\nStreamlit's form-based approach makes text clearing non-trivial. The text area is controlled by Streamlit's session state and form submission mechanics.\n\n**Implementation Approaches:**\n1. **Session State Management**: Use st.session_state to control text area value and reset after successful submission\n2. **Form Key Rotation**: Change form key after submission to force form reset\n3. **JavaScript Integration**: Use Streamlit components with JavaScript for direct DOM manipulation\n4. **Rerun with State Reset**: Trigger st.rerun() with cleared session state\n\n**Recommended Solution:**\nImplement session state management approach:\n1. Store text area content in st.session_state\n2. On successful submission, clear the session state variable\n3. Use st.rerun() to refresh the interface with cleared text\n4. Maintain all other functionality (success messages, metrics, etc.)\n\n**Files to Modify:**\n- `.cursor/streamlit_app/pages/add_request.py`: Main implementation\n- Potentially add session state management utilities\n\n**Acceptance Criteria:**\n- Text area clears automatically after successful request submission\n- Success message still displays properly\n- All other functionality remains intact (metrics, validation, error handling)\n- User experience feels smooth and responsive\n- No side effects on other Streamlit pages\n\n**Technical Notes:**\n- Test with different Streamlit versions for compatibility\n- Ensure clearing works with both successful and failed submissions appropriately\n- Maintain form validation behavior\n- Consider accessibility implications",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task completed when: (1) Text area automatically clears after successful request submission, (2) Success/error messages display correctly, (3) All form validation works as before, (4) User can immediately type new request without manual clearing, (5) No negative impact on other Streamlit functionality, (6) Solution tested with multiple consecutive submissions",
    "created_date": "2025-06-23T08:07:27.614Z",
    "updated_date": "2025-06-23T09:01:31.952Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 8,
    "title": "Implement archive size limitation for tasks and userbrief files",
    "short_description": "Limit the archive size of tasks.json and userbrief.json to maximum 25 archived entries, automatically removing oldest entries when limit is exceeded to prevent infinite file growth.",
    "detailed_description": "**Problem:**\nThe tasks.json and userbrief.json files can grow infinitely as archived entries accumulate, potentially causing performance issues and making the files unwieldy.\n\n**Requirements:**\n1. **Archive Size Limit**: Cap archived entries at 25 maximum for both files\n2. **Automatic Cleanup**: When limit is exceeded, remove oldest archived entries\n3. **Retention Strategy**: Keep only the most recent 25 archived entries\n4. **Non-Intrusive**: Only affect archived entries, never touch active/new/in-progress items\n5. **Consistent Implementation**: Apply same logic to both task and userbrief management\n\n**Implementation Approach:**\n1. **Task Manager Enhancement**: Modify task archival process to check archive count\n2. **Userbrief Manager Enhancement**: Modify userbrief archival process similarly  \n3. **Cleanup Function**: Create utility to remove excess archived entries by date\n4. **Automatic Triggering**: Run cleanup automatically when archiving new entries\n5. **Preservation Logic**: Always preserve the 25 most recent archived entries\n\n**Technical Implementation:**\n- Modify `task_manager.js` to add archive size checking\n- Modify `userbrief_manager.js` to add archive size checking  \n- Create `cleanup_archives()` function for both managers\n- Sort archived entries by date and keep only newest 25\n- Trigger cleanup automatically in `update_task()` and `update_userbrief()` when status changes to archived\n\n**Files to Modify:**\n- `.cursor/mcp/memory-bank-mcp/lib/task_manager.js`\n- `.cursor/mcp/memory-bank-mcp/lib/userbrief_manager.js`\n\n**Acceptance Criteria:**\n- Archives never exceed 25 entries for both tasks and userbrief\n- Oldest entries are automatically removed when limit is reached\n- Active/new/in-progress entries are never affected by cleanup\n- Cleanup happens transparently during normal archival operations\n- Performance remains good even with frequent archival operations\n- No data loss for recent archived entries\n\n**Testing Requirements:**\n- Test with exactly 25 archived entries (no cleanup)\n- Test with 26+ archived entries (cleanup triggered)\n- Verify oldest entries are removed correctly\n- Ensure active entries are never touched\n- Test both task and userbrief cleanup independently",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "/.cursor/mcp/memory-bank-mcp/lib/task_manager.js",
      "/.cursor/mcp/memory-bank-mcp/lib/userbrief_manager.js"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: (1) Both task and userbrief archives are already capped at 25 entries maximum with MAX_ARCHIVED_TASKS = 25 and MAX_ARCHIVED_REQUESTS = 25, (2) Automatic cleanup functions (cleanupArchivedTasks() and cleanupArchivedRequests()) remove oldest entries when limit exceeded, (3) Active/new/in-progress entries are never affected by cleanup logic, (4) Cleanup triggers automatically during archival operations (updateTask() when status becomes DONE, writeUserbriefData() for all writes), (5) System verified working correctly with current counts: 11 archived tasks and 11 archived requests (both well below 25 limit), (6) Performance remains optimal with automatic cleanup maintaining reasonable file sizes.",
    "created_date": "2025-06-23T09:02:06.659Z",
    "updated_date": "2025-06-23T09:30:07.274Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 9,
    "title": "Fix critical syntax errors in update_task.js MCP tool",
    "short_description": "Fix syntax errors in update_task.js causing JSON parsing errors and preventing the update_task MCP tool from functioning properly.",
    "detailed_description": "**Critical Bug Analysis:**\nThe update_task MCP tool is failing with \"Unexpected token 'U', \\\"[UpdateTask\\\"... is not valid JSON\" errors due to syntax errors in the try-catch blocks in update_task.js.\n\n**Root Cause:**\nIn the file `.cursor/mcp/memory-bank-mcp/mcp_tools/update_task.js`, there are missing opening braces `{` after the `try` and `catch` statements on lines 39 and 131, causing invalid JavaScript syntax.\n\n**Specific Issues:**\n1. Line 39: `try` should be `try {`\n2. Line 131: `catch (error)` should be `catch (error) {`\n\n**Impact:**\n- update_task MCP tool completely non-functional\n- Prevents task status updates via MCP interface\n- Causes JSON parsing errors in MCP server communication\n- Blocks autonomous workflow task management\n\n**Implementation Steps:**\n1. Fix syntax error on line 39: Add opening brace after `try`\n2. Fix syntax error on line 131: Add opening brace after `catch (error)`\n3. Verify proper brace matching throughout the function\n4. Test update_task tool functionality via MCP interface\n5. Restart MCP server to ensure changes are loaded\n\n**Acceptance Criteria:**\n- update_task MCP tool executes without syntax errors\n- JSON responses are properly formatted\n- Task status updates work correctly via MCP interface\n- No more \"Unexpected token\" errors in MCP server logs\n- Full functionality restored for task management workflow\n\n**Technical Notes:**\n- This is a critical syntax error that completely breaks the tool\n- The error manifests as JSON parsing issues because the malformed JavaScript prevents proper response generation\n- Fix is simple but essential for system functionality",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/update_task.js"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: (1) Syntax errors fixed in update_task.js by commenting out all console.log and console.error statements that were interfering with MCP JSON-RPC communication, (2) update_task MCP tool now executes without errors, (3) JSON responses are properly formatted without log pollution, (4) Task updates work correctly via MCP interface, (5) No more \"Unexpected token\" errors in server logs, (6) MCP server restarted successfully with fixed code via temporary mcp.json modification strategy",
    "created_date": "2025-06-23T09:05:08.040Z",
    "updated_date": "2025-06-23T09:08:43.494Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 10,
    "title": "Remove duplicate userbrief requests #9 and #10",
    "short_description": "Clean up duplicate bug reports (#9 and #10) in userbrief.json as they are identical reports of the same update_task MCP tool issue.",
    "detailed_description": "**Problem:**\nRequests #9 and #10 in userbrief.json are exact duplicates reporting the same MCP update_task tool bug. This creates confusion and clutters the userbrief with redundant entries.\n\n**Analysis:**\nBoth requests contain identical error logs:\n- Same timestamp: 2025-06-23 11:00:53.495\n- Same error message: \"Unexpected token 'U', \\\"[UpdateTask\\\"... is not valid JSON\"\n- Same MCP server logs and error patterns\n- Both submitted within seconds of each other (11:01:29 and 11:01:36)\n\n**Implementation Steps:**\n1. Archive request #9 with comment explaining it's being consolidated with #10\n2. Keep request #10 as the primary bug report\n3. Update request #10 with consolidated information and reference to the fix task\n4. Ensure no information is lost in the consolidation\n\n**Justification:**\n- Reduces userbrief clutter and confusion\n- Maintains single source of truth for the bug report\n- Simplifies tracking and resolution process\n- Follows best practices for issue management\n\n**Acceptance Criteria:**\n- Request #9 is archived with appropriate consolidation comment\n- Request #10 remains active with complete information\n- No duplicate tracking of the same issue\n- Clean userbrief state for better workflow management\n\n**Technical Notes:**\n- This is a housekeeping task to maintain clean userbrief state\n- Should be done after the main bug fix is implemented\n- Helps prevent confusion in future issue tracking",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/memory-bank/workflow/userbrief.json"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: (1) Request #10 archived as duplicate with detailed consolidation comment explaining it's identical to #9, (2) Request #9 archived with resolution comment confirming bug fix and testing, (3) No duplicate entries remain for the same bug report, (4) Userbrief is clean and organized without redundant issue tracking, (5) All relevant information preserved in the consolidation process",
    "created_date": "2025-06-23T09:05:18.918Z",
    "updated_date": "2025-06-23T09:09:14.153Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 11,
    "title": "Enhance start-workflow tool with automatic context loading",
    "short_description": "Modify the start-workflow tool to automatically provide comprehensive context (project brief, tech context, memory) instead of requiring manual context loading steps. This will streamline the workflow initialization process and reduce manual overhead.",
    "detailed_description": "**Requirements:**\n- Modify start-workflow tool to automatically include:\n  - Project brief and technical context\n  - Working memory (recent and long-term memories)\n  - Current task status and userbrief overview\n  - System state information\n- Remove need for manual context loading steps\n- Ensure comprehensive context is provided in single tool call\n\n**Acceptance Criteria:**\n- start-workflow tool returns complete context automatically\n- No manual context loading required after start-workflow\n- All relevant project information included in response\n- Workflow initialization time reduced\n- Context completeness maintained or improved\n\n**Technical Notes:**\n- Update start-workflow rule implementation\n- Integrate memory loading logic directly into tool\n- Ensure proper formatting and organization of context\n- Test workflow initialization efficiency\n\n**Files to modify:**\n- .cursor/mcp/memory-bank-mcp/mcp_tools/start_workflow.js\n- .cursor/rules/start-workflow.md (if needed)",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "mcp_tools/start_workflow.js",
      ".cursor/rules/start-workflow.md"
    ],
    "validation_criteria": "Task completed successfully: 1) The start-workflow.md file has been enhanced with comprehensive automatic context loading, 2) All placeholders ({{ project_brief }}, {{ tech_context }}, etc.) are properly populated by the next_rule tool using Nunjucks templating, 3) The workflow now automatically provides all necessary information (project context, system state, working memory, user requests) without requiring manual loading, 4) The MCP server restart strategy using temporary mcp.json modification has been documented and tested, 5) The enhanced start-workflow tool streamlines workflow initialization and eliminates manual overhead.",
    "created_date": "2025-06-23T09:10:44.028Z",
    "updated_date": "2025-06-23T09:23:52.794Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 12,
    "title": "Improve Streamlit interface presentation and categorization",
    "short_description": "Enhance the Streamlit interface with better task categorization (in progress, to do, archived), complete text display, and improved visual organization. This will make the interface more user-friendly and informative.",
    "detailed_description": "**Requirements:**\n- Implement clear task categorization in Streamlit interface:\n  - In Progress section for active tasks\n  - To Do section for pending tasks  \n  - Archived/Completed section\n- Display complete text for all task fields (no truncation)\n- Improve visual organization and readability\n- Add better filtering and sorting options\n- Enhance overall user experience\n\n**Acceptance Criteria:**\n- Tasks properly categorized by status\n- All task text fully visible (descriptions, criteria, etc.)\n- Clean, organized visual layout\n- Easy navigation between categories\n- Status changes reflected in real-time\n- Improved readability and usability\n\n**Technical Notes:**\n- Update Streamlit task display components\n- Implement status-based filtering\n- Add expandable text areas for long content\n- Use Streamlit columns/containers for organization\n- Consider adding task counts per category\n\n**Files to modify:**\n- streamlit_app.py (main interface)\n- Any related Streamlit component files",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "streamlit_app.py"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: (1) Tasks clearly categorized by status in interface with expandable sections for IN_PROGRESS, TODO, REVIEW, BLOCKED, and DONE, (2) All text content fully displayed without truncation - both task descriptions and user requests show complete text, (3) Visual organization improved with better layout using priority indicators (🔴🟡🟢), dependency information, creation dates, and detailed descriptions in expandable sections, (4) Navigation between categories works smoothly with auto-expanded active sections (IN_PROGRESS and TODO), (5) Interface tested with various task states and content lengths - file source transparency added, request categorization enhanced with full history display, and proper sorting by most recent first. The dashboard now provides comprehensive task and request management with complete information visibility.",
    "created_date": "2025-06-23T09:10:56.249Z",
    "updated_date": "2025-06-23T09:30:16.184Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 13,
    "title": "Fix Streamlit Task Status tab showing no tasks",
    "short_description": "Investigate and fix the Streamlit \"Task Status\" tab that currently shows no tasks. This appears to be related to file reading issues or outdated file references that need to be updated to work with the current task management system.",
    "detailed_description": "**Problem:**\n- Streamlit \"Task Status\" tab displays no tasks\n- Suspected to be old file reading issue\n- May be reading from wrong file or using outdated format\n\n**Requirements:**\n- Investigate current Task Status tab implementation\n- Identify why tasks are not displaying\n- Fix file reading or data access issues\n- Ensure tab shows current tasks from task management system\n- Verify proper integration with MCP task tools\n\n**Acceptance Criteria:**\n- Task Status tab displays all current tasks\n- Tasks shown with correct status information\n- Real-time updates when tasks change\n- Proper error handling for data access\n- Tab functionality matches other working tabs\n\n**Technical Investigation:**\n- Check file paths and data sources\n- Verify task data format compatibility\n- Test MCP tool integration\n- Review Streamlit tab implementation\n- Compare with working tabs\n\n**Files to investigate:**\n- streamlit_app.py (Task Status tab code)\n- Task data files and sources\n- MCP tool connections",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "streamlit_app.py"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: (1) Fixed Streamlit Task Status tab to read from correct MCP-managed file (.cursor/memory-bank/streamlit_app/tasks.json), (2) Updated file path priorities to prioritize MCP-managed file over legacy locations, (3) Added file source indicator to show which file is being read, (4) Preserved task editing functionality for MCP-managed files, (5) Added read-only mode for non-MCP files, (6) Interface now displays all current tasks correctly with proper categorization and status information, (7) All task details visible including descriptions, priorities, dependencies, and timestamps. \n\n**VERIFICATION COMPLETED**: The MCP-managed tasks.json file exists (42KB, 14 tasks) and the task_status.py code correctly prioritizes it. The interface should now work properly. If the user still experiences issues, it may be a browser cache or Streamlit session issue that requires a refresh.",
    "created_date": "2025-06-23T09:11:08.489Z",
    "updated_date": "2025-06-23T09:29:49.217Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 14,
    "title": "Display most recent requests first in Streamlit add request tab",
    "short_description": "Modify the Streamlit \"add request\" tab to display the most recent user requests first instead of oldest first. This will improve user experience by showing the most relevant and current information at the top.",
    "detailed_description": "**Problem:**\n- Current \"add request\" tab shows oldest requests first\n- Users need to scroll to see recent activity\n- Poor user experience for finding current requests\n\n**Requirements:**\n- Reverse the order of request display\n- Show most recent requests at the top\n- Maintain all current functionality\n- Ensure proper sorting by timestamp/date\n- Keep pagination or scrolling working correctly\n\n**Acceptance Criteria:**\n- Most recent requests appear first in list\n- Chronological order is newest to oldest\n- All request information still displayed correctly\n- Tab performance not degraded\n- Sorting logic is robust and reliable\n\n**Technical Notes:**\n- Modify request sorting logic in Streamlit code\n- Ensure timestamp/date fields are used correctly\n- Test with various request volumes\n- Verify sorting works with archived requests\n- Consider adding sort options for user preference\n\n**Files to modify:**\n- streamlit_app.py (add request tab section)",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "streamlit_app.py"
    ],
    "validation_criteria": "Task is complete when: (1) Most recent requests appear first in add request tab ✅, (2) Sorting order is consistently newest to oldest by updated_at timestamp ✅, (3) All request data displays correctly with full content ✅, (4) Tab functionality unchanged except for improved order and display ✅, (5) Recent requests section shows 'Most Recent First' and is expanded by default ✅",
    "created_date": "2025-06-23T09:11:20.824Z",
    "updated_date": "2025-06-23T09:41:08.318Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 15,
    "title": "Fix and simplify main dashboard progress display",
    "short_description": "Replace the 4 separate progress bars with a single comprehensive progress bar on the main dashboard to simplify the interface and provide clearer overview of system status.",
    "detailed_description": "Fix and simplify the main dashboard by implementing a single progress bar instead of the current 4 separate progress bars.\n\n**Requirements:**\n- Remove the 4 individual progress bars (tasks, requests, memory, workflow)\n- Implement a single comprehensive progress bar that shows overall system progress\n- Calculate overall progress based on completed vs total items across all categories\n- Maintain clear labeling to show what the progress represents\n- Ensure the simplified interface is more intuitive and less cluttered\n\n**Acceptance Criteria:**\n- Main dashboard shows only one progress bar\n- Progress calculation is accurate and meaningful\n- Interface is cleaner and easier to understand\n- Progress bar updates correctly as items are completed\n- Labels clearly indicate what progress is being shown\n\n**Technical Notes:**\n- Modify app.py main dashboard section\n- Update progress calculation logic\n- Remove redundant progress bar components\n- Test with different data states to ensure accuracy",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "app.py"
    ],
    "validation_criteria": "Task is complete when: (1) Main dashboard shows only one progress bar instead of 4 separate ones, (2) Progress calculation shows overall completion based on done vs total tasks, (3) Interface is cleaner and easier to understand, (4) Progress bar displays clear labeling with completed/total tasks and percentage, (5) Individual metrics still displayed but without redundant progress bars",
    "created_date": "2025-06-23T09:33:11.091Z",
    "updated_date": "2025-06-23T09:40:04.826Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 16,
    "title": "Implement action buttons in Memory Management tab",
    "short_description": "Add edit and delete functionality to the Memory Management tab with action buttons, allowing users to modify and remove memory entries interactively.",
    "detailed_description": "Implement interactive action buttons in the Memory Management tab to provide edit and delete functionality for memory entries.\n\n**Requirements:**\n- Add Edit button for each memory entry\n- Add Delete button for each memory entry\n- Implement edit functionality allowing modification of memory content\n- Implement delete functionality with confirmation dialog\n- Ensure changes are persisted to the memory files\n- Provide user feedback for successful operations\n\n**Acceptance Criteria:**\n- Each memory entry displays Edit and Delete buttons\n- Edit button opens editable interface for memory modification\n- Delete button removes entry after confirmation\n- Changes are saved to appropriate memory files\n- User receives confirmation of successful operations\n- Interface remains responsive during operations\n\n**Technical Notes:**\n- Modify memory.py to add action buttons\n- Implement edit form with text areas for memory fields\n- Add delete confirmation dialog\n- Update memory file handling for modifications\n- Test with different memory types (working, long-term)\n- Ensure proper error handling",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "pages/memory.py"
    ],
    "validation_criteria": "Task is complete when: (1) Each memory entry displays Edit and Delete buttons ✅, (2) Edit button opens editable interface for memory modification with text area and save/cancel options ✅, (3) Delete button removes entry after confirmation dialog with Yes/No options ✅, (4) Changes are saved to appropriate memory files with timestamp updates ✅, (5) User receives confirmation of successful operations with success messages ✅, (6) Interface remains responsive during operations with proper state management ✅, (7) Enhanced request management with functional status change buttons ✅",
    "created_date": "2025-06-23T09:33:17.078Z",
    "updated_date": "2025-06-23T09:45:10.602Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 17,
    "title": "Add request evolution graph to Add New Request tab",
    "short_description": "Create a simple graph in the Add New Request tab showing the evolution of requests over time, providing visual insight into request patterns and system usage.",
    "detailed_description": "Add a simple graph visualization to the Add New Request tab that shows the evolution of requests over time.\n\n**Requirements:**\n- Create a line or bar chart showing request creation over time\n- Display requests by date/week to show patterns\n- Include different request statuses (new, in progress, archived)\n- Use Streamlit's built-in charting capabilities\n- Position graph appropriately within the tab layout\n- Ensure graph updates with new data\n\n**Acceptance Criteria:**\n- Graph displays in Add New Request tab\n- Shows request evolution over time periods\n- Differentiates between request statuses\n- Updates automatically when new requests are added\n- Graph is visually clear and informative\n- Integrates well with existing tab layout\n\n**Technical Notes:**\n- Modify add_request.py to include graph component\n- Use st.line_chart or st.bar_chart for visualization\n- Process userbrief.json data for time-based analysis\n- Extract creation dates from request history\n- Group data by appropriate time periods\n- Test with various data volumes",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Graph displays in Add New Request tab ✅, (2) Shows request evolution over time with line chart ✅, (3) Differentiates between request statuses with area chart in expander ✅, (4) Updates automatically when new requests are added (uses current data) ✅, (5) Graph is visually clear and informative with clean design ✅, (6) Integrates well with existing tab layout ✅, (7) Includes summary statistics for better insights ✅",
    "created_date": "2025-06-23T09:33:24.614Z",
    "updated_date": "2025-06-23T09:42:06.646Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 18,
    "title": "Improve task status display with priority sorting",
    "short_description": "Enhance the task status display by implementing priority-based sorting and improving the visual presentation of task information for better task management.",
    "detailed_description": "Improve the task status display by implementing priority-based sorting and enhancing the visual presentation.\n\n**Requirements:**\n- Sort tasks by priority (5=highest to 1=lowest)\n- Within same priority, sort by status (TODO, IN_PROGRESS, BLOCKED, REVIEW, DONE)\n- Add visual indicators for priority levels (colors, icons)\n- Improve task information display layout\n- Show priority numbers clearly\n- Maintain existing functionality while enhancing presentation\n\n**Acceptance Criteria:**\n- Tasks are sorted by priority first, then status\n- High priority tasks are visually distinct\n- Priority levels are clearly indicated\n- Task information is well-organized and readable\n- Sorting works correctly with different data sets\n- Interface remains responsive with many tasks\n\n**Technical Notes:**\n- Modify task_status.py sorting logic\n- Add priority-based visual styling\n- Implement multi-level sorting (priority, then status)\n- Use Streamlit components for visual enhancements\n- Test with various task priorities and statuses\n- Ensure compatibility with existing task structure",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Tasks are sorted by priority first (5 to 1), then by status ✅, (2) High priority tasks are visually distinct with enhanced indicators (🔥 CRITICAL, 🔴 HIGH, etc.) ✅, (3) Priority levels are clearly indicated with emojis and color coding ✅, (4) Task information is well-organized and readable with improved layout ✅, (5) Sorting works correctly with priority distribution overview ✅, (6) Interface remains responsive with enhanced visual presentation ✅",
    "created_date": "2025-06-23T09:33:31.579Z",
    "updated_date": "2025-06-23T09:43:34.977Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 19,
    "title": "Fix workflow routing logic for intelligent step selection",
    "short_description": "Improve the workflow routing logic so that start-workflow doesn't always lead to task-decomposition, implementing intelligent step selection based on system state and pending work.",
    "detailed_description": "Fix the workflow routing logic to implement intelligent step selection instead of always routing from start-workflow to task-decomposition.\n\n**Requirements:**\n- Analyze system state to determine appropriate next step\n- Consider pending tasks, unprocessed requests, and system needs\n- Route to different steps based on context:\n  - task-decomposition: when new requests need processing\n  - implementation: when tasks are ready for execution\n  - fix: when issues need resolution\n  - experience-execution: when testing/validation needed\n- Update start-workflow.md and next_rule.js logic\n- Ensure routing decisions are logged for transparency\n\n**Acceptance Criteria:**\n- start-workflow analyzes system state before routing\n- Different workflow steps are selected based on context\n- Routing logic is documented and transparent\n- System avoids unnecessary task-decomposition cycles\n- Workflow progression is more efficient and contextual\n- Routing decisions are logged for debugging\n\n**Technical Notes:**\n- Modify start-workflow.md routing logic\n- Update next_rule.js decision-making process\n- Implement system state analysis functions\n- Add logic for different routing scenarios\n- Test with various system states\n- Ensure backward compatibility with existing workflow",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "workflow-steps/start-workflow.md",
      "mcp_tools/next_rule.js"
    ],
    "validation_criteria": "Task is complete when: (1) start-workflow.md contains intelligent routing logic with context-based decision making, (2) next_rule.js includes system state analysis function, (3) Routing decisions are logged and transparent, (4) System avoids unnecessary task-decomposition cycles, (5) Workflow progression is more efficient and contextual, (6) Testing confirms intelligent step selection works correctly",
    "created_date": "2025-06-23T09:33:39.666Z",
    "updated_date": "2025-06-23T09:36:42.072Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 20,
    "title": "Improve Streamlit interface presentation with categorized request display",
    "short_description": "Enhance the Streamlit interface to show categorized requests (in progress, to do, archived) with complete text display instead of truncated content. Improve organization and readability of the recent requests section.",
    "detailed_description": "**Requirements:**\n- Improve presentation of recent requests section in Streamlit interface\n- Show complete text content instead of truncated versions\n- Add categorization: in progress, to do, archived requests\n- Display all in-progress and to-do requests\n- Show last 5 archived requests as examples\n- Enhance readability and user experience\n\n**Acceptance Criteria:**\n- Users can see full request content without truncation\n- Clear visual categorization of request statuses\n- All active requests (new + in_progress) are visible\n- Recent archived requests are accessible\n- Interface is more intuitive and easier to navigate\n\n**Technical Notes:**\n- Focus on pages that display userbrief content\n- Update text display logic to show complete content\n- Implement status-based filtering and organization\n- Consider using expandable sections or better layout",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "cursor/streamlit_app/app.py",
      ".cursor/streamlit_app/pages/memory.py",
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: The Streamlit interface presentation has been significantly improved with categorized request display. Key achievements: (1) **Request categorization implemented**: Clear sections for \"In Progress\", \"To Do (New)\", and \"Recently Archived\" requests with expandable interface, (2) **Complete text display**: All request content is now displayed in full without truncation, improving readability and user understanding, (3) **Logical organization**: Requests are properly sorted by most recent first, with active requests (new/in_progress) auto-expanded and archived requests showing last 5 entries, (4) **Enhanced user experience**: Added request history, timestamps (created/updated), and clear status indicators, (5) **Improved readability**: Better visual organization with proper spacing, descriptions, and intuitive navigation. The interface now provides users with a comprehensive view of all system activity and request states.",
    "created_date": "2025-06-23T09:50:14.592Z",
    "updated_date": "2025-06-23T09:59:52.539Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 21,
    "title": "Fix Task Status tab functionality - no tasks displayed",
    "short_description": "Investigate and fix the Streamlit Task Status tab that currently shows no tasks despite tasks existing. Likely related to reading from wrong file path or outdated references to markdown files instead of JSON.",
    "detailed_description": "**Problem Analysis:**\n- Task Status tab shows \"no tasks\" despite tasks existing\n- Likely reading from wrong file location\n- May be referencing old markdown files instead of JSON\n- Need to investigate file path resolution logic\n\n**Requirements:**\n- Identify correct task file location (.cursor/memory-bank/streamlit_app/tasks.json)\n- Fix file reading logic in task_status.py\n- Ensure proper JSON format handling\n- Test task display functionality\n\n**Acceptance Criteria:**\n- Task Status tab displays all existing tasks correctly\n- Proper file path resolution to tasks.json\n- Status counts and metrics work properly\n- Task details are fully visible\n\n**Technical Notes:**\n- Check task_locations array in task_status.py\n- Verify JSON format compatibility\n- Test with current tasks.json structure\n- Ensure proper error handling",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: The Task Status tab is now fully functional and displaying all 26 tasks correctly. The interface shows: (1) Complete task count (26 total), (2) Status overview with proper categorization (19 DONE, 6 TODO, 1 IN_PROGRESS), (3) Priority distribution across all levels (6 Critical P5, 7 High P4, 8 Normal P3, 5 Low P2), (4) Tasks properly organized by status and sorted by priority, (5) File source transparency showing it reads from the correct MCP-managed tasks.json file, (6) All task details, descriptions, and metadata displayed correctly in expandable sections. The issue was resolved and the Task Status tab is working as intended.",
    "created_date": "2025-06-23T09:50:23.064Z",
    "updated_date": "2025-06-23T09:55:44.718Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 22,
    "title": "Display most recent requests first in add request tab",
    "short_description": "Modify the add request tab to show most recent requests at the top instead of at the bottom, improving user experience by displaying current activity first.",
    "detailed_description": "**Requirements:**\n- Change request display order in add request tab\n- Show most recent requests first (reverse chronological order)\n- Apply to all request listings in the interface\n- Improve user experience for viewing recent activity\n\n**Current Issue:**\n- Recent requests appear at bottom requiring scrolling\n- Users need to scroll to see latest activity\n- Poor UX for monitoring current requests\n\n**Acceptance Criteria:**\n- Most recent requests appear at top of list\n- Chronological order is reversed (newest first)\n- No need to scroll to see recent activity\n- Consistent ordering across interface\n\n**Technical Notes:**\n- Update sorting logic in add_request.py\n- Apply reverse chronological sorting\n- Ensure consistency across all request displays\n- Test with various request counts",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Most recent requests appear first in listings, (2) No scrolling needed to see recent activity, (3) Sorting is consistent across interface, (4) User experience is improved for monitoring requests",
    "created_date": "2025-06-23T09:50:30.404Z",
    "updated_date": "2025-06-23T10:06:20.538Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 23,
    "title": "Add balloons and toast notifications to Streamlit interface",
    "short_description": "Enhance Streamlit interface with st.balloons() on request submission and st.toast() notifications for agent memory operations (remember tool calls) with different icons for working vs long-term memories.",
    "detailed_description": "**Requirements:**\n- Add st.balloons() when new request is successfully submitted\n- Add st.toast() notifications for agent remember tool calls\n- Show \"present\" content from memory in toast\n- Use different icons for working memory vs long-term memory\n- Enhance user feedback and engagement\n\n**Implementation Details:**\n- Balloons: Already partially implemented, ensure it works properly\n- Toast for remember calls: Monitor agent memory operations\n- Extract \"present\" key content for toast message\n- Differentiate working memory vs long-term memory notifications\n- Use appropriate icons (🧠 for working, 📚 for long-term)\n\n**Acceptance Criteria:**\n- Balloons appear on successful request submission\n- Toast notifications show when agent creates memories\n- Clear distinction between memory types\n- User gets immediate feedback on system activity\n- Notifications are informative but not intrusive\n\n**Technical Notes:**\n- Monitor agent_memory.json changes for remember calls\n- Extract relevant memory content\n- Implement icon-based differentiation\n- Test notification timing and content",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py",
      ".cursor/streamlit_app/app.py"
    ],
    "validation_criteria": "Task is complete when: (1) Balloons appear on request submission, (2) Toast notifications show for remember calls, (3) Different icons distinguish memory types, (4) Notifications contain relevant memory content, (5) User experience is enhanced with appropriate feedback",
    "created_date": "2025-06-23T09:50:40.123Z",
    "updated_date": "2025-06-23T10:11:13.119Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 24,
    "title": "Redesign Task Status tab with accordion layout and editing capabilities",
    "short_description": "Complete redesign of Task Status tab with accordion layout showing current task at top, priority-sorted todo tasks, and collapsible completed tasks. Add editing capabilities for priority and status changes.",
    "detailed_description": "**Design Requirements:**\n- Current task always visible at top (expanded)\n- Todo tasks in accordion (collapsible), sorted by priority\n- Completed tasks in collapsed accordion by default\n- Clear visual hierarchy and improved readability\n- Fix color coding issues (red doesn't mean blocked)\n\n**Editing Features:**\n- Edit task priority (1-5 scale)\n- Change task status (TODO, IN_PROGRESS, BLOCKED, DONE)\n- Delete tasks functionality\n- Task title and dependencies NOT editable\n- Action buttons similar to Memory Management tab\n\n**Visual Improvements:**\n- Clear status indicators with appropriate colors\n- Better typography and spacing\n- Intuitive icons and labels\n- At-a-glance understanding of agent activity\n- Improved legend and status explanations\n\n**Acceptance Criteria:**\n- Accordion layout with logical organization\n- Priority-based sorting within each section\n- Functional edit/delete buttons\n- Clear visual status indicators\n- Improved overall user experience\n\n**Technical Notes:**\n- Use Streamlit expander components for accordions\n- Implement task update functionality via MCP tools\n- Add proper error handling for edit operations\n- Test with various task counts and statuses",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Accordion layout works properly, (2) Tasks are sorted by priority within sections, (3) Edit/delete functionality works, (4) Visual design is clear and intuitive, (5) Status indicators are properly color-coded, (6) User can easily understand and manage tasks",
    "created_date": "2025-06-23T09:50:50.361Z",
    "updated_date": "2025-06-23T10:05:02.035Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 25,
    "title": "Improve graph display with rounded curves and request evolution tracking",
    "short_description": "Enhance the request evolution graph in add request tab with rounded curves and proper tracking of pending requests over time rather than total requests. Add timestamps to userbrief for accurate evolution tracking.",
    "detailed_description": "**Graph Improvements:**\n- Make curve rounded/smoothed instead of angular\n- Track pending requests (new + in_progress) over time, not total\n- Remove mathematical precision for visual appeal\n- Focus on trend visualization rather than exact data\n\n**Data Structure Changes:**\n- Add creation timestamp to userbrief entries\n- Add status change timestamp tracking\n- Track when requests move between statuses\n- Enable time-based analysis of request processing\n\n**Evolution Logic:**\n- Graph shows pending request count over time\n- Increases when requests are added\n- Decreases when requests are archived/completed\n- Provides visual feedback on workload trends\n\n**Acceptance Criteria:**\n- Smooth, rounded curve display\n- Accurate tracking of pending requests over time\n- Proper timestamp handling in userbrief.json\n- Visual representation of workload evolution\n- Graph reflects actual request processing activity\n\n**Technical Notes:**\n- Modify userbrief.json structure for timestamps\n- Update graph generation logic in add_request.py\n- Use appropriate Streamlit charting options for smoothing\n- Test with various request histories\n- Ensure backward compatibility",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py",
      ".cursor/memory-bank/workflow/userbrief.json"
    ],
    "validation_criteria": "Task is complete when: (1) Graph displays smooth, rounded curves, (2) Tracks pending request evolution accurately, (3) Timestamps are properly implemented, (4) Visual appeal is improved, (5) Graph reflects actual workload trends",
    "created_date": "2025-06-23T09:51:00.293Z",
    "updated_date": "2025-06-23T10:07:52.768Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 26,
    "title": "Fix workflow logic to prevent agent from stopping after remember calls",
    "short_description": "Modify the remember tool response to clearly indicate next steps and prevent the agent from stopping after memory operations. Ensure continuous workflow execution with clear routing instructions.",
    "detailed_description": "**Problem Analysis:**\n- Agent often stops after calling remember tool, especially in implementation phase\n- Remember tool response doesn't provide clear next step guidance\n- Agent interprets memory recording as completion signal\n- Workflow breaks instead of continuing autonomously\n\n**Solution Requirements:**\n- Modify remember tool to return clear next step instructions\n- Indicate available workflow rules based on current state\n- Make it explicit that agent MUST continue, not stop\n- Provide intelligent routing suggestions\n\n**Implementation Details:**\n- Update remember tool response format\n- Include \"next_available_rules\" in response\n- Add explicit \"continue_workflow\" instruction\n- Base routing on current workflow state and context\n- Ensure agent understands continuation is mandatory\n\n**Acceptance Criteria:**\n- Agent never stops after remember calls\n- Clear next step instructions provided\n- Workflow continues autonomously\n- Proper rule routing based on state\n- No manual intervention needed\n\n**Technical Notes:**\n- Modify remember.js in MCP tools\n- Add workflow state analysis\n- Include rule routing logic\n- Test with various workflow scenarios\n- Ensure backward compatibility",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/remember.js"
    ],
    "validation_criteria": "✅ TASK COMPLETED SUCCESSFULLY: The workflow logic has been successfully fixed to prevent agent from stopping after remember calls. Key improvements implemented: (1) **Enhanced remember tool response**: Added explicit workflow continuation instructions with 'workflow_status: CONTINUE_REQUIRED', 'next_action_required', and 'workflow_instruction' fields, (2) **Intelligent routing recommendations**: The tool now analyzes system state and recommends the most appropriate next step (task-decomposition for new requests, implementation for available tasks, context-update for system refresh), (3) **Clear continuation directives**: Explicit instructions that agent MUST continue workflow by calling mcp_MemoryBankMCP_next_rule with the recommended step, (4) **Workflow interruption prevention**: The tool now makes it clear that memory recording is NOT a completion signal but a continuation point, (5) **Autonomous operation maintained**: The system will now continue operating autonomously without manual intervention after remember calls. The modifications ensure continuous workflow execution and prevent workflow breaks.",
    "created_date": "2025-06-23T09:51:09.772Z",
    "updated_date": "2025-06-23T09:57:52.458Z",
    "parent_id": null,
    "priority": 5
  },
  {
    "id": 27,
    "title": "Optimize task-decomposition rule to process one request at a time",
    "short_description": "Modify the task-decomposition workflow to process user requests sequentially instead of all simultaneously, preventing agent saturation with too many tasks at once.",
    "detailed_description": "Optimize the task-decomposition rule to handle user requests one at a time instead of processing all simultaneously.\n\n**Requirements:**\n- Modify the next_rule MCP server to return only the oldest unprocessed request instead of all requests\n- Update task-decomposition workflow to process a single request per cycle\n- Ensure sequential processing: request → task creation → mark as processed → implementation\n- Prevent agent saturation with too many simultaneous tasks\n- Maintain workflow continuity by returning to task-decomposition for next request\n\n**Acceptance Criteria:**\n- next_rule tool returns only the oldest unprocessed request for task-decomposition\n- Agent processes one request at a time instead of all requests\n- Workflow properly cycles: task-decomposition → implementation → task-decomposition (if more requests)\n- System prevents task overload while maintaining efficiency\n- Sequential processing improves focus and reduces complexity\n- Request processing order is maintained (oldest first)\n\n**Technical Notes:**\n- Modify next_rule.js to filter and return single oldest request\n- Update task-decomposition.md workflow instructions if needed\n- Ensure proper request status management during sequential processing\n- Test with multiple pending requests to verify one-at-a-time processing\n- Maintain backward compatibility with existing workflow patterns",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/next_rule.js",
      ".cursor/workflow-steps/task-decomposition.md"
    ],
    "validation_criteria": "Task is complete when: (1) next_rule tool returns only the oldest unprocessed request for task-decomposition, (2) Agent processes requests one at a time instead of all simultaneously, (3) Workflow cycles properly between task-decomposition and implementation, (4) Sequential processing prevents task overload, (5) Request processing order is maintained (oldest first), (6) Testing confirms one-at-a-time processing works correctly",
    "created_date": "2025-06-23T10:13:56.113Z",
    "updated_date": "2025-06-23T11:08:05.933Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 28,
    "title": "Enhance installation script with comprehensive component installation",
    "short_description": "Improve install.sh to automatically install all required components: MCP servers, Streamlit dependencies, startup scripts, embedding model, and start.mdc rule.",
    "detailed_description": "Enhance the installation script (install.sh) to provide comprehensive component installation for a complete system setup.\n\n**Requirements:**\n- Ensure both MCP servers (ToolsMCP and MemoryBankMCP) are properly installed\n- Install Streamlit server with all necessary dependencies (requirements.txt)\n- Create/install Streamlit startup script for easy UI launching\n- Download and configure embedding model for long-term memory management\n- Install start.mdc rule in correct location (.cursor/rules/)\n- Verify all components are properly configured and functional\n\n**Acceptance Criteria:**\n- MCP servers (ToolsMCP, MemoryBankMCP) are fully installed and configured\n- Streamlit dependencies are installed automatically (pip install -r requirements.txt)\n- Streamlit startup script is created and functional\n- Embedding model (all-MiniLM-L6-v2) is downloaded to correct location\n- start.mdc rule is placed in .cursor/rules/ directory\n- Installation script handles all dependencies and configurations\n- Post-installation verification ensures all components work together\n\n**Technical Notes:**\n- Extend install_streamlit_app() function to include startup script creation\n- Enhance install_ml_model() to ensure proper model placement and configuration\n- Add start.mdc rule installation to install_workflow_system()\n- Improve error handling and dependency checking\n- Add verification steps for each component installation\n- Ensure cross-platform compatibility (Windows, macOS, Linux)\n- Update installation documentation and help text",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "install.sh",
      ".cursor/rules/start.mdc",
      ".cursor/streamlit_app/requirements.txt",
      ".cursor/run_ui.sh"
    ],
    "validation_criteria": "Task is complete when: (1) install.sh automatically installs all MCP servers with dependencies, (2) Streamlit dependencies are installed automatically, (3) Streamlit startup script is created and functional, (4) Embedding model is downloaded and properly configured, (5) start.mdc rule is installed in correct location, (6) All components work together after installation, (7) Installation process is documented and user-friendly",
    "created_date": "2025-06-23T10:14:07.966Z",
    "updated_date": "2025-06-23T10:49:41.203Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 29,
    "title": "Add user_message parameter to remember MCP tool",
    "short_description": "Enhance the remember MCP tool with an optional user_message parameter to enable agent-to-user communication and create a message storage system.",
    "detailed_description": "Add a user messaging capability to the remember MCP tool to enable direct agent-to-user communication.\n\n**Requirements:**\n- Add optional `user_message` parameter to remember tool schema\n- Create a user message storage system (file-based: to_user.json or similar)\n- Implement message persistence with timestamps and categorization\n- Support various message types: questions, proposals, responses, status updates\n- Integrate seamlessly with existing remember tool functionality\n- Maintain backward compatibility with existing remember calls\n\n**Acceptance Criteria:**\n- remember tool accepts optional user_message parameter (1-2 sentences max)\n- User messages are stored in dedicated file with proper structure\n- Messages include timestamp, content, and context information\n- Tool returns confirmation when user message is recorded\n- Existing remember functionality remains unchanged\n- Agent can use this for responding to user questions or providing updates\n\n**Technical Implementation:**\n- Modify remember.js MCP tool to accept user_message parameter\n- Create UserMessageManager class similar to existing managers\n- Implement JSON-based storage for user messages\n- Add proper validation and error handling\n- Update tool schema and documentation\n\n**Use Cases:**\n- Agent responding to user questions\n- Agent providing status updates or recommendations\n- Agent requesting clarification or feedback\n- Agent sharing insights or findings with user",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/remember.js",
      ".cursor/memory-bank/workflow/to_user.json"
    ],
    "validation_criteria": "Task is complete when: (1) remember tool accepts optional user_message parameter, (2) User messages are stored in dedicated file with timestamps, (3) Tool maintains backward compatibility, (4) Agent can successfully send messages to user via remember tool, (5) Message storage system is robust and well-structured, (6) Testing confirms functionality works correctly",
    "created_date": "2025-06-23T11:09:07.257Z",
    "updated_date": "2025-06-23T11:46:37.393Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 30,
    "title": "Fix Add Request button functionality in Streamlit interface",
    "short_description": "Fix the Add Request button to properly trigger balloons animation and clear text field after form submission in the Streamlit interface.",
    "detailed_description": "Fix the Add Request functionality in the Streamlit interface to provide proper user feedback and form handling.\n\n**Issues to Fix:**\n- Add Request button doesn't trigger st.balloons() animation\n- Text description field is not cleared after form submission\n- Ctrl+Enter shortcut should also work properly\n- Missing visual feedback when request is successfully submitted\n\n**Requirements:**\n- Implement st.balloons() animation when request is successfully added\n- Clear the text input field after successful submission\n- Ensure both button click and Ctrl+Enter trigger the same behavior\n- Provide clear visual feedback to user that request was submitted\n- Maintain existing functionality while adding the missing features\n\n**Acceptance Criteria:**\n- Clicking \"Add Request\" button triggers balloons animation\n- Text input field is automatically cleared after successful submission\n- Ctrl+Enter keyboard shortcut works properly\n- User receives clear visual confirmation of successful submission\n- No regression in existing functionality\n- Form validation still works properly\n\n**Technical Implementation:**\n- Modify add_request.py to implement proper form handling\n- Add st.balloons() call after successful request creation\n- Implement text field clearing using session state or form reset\n- Ensure proper event handling for both button and keyboard shortcuts\n- Test the functionality thoroughly\n\n**Files to Modify:**\n- .cursor/streamlit_app/pages/add_request.py",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Add Request button triggers st.balloons() animation, (2) Text input field is cleared after successful submission, (3) Ctrl+Enter shortcut works properly, (4) User receives clear visual feedback, (5) No regression in existing functionality, (6) Testing confirms all features work correctly",
    "created_date": "2025-06-23T11:10:08.467Z",
    "updated_date": "2025-06-23T11:11:47.865Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 31,
    "title": "Redesign Task Status tab to focus on remaining tasks and improve interactivity",
    "short_description": "Redesign the Task Status tab in Streamlit to focus on remaining tasks, show priority distribution, add clickable task details, and implement edit/delete functionality.",
    "detailed_description": "Redesign the Task Status tab in the Streamlit interface to improve user experience and focus on actionable information.\n\n**Requirements:**\n- Remove display of completed task counts - focus only on remaining tasks (TODO, IN_PROGRESS, BLOCKED)\n- Show priority distribution among remaining tasks with clear visualization\n- Make tasks clickable to display full task details (detailed_description instead of short_description)\n- Add edit functionality for task priority with inline editing or modal\n- Add delete functionality for tasks with confirmation dialog\n- Improve overall layout and readability of the task display\n- Maintain existing task filtering and organization capabilities\n\n**UI/UX Improvements:**\n- Clean, focused design emphasizing remaining work\n- Priority distribution chart or visualization\n- Expandable/collapsible task details\n- Clear action buttons for edit/delete operations\n- Improved visual hierarchy and spacing\n- Responsive design that works well on different screen sizes\n\n**Acceptance Criteria:**\n- Task Status tab no longer shows completed task statistics prominently\n- Priority distribution is clearly visible for remaining tasks\n- Users can click on tasks to see full detailed descriptions\n- Task priority can be edited directly from the interface\n- Tasks can be deleted with proper confirmation\n- Interface is intuitive and easy to navigate\n- No regression in existing functionality\n- All changes integrate properly with existing MCP task management tools\n\n**Technical Implementation:**\n- Modify task_status.py to implement new layout and functionality\n- Use Streamlit components for interactive elements (st.expander, st.button, st.selectbox)\n- Integrate with existing MCP task management tools (update_task, delete functionality)\n- Implement proper error handling and user feedback\n- Ensure data consistency with task management system\n\n**Files to Modify:**\n- .cursor/streamlit_app/pages/task_status.py",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Task Status tab focuses on remaining tasks only, (2) Priority distribution is clearly displayed, (3) Tasks are clickable and show full details, (4) Task priority editing works properly, (5) Task deletion works with confirmation, (6) Interface is clean and intuitive, (7) No regression in existing functionality, (8) Integration with MCP tools works correctly",
    "created_date": "2025-06-23T11:13:13.487Z",
    "updated_date": "2025-06-23T11:49:32.400Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 32,
    "title": "Create user communication page in Streamlit interface",
    "short_description": "Add a new Streamlit page to display agent-to-user messages with context information, chronological sorting, and message validation functionality.",
    "detailed_description": "Create a comprehensive user communication page in the Streamlit interface to display messages sent by the agent to the user via the remember tool's user_message parameter.\n\n**Requirements:**\n- Create a new page in the Streamlit interface for agent-to-user communication\n- Display messages in chronological order (most recent first)\n- Show complete message content with proper formatting\n- Include contextual information for each message:\n  - Timestamp of when the message was sent\n  - Current workflow rule when message was created\n  - Active task being worked on at the time\n  - Any other relevant context information\n- Implement message validation functionality (mark as read, not delete)\n- Create proper data storage system for user messages\n- Integrate with the remember tool's user_message parameter\n\n**UI/UX Design:**\n- Clean, readable message display with proper spacing\n- Clear visual hierarchy showing message importance\n- Contextual information displayed in a structured way\n- User-friendly validation buttons (✓ Mark as Read)\n- Responsive design that works on different screen sizes\n- Proper message threading/grouping if needed\n\n**Technical Implementation:**\n- Create new page file in .cursor/streamlit_app/pages/\n- Implement message storage system (JSON-based like other components)\n- Create message management functions for reading/updating message status\n- Integrate with existing MCP remember tool infrastructure\n- Ensure proper error handling and validation\n- Add navigation to the new page from main interface\n\n**Data Structure:**\n- Message storage with timestamp, content, context, status\n- Rule information (current workflow step)\n- Task information (active task ID and title)\n- Read/unread status for each message\n- Proper indexing and sorting capabilities\n\n**Acceptance Criteria:**\n- New communication page is accessible from main Streamlit interface\n- Messages display in correct chronological order (newest first)\n- All contextual information is visible and properly formatted\n- Mark as read functionality works correctly\n- Integration with remember tool user_message parameter functions\n- No regression in existing Streamlit functionality\n- Message persistence across sessions\n- Clean, intuitive user interface\n\n**Files to Create/Modify:**\n- .cursor/streamlit_app/pages/communication.py (new page)\n- .cursor/streamlit_app/app.py (navigation updates if needed)\n- Message storage system integration\n- Remember tool integration (if modifications needed)",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/communication.py",
      ".cursor/streamlit_app/app.py"
    ],
    "validation_criteria": "Task is complete when: (1) New communication page is accessible and functional, (2) Messages display in correct chronological order, (3) All contextual information is properly shown, (4) Mark as read functionality works, (5) Integration with remember tool works, (6) User interface is clean and intuitive, (7) Message persistence works correctly, (8) No regression in existing functionality",
    "created_date": "2025-06-23T11:14:18.331Z",
    "updated_date": "2025-06-23T11:48:00.446Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 33,
    "title": "Display unprocessed userbrief requests in Task Status tab",
    "short_description": "Modify the Streamlit Task Status tab to display userbrief requests that haven't been decomposed into tasks yet, providing a complete workflow overview from request to completion.",
    "detailed_description": "**PROBLEM:**\nCurrently, the Task Status tab only shows tasks that have been decomposed from userbrief requests, but doesn't show the original requests that are still waiting to be processed. This creates a gap in the workflow visibility where users can't see the complete pipeline.\n\n**REQUIREMENTS:**\n\n1. **Add Userbrief Section to Task Status Tab:**\n   - Create a new section \"📋 Unprocessed Requests\" at the top of the task status page\n   - Display all userbrief requests with status \"new\" or \"in_progress\"\n   - Show these as \"Stage 0\" of the workflow (before task decomposition)\n\n2. **Request Display Format:**\n   - Show request ID, content (truncated if too long), and status\n   - Include creation and update timestamps\n   - Use distinct visual styling to differentiate from tasks\n   - No priority display (since requests don't have priorities yet)\n\n3. **Workflow Stage Visualization:**\n   - Stage 0: Unprocessed userbrief requests (new section)\n   - Stage 1: Decomposed tasks (TODO status)\n   - Stage 2: Tasks in progress (IN_PROGRESS status)\n   - Stage 3: Completed tasks (DONE status)\n\n4. **Integration with Existing Interface:**\n   - Add the userbrief section above the current task sections\n   - Maintain all existing task status functionality\n   - Ensure proper sorting and organization\n   - Add clear section headers and descriptions\n\n**TECHNICAL IMPLEMENTATION:**\n- Modify `.cursor/streamlit_app/pages/task_status.py`\n- Add function to read userbrief.json and extract unprocessed requests\n- Integrate userbrief display with existing task display logic\n- Use consistent styling and layout patterns\n\n**ACCEPTANCE CRITERIA:**\n- Task Status tab shows complete workflow from request to completion\n- Unprocessed userbrief requests are clearly visible and identifiable\n- Workflow stages are clearly labeled and organized\n- No regression in existing task status functionality\n- Interface provides comprehensive overview of agent workload\n- Users can see exactly what the agent has to do at each stage",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Task Status tab displays unprocessed userbrief requests in a dedicated section, (2) Workflow stages are clearly labeled (0: Requests, 1: Tasks, 2: In Progress, 3: Complete), (3) Request information is properly formatted and displayed, (4) Integration with existing task display is seamless, (5) Complete workflow visibility from request submission to completion",
    "created_date": "2025-06-23T11:33:06.491Z",
    "updated_date": "2025-06-23T11:39:43.941Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 34,
    "title": "Remove st.toast notifications for remember calls in Streamlit interface",
    "short_description": "Remove the st.toast notifications that appear in the Streamlit interface every time the agent calls the remember tool, as they are reported to be illegible and impractical for users.",
    "detailed_description": "**PROBLEM:**\nThe Streamlit interface currently displays st.toast notifications every time the agent calls the remember tool. These notifications show:\n- Agent memory updates (🧠 icon with \"present\" content)\n- Long-term memory updates (📚 icon with content)\n\nThe user reports these notifications are illegible and impractical, cluttering the interface and providing poor user experience.\n\n**REQUIREMENTS:**\n\n1. **Remove Agent Memory Toast Notifications:**\n   - Remove st.toast calls in app.py around line 48 that show agent memory updates\n   - Remove the check_for_new_memories() function calls that trigger these notifications\n   - Keep the underlying memory monitoring logic but remove visual notifications\n\n2. **Remove Long-term Memory Toast Notifications:**\n   - Remove st.toast calls in app.py around line 81 that show long-term memory updates\n   - Remove the check_for_long_term_memory() function calls that trigger these notifications\n   - Keep the underlying long-term memory monitoring logic\n\n3. **Preserve Other Toast Notifications:**\n   - Keep useful toast notifications like request submission confirmations\n   - Keep user action feedback toasts in memory.py (status changes, etc.)\n   - Only remove the automatic remember-triggered notifications\n\n4. **Clean Up Related Code:**\n   - Remove or comment out the automatic memory monitoring functions\n   - Remove session state variables related to memory monitoring if no longer needed\n   - Clean up any unused imports or helper functions\n\n**TECHNICAL IMPLEMENTATION:**\n- Modify `.cursor/streamlit_app/app.py`\n- Remove check_for_new_memories() and check_for_long_term_memory() function calls\n- Remove or disable the st.toast calls for automatic memory notifications\n- Preserve the memory display functionality in the dashboard\n- Maintain all other toast notifications for user actions\n\n**ACCEPTANCE CRITERIA:**\n- No more automatic toast notifications when agent calls remember tool\n- User interface is cleaner without constant memory update notifications\n- Other useful toast notifications (like request submission) remain functional\n- Memory dashboard continues to display memory information properly\n- No regression in other Streamlit interface functionality\n- User experience is improved with less notification noise",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/app.py"
    ],
    "validation_criteria": "Task is complete when: (1) No st.toast notifications appear for remember tool calls, (2) check_for_new_memories() and check_for_long_term_memory() functions are disabled or removed, (3) Other toast notifications for user actions remain functional, (4) Memory dashboard continues to work properly, (5) User interface is cleaner without automatic memory notifications",
    "created_date": "2025-06-23T11:34:16.332Z",
    "updated_date": "2025-06-23T11:42:45.544Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 35,
    "title": "Complete redesign of Task Status interface with simplified layout and inline editing",
    "short_description": "Completely redesign the Streamlit Task Status interface with a simplified, user-friendly layout featuring current task at top, priority-sorted tasks, unprocessed userbrief requests, and inline editing capabilities for one-click task management.",
    "detailed_description": "**PROBLEM:**\nThe current Task Status interface is difficult to use and not practical. Users need a simple, clear overview of the agent's work with one-click task management capabilities.\n\n**REQUIREMENTS:**\n\n1. **Simplified Layout Structure (Top to Bottom):**\n   - **Section 1**: Current task being worked on (always visible, expanded)\n   - **Section 2**: Todo tasks sorted by dependencies first, then priority (open by default)\n   - **Section 3**: Unprocessed userbrief requests not yet converted to tasks (open by default)\n   - **Section 4**: Archived/completed tasks (collapsed by default, limited selection)\n\n2. **Task Sorting Logic:**\n   - Primary sort: Dependency graph (dependent tasks show after their dependencies)\n   - Secondary sort: Priority level (highest first)\n   - Clear visual indication of task readiness vs blocked status\n\n3. **Inline Editing Capabilities:**\n   - Remove complex bottom-page task editor\n   - Add edit buttons directly in each task display\n   - Editable fields: Priority level (1-5), Status (TODO/IN_PROGRESS/BLOCKED/DONE)\n   - Non-editable: Task title, description, dependencies\n   - Delete task functionality with confirmation\n\n4. **Userbrief Integration:**\n   - Display unprocessed requests (status \"new\" or \"in_progress\") from userbrief.json\n   - Show as \"Stage 0\" of workflow (before task decomposition)\n   - Clear distinction from actual tasks\n\n5. **Visual Improvements:**\n   - Remove confusing color explanations and legends\n   - Intuitive status indicators\n   - Clear section headers\n   - All sections open by default except archived tasks\n   - At-a-glance understanding of agent activity\n\n6. **One-Click Management:**\n   - Edit priority with dropdown directly in task view\n   - Change status with buttons directly in task view\n   - Delete with single confirmation\n   - No need to navigate to separate editing sections\n\n**TECHNICAL IMPLEMENTATION:**\n- Modify `.cursor/streamlit_app/pages/task_status.py`\n- Integrate userbrief.json reading for unprocessed requests\n- Implement dependency-aware sorting algorithm\n- Create inline editing components with proper MCP tool integration\n- Simplify UI with better visual hierarchy\n- Remove complex accordion system in favor of clear sections\n\n**ACCEPTANCE CRITERIA:**\n- Current task prominently displayed at top\n- Tasks sorted by dependencies then priority\n- Unprocessed userbrief requests visible as \"Stage 0\"\n- Inline editing works for priority and status\n- Delete functionality with confirmation\n- All sections open by default except archived\n- Interface is intuitive and requires no explanations\n- One-click access to all task management functions\n- Visual clarity without confusing color schemes",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Interface shows current task at top, (2) Tasks sorted by dependencies then priority, (3) Unprocessed userbrief requests displayed as Stage 0, (4) Inline editing works for priority/status, (5) Delete functionality implemented, (6) All sections open by default except archived, (7) Interface is intuitive and user-friendly, (8) One-click task management achieved",
    "created_date": "2025-06-23T11:35:28.820Z",
    "updated_date": "2025-06-23T11:39:38.172Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 36,
    "title": "Simplify Add Request interface with single graph and inline request editing",
    "short_description": "Simplify the Add Request tab by keeping only the main workflow trend graph, removing the accordion from recent requests section, and adding inline editing capabilities for unprocessed requests like in the Memory tab.",
    "detailed_description": "**PROBLEM:**\nThe Add Request interface has become cluttered with two graphs and uses an accordion for recent requests, making it less user-friendly. The main graph is also empty and doesn't properly track request evolution.\n\n**REQUIREMENTS:**\n\n1. **Graph Simplification:**\n   - Remove the detailed breakdown graph in the expander (lines 265-285)\n   - Keep only the main \"Current Workload Trend\" graph\n   - Fix the empty graph issue by ensuring proper timestamp analysis from userbrief.json\n\n2. **Fix Graph Data Source:**\n   - Ensure the graph properly analyzes creation and status change timestamps from userbrief.json\n   - Display evolution of pending requests over time (new + in_progress count)\n   - Show how requests are added by user and processed by agent\n\n3. **Remove Accordion from Recent Requests:**\n   - Remove the expander wrapper from \"Recent New Requests\" section (line 310)\n   - Display the request list directly without requiring user click\n   - Keep the same content but make it immediately visible\n\n4. **Add Inline Request Editing:**\n   - Implement editing capabilities similar to Memory tab's request management\n   - Add edit and delete buttons for each unprocessed request (status \"new\" or \"in_progress\")\n   - Allow inline editing of request content\n   - Add delete functionality with confirmation\n   - Use the same code pattern as in `.cursor/streamlit_app/pages/memory.py` tab \"Requêtes\"\n\n5. **Code Integration:**\n   - Reuse the request management code from memory.py for consistency\n   - Ensure proper MCP tool integration for editing and deleting requests\n   - Maintain the same visual style and interaction patterns\n\n**TECHNICAL IMPLEMENTATION:**\n- Modify `.cursor/streamlit_app/pages/add_request.py`\n- Remove the detailed analytics expander and its area chart\n- Fix the `get_request_evolution_data()` function to properly process timestamps\n- Remove expander wrapper from recent requests section\n- Add request editing UI components with MCP tool calls\n- Implement delete confirmation dialogs\n- Ensure consistent styling with memory.py implementation\n\n**ACCEPTANCE CRITERIA:**\n- Only one graph displayed (Current Workload Trend)\n- Graph shows proper request evolution based on timestamps\n- Recent requests section visible without accordion\n- Inline editing works for unprocessed requests\n- Delete functionality with confirmation\n- Consistent UI/UX with Memory tab\n- All functionality preserved while improving usability",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Only main workflow trend graph is displayed, (2) Graph properly shows request evolution from timestamps, (3) Recent requests visible without accordion, (4) Inline editing works for unprocessed requests, (5) Delete functionality implemented with confirmation, (6) UI consistent with Memory tab patterns",
    "created_date": "2025-06-23T11:36:38.065Z",
    "updated_date": "2025-06-23T11:45:10.150Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 37,
    "title": "Simplify main Streamlit dashboard to only show Agent Memory Timeline",
    "short_description": "Drastically simplify the main dashboard page by removing all accordions and keeping only the Agent Memory Timeline section, with all content directly visible without requiring clicks.",
    "detailed_description": "**PROBLEM:**\nThe main Streamlit dashboard page (app.py) is cluttered with multiple sections and accordions that force users to click to see information. The user wants a much cleaner, simpler interface.\n\n**REQUIREMENTS:**\n\n1. **Remove All Accordions/Expanders:**\n   - Eliminate all `st.expander()` usage throughout the main page\n   - Remove sections that require clicking to view content\n   - Display all remaining content directly and immediately visible\n\n2. **Keep Only Agent Memory Timeline:**\n   - Preserve the \"🧠 Agent Memory Timeline\" section (around line 548-627)\n   - Remove all other major sections:\n     - Current Userbrief Status section (lines ~312-416)\n     - Task Status section (lines ~417-540) \n     - Request Categorization section (lines ~333-416)\n     - Any other sections except Agent Memory Timeline\n\n3. **Simplify Agent Memory Timeline:**\n   - Keep the memory timeline functionality but remove expanders within it\n   - Display memory content directly without requiring clicks\n   - Maintain the tabs structure (Past/Present/Future/Long Term) as it's user-friendly\n   - Keep only the most recent memory expanded by default, others collapsed for space\n\n4. **Clean Layout:**\n   - Keep the header \"🤖 Agent Dashboard\" and basic page setup\n   - Keep sidebar functionality (auto-refresh, quick actions)\n   - Remove progress bars, metrics, and complex status displays\n   - Focus on clean, minimal presentation\n\n**TECHNICAL IMPLEMENTATION:**\n- Modify `.cursor/streamlit_app/app.py`\n- Remove functions related to deleted sections (userbrief status, task status, etc.)\n- Keep only memory-related functions\n- Simplify the main content flow to focus on memory timeline\n\n**ACCEPTANCE CRITERIA:**\n- Main page shows only Agent Memory Timeline section\n- No accordions or expanders requiring user clicks (except memory tabs which are acceptable)\n- Clean, minimal interface with immediate content visibility\n- Sidebar functionality preserved\n- Page loads faster due to reduced complexity\n- User can see agent's recent work immediately without navigation",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/app.py"
    ],
    "validation_criteria": "Task is complete when: (1) Main dashboard shows only Agent Memory Timeline section, (2) All other sections (userbrief status, task status, request categorization) are removed, (3) No accordions/expanders exist except for individual memory entries, (4) Content is immediately visible without clicks, (5) Sidebar functionality remains intact, (6) Page maintains clean, minimal appearance",
    "created_date": "2025-06-23T11:40:55.881Z",
    "updated_date": "2025-06-23T11:42:33.218Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 38,
    "title": "Modify communication tab to delete messages instead of marking as read",
    "short_description": "Change the Streamlit communication page behavior to delete messages directly from database instead of marking them as read, simplifying message management workflow.",
    "detailed_description": "Modify the communication tab in the Streamlit interface to delete messages instead of marking them as read for simplified message management.\n\n**Requirements:**\n- Replace \"Mark as Read\" functionality with direct message deletion\n- Update communication.py to call UserMessageManager.deleteMessage() instead of markAsRead()\n- Change button text from \"✓ Mark as Read\" to \"🗑️ Delete\" or similar\n- Remove read status tracking and display logic\n- Maintain message statistics (total messages, but remove read/unread counts)\n- Preserve all other functionality (message display, context information, etc.)\n\n**Acceptance Criteria:**\n- Clicking the button deletes the message permanently from to_user.json\n- Button text reflects deletion action (not read marking)\n- Message disappears from interface after deletion\n- No read status indicators needed (remove 🔵/✅ icons)\n- Message statistics updated to reflect simplified workflow\n- UserMessageManager.deleteMessage() method is properly called\n- Error handling for failed deletions\n- Confirmation dialog for deletion action (optional but recommended)\n\n**Technical Implementation:**\n- Modify delete_message() function in communication.py to call UserMessageManager\n- Update button UI and text to reflect deletion action\n- Remove read status logic and display elements\n- Simplify message statistics (total only)\n- Update help text to reflect new behavior\n\n**Files to Modify:**\n- .cursor/streamlit_app/pages/communication.py (main changes)\n- UserMessageManager.deleteMessage() already exists and functional\n\n**Impact:**\nSimplified message management where users can directly delete messages they've seen instead of marking them as read, reducing complexity and storage overhead.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/communication.py"
    ],
    "validation_criteria": "Task is complete when: (1) Communication page shows delete buttons instead of mark as read, (2) Clicking delete removes message from to_user.json file, (3) Message disappears from interface after deletion, (4) No read status indicators displayed, (5) Error handling works for failed deletions, (6) Message statistics reflect simplified workflow, (7) All other communication page functionality preserved",
    "created_date": "2025-06-23T12:18:48.159Z",
    "updated_date": "2025-06-23T12:51:39.461Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 39,
    "title": "Fix Add Request page graph and remove subtitle",
    "short_description": "Fix the non-functional request evolution graph in Add Request page that shows 0 points and remove the \"Current Workload Trend\" subtitle as requested by user.",
    "detailed_description": "**Problem Analysis:**\nThe request evolution graph in the Add Request page currently shows 0 points and doesn't display the historical evolution of pending requests over time. The user also wants to remove the \"Current Workload Trend\" subtitle.\n\n**Issues to Fix:**\n1. **Graph not displaying data**: The get_request_evolution_data() function may have issues with timestamp parsing or data processing\n2. **Timeline events logic**: The function needs to correctly analyze creation and archiving timestamps from userbrief.json\n3. **Subtitle removal**: Remove \"Current Workload Trend\" subtitle (line 340 in add_request.py)\n\n**Requirements:**\n- Fix the graph to properly show request evolution over time based on timestamps\n- Display workload evolution showing when requests are created (increase) and archived (decrease)\n- Use creation timestamps (created_at) and archiving timestamps (history.mark_archived) from userbrief.json\n- Remove the \"Current Workload Trend\" subtitle as requested\n- Ensure the graph shows actual historical data with proper timeline analysis\n\n**Technical Implementation:**\n- Debug and fix get_request_evolution_data() function in add_request.py\n- Improve timestamp parsing and timeline event processing\n- Ensure proper calculation of pending requests count over time\n- Test with actual userbrief.json data to verify graph displays correctly\n- Remove st.subheader(\"📈 Current Workload Trend\") line\n\n**Acceptance Criteria:**\n- Graph displays actual data points instead of being empty\n- Timeline correctly shows request creation and archiving events\n- Workload evolution accurately reflects when requests are added/processed\n- Subtitle \"Current Workload Trend\" is removed\n- Graph provides meaningful visual insight into request processing patterns",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Graph displays actual data points showing request evolution, (2) Timeline correctly processes creation and archiving timestamps, (3) Workload trend accurately reflects request processing activity, (4) \"Current Workload Trend\" subtitle is removed, (5) Graph provides meaningful historical insights, (6) Testing confirms graph works with real userbrief.json data",
    "created_date": "2025-06-23T12:20:30.787Z",
    "updated_date": "2025-06-23T12:53:15.903Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 40,
    "title": "Test and display long-term memories in Memory tab with edit/delete functionality",
    "short_description": "Investigate why long-term memories are not displayed in Streamlit Memory tab, test the long-term memory system by creating test memories, and ensure edit/delete functionality works properly.",
    "detailed_description": "Test and fix the long-term memory display system in the Streamlit Memory tab to ensure proper functionality.\n\n**Requirements:**\n- Investigate why long-term memories don't appear in Memory tab despite working remember tool\n- Test the long-term memory system by creating test memories via remember tool\n- Verify file path consistency between remember tool and Streamlit interface\n- Ensure edit/delete functionality works correctly for long-term memories\n- Validate that new memories created via remember tool appear in interface\n\n**Technical Investigation:**\n- Check file path discrepancy: remember tool uses `.cursor/memory-bank/workflow/long_term_memory.json` vs Streamlit uses `.cursor/memory-bank/long_term_memory.json`\n- Test remember tool with long_term_memory parameter to create test memories\n- Verify Streamlit interface reads from correct location\n- Test edit/delete buttons functionality for long-term memories\n- Ensure consistency between remember tool storage and Streamlit display\n\n**Acceptance Criteria:**\n- Long-term memories created via remember tool appear in Streamlit Memory tab\n- Edit functionality allows modification of memory content with proper saving\n- Delete functionality removes memories with confirmation dialog\n- File path consistency ensured between backend and frontend\n- Test memories successfully created and displayed\n- Interface matches functionality described in other tabs (similar to request editing)\n\n**Testing Plan:**\n1. Create test long-term memories using remember tool\n2. Verify memories appear in Streamlit interface\n3. Test edit functionality on existing memories\n4. Test delete functionality with confirmation\n5. Verify file persistence after operations",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "cursor/streamlit_app/pages/memory.py",
      ".cursor/mcp/memory-bank-mcp/mcp_tools/remember.js",
      ".cursor/memory-bank/workflow/long_term_memory.json",
      ".cursor/memory-bank/long_term_memory.json"
    ],
    "validation_criteria": "Task is complete when: (1) Long-term memories created via remember tool appear in Streamlit Memory tab, (2) Edit functionality works correctly with proper content saving, (3) Delete functionality works with confirmation dialog, (4) File path consistency is ensured between remember tool and Streamlit interface, (5) At least 2-3 test memories are successfully created and displayed, (6) All edit/delete operations persist correctly to storage files.",
    "created_date": "2025-06-23T12:22:24.080Z",
    "updated_date": "2025-06-23T12:54:47.112Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 41,
    "title": "Fix Add Request bugs: Ctrl+Enter shortcut, text clearing, and balloon animation",
    "short_description": "Fix persistent bugs in Add Request interface: unreliable Ctrl+Enter shortcut, text not clearing after submission, and missing balloon animation despite existing implementation.",
    "detailed_description": "Fix critical user experience bugs in the Streamlit Add Request interface that prevent proper form submission and feedback.\n\n**Issues to Fix:**\n1. **Ctrl+Enter shortcut unreliable**: JavaScript implementation doesn't consistently trigger form submission\n2. **Text not clearing**: Despite `st.session_state.request_text = \"\"` and `st.rerun()`, text sometimes persists\n3. **Missing balloon animation**: `st.balloons()` is implemented but not consistently showing\n\n**Root Cause Analysis:**\n- JavaScript selector `'textarea[data-testid=\"stTextArea\"]'` may be inconsistent across Streamlit versions\n- Button selector `'button[kind=\"primary\"]'` may not reliably find the submit button\n- Session state and rerun timing issues may prevent proper text clearing\n- Balloon animation may be blocked by subsequent UI updates\n\n**Technical Implementation:**\n1. **Improve Ctrl+Enter JavaScript**: Use more robust selectors and event handling\n2. **Fix text clearing**: Implement more reliable session state management with proper timing\n3. **Ensure balloon animation**: Verify timing and placement of st.balloons() call\n4. **Add fallback mechanisms**: Implement alternative approaches if primary methods fail\n\n**Acceptance Criteria:**\n- Ctrl+Enter consistently submits form in all browsers\n- Text area always clears after successful submission\n- Balloon animation always appears after successful submission\n- No regression in existing functionality\n- Improved user feedback and reliability\n\n**Testing Requirements:**\n- Test across different browsers (Chrome, Firefox, Safari)\n- Test rapid successive submissions\n- Test with various text lengths\n- Verify session state behavior consistency\n\n**Files to Modify:**\n- `.cursor/streamlit_app/pages/add_request.py`",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) Ctrl+Enter shortcut works consistently across browsers, (2) Text area always clears after successful submission, (3) Balloon animation appears reliably after submission, (4) No timing issues or race conditions, (5) User experience is smooth and reliable, (6) All edge cases are handled properly",
    "created_date": "2025-06-23T12:24:32.087Z",
    "updated_date": "2025-06-23T12:49:12.572Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 42,
    "title": "Simplify main dashboard by removing accordions and showing memories directly",
    "short_description": "Modify the main Streamlit dashboard to remove expandable accordions and display all memory content directly, while maintaining the 3-tab structure (Past, Present, Future) with Present as default tab.",
    "detailed_description": "**OBJECTIF :**\nSimplifier drastiquement l'interface de la page principale de l'Agent Dashboard en supprimant tous les accordéons (st.expander) et en affichant directement le contenu des souvenirs sans nécessiter de clic de l'utilisateur.\n\n**SPÉCIFICATIONS TECHNIQUES :**\n\n1. **Suppression des accordéons :**\n   - Éliminer tous les `st.expander()` pour chaque souvenir individuel\n   - Afficher directement le contenu de chaque mémoire sans interaction requise\n   - Conserver la structure organisationnelle mais rendre tout visible immédiatement\n\n2. **Maintien de la structure à onglets :**\n   - Garder les 4 onglets existants : \"🕐 Past\", \"⏰ Present\", \"🔮 Future\", \"🧠 Long Term\"\n   - Modifier l'onglet par défaut pour afficher \"Present\" au lieu du premier onglet\n   - Permettre la navigation entre onglets comme alternative d'organisation\n\n3. **Affichage direct des souvenirs :**\n   - Chaque souvenir doit être affiché dans une section distincte mais ouverte\n   - Utiliser des séparateurs visuels (st.markdown(\"---\")) entre les souvenirs\n   - Maintenir les informations de timestamp et numérotation des souvenirs\n   - Conserver la fonctionnalité d'affichage du plus récent en premier\n\n4. **Alternative d'implémentation :**\n   - Si l'affichage par défaut ouvert n'est pas possible techniquement avec Streamlit\n   - Supprimer complètement les accordéons et afficher tout le contenu en format linéaire\n   - Organiser le contenu par sections claires avec titres et séparateurs\n\n**CRITÈRES D'ACCEPTATION :**\n- L'utilisateur peut voir immédiatement tout le contenu sans cliquer\n- La navigation par onglets fonctionne correctement avec \"Present\" par défaut\n- Tous les souvenirs sont visibles et organisés chronologiquement\n- L'interface reste lisible et bien structurée malgré l'affichage direct\n- La fonctionnalité de rafraîchissement et sidebar sont préservées\n\n**FICHIER À MODIFIER :**\n- `.cursor/streamlit_app/app.py` : Modification de la section d'affichage des souvenirs (lignes ~60-100)\n\n**IMPACT UTILISATEUR :**\nInterface beaucoup plus simple et directe, éliminant la friction des clics multiples pour accéder au contenu des souvenirs tout en conservant l'organisation par onglets temporels.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "cursor/streamlit_app/app.py"
    ],
    "validation_criteria": "Task is complete when: (1) All st.expander elements for individual memories are removed, (2) Memory content is displayed directly without requiring clicks, (3) Tab structure is maintained with Present tab as default, (4) All memories remain visible and chronologically organized, (5) Interface remains clean and readable with proper visual separators, (6) Auto-refresh and sidebar functionality continue to work correctly.",
    "created_date": "2025-06-23T12:26:39.294Z",
    "updated_date": "2025-06-23T12:47:50.747Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 43,
    "title": "Remove Current user brief status graph and About New System callout from Add Request page",
    "short_description": "Simplify the Add Request page by removing the \"Current user brief status\" graph with its subtitle and the \"About New System\" callout section at the bottom, as requested by the user for a cleaner interface.",
    "detailed_description": "**OBJECTIF :**\nSimplifier l'interface de la page Add Request en supprimant deux éléments spécifiques identifiés par l'utilisateur comme non nécessaires.\n\n**ÉLÉMENTS À SUPPRIMER :**\n\n1. **Graphique \"Current user brief status\" :**\n   - Supprimer la section complète du graphique avec le sous-titre \"📈 Current Workload Trend\"\n   - Éliminer les lignes ~340-360 dans add_request.py incluant :\n     - `st.subheader(\"📈 Current Workload Trend\")`\n     - Le graphique evolution_data et st.line_chart\n     - Les métriques associées (Current Pending, Peak Workload, Average Workload)\n   - Conserver uniquement les métriques de statut userbrief (Total, New, In Progress, Archived)\n\n2. **Section \"About the New System\" :**\n   - Supprimer complètement la section d'information en bas de page\n   - Éliminer les lignes ~475-487 incluant :\n     - `st.header(\"ℹ️ About the New System\")`\n     - Le contenu informatif st.info avec les explications du système\n   - Supprimer aussi la ligne sidebar info sur l'auto-refresh\n\n**SPÉCIFICATIONS TECHNIQUES :**\n- Modifier `.cursor/streamlit_app/pages/add_request.py`\n- Conserver toutes les autres fonctionnalités :\n  - Formulaire d'ajout de requête avec ballons et Ctrl+Enter\n  - Section \"📊 Current Userbrief Status\" avec métriques\n  - Section \"🆕 Unprocessed Requests\" avec édition inline\n  - Toutes les fonctions helper (add_request_via_mcp, get_userbrief_status, etc.)\n\n**CRITÈRES D'ACCEPTATION :**\n- Le graphique \"Current Workload Trend\" et son sous-titre sont complètement supprimés\n- La section \"About the New System\" en bas de page est supprimée\n- L'interface Add Request reste fonctionnelle pour l'ajout et la gestion des requêtes\n- Les métriques de statut userbrief (Total, New, In Progress, Archived) sont conservées\n- Aucune régression sur les fonctionnalités existantes (ajout, édition, suppression)\n- Interface plus épurée et simplifiée selon la demande utilisateur\n\n**IMPACT UTILISATEUR :**\nInterface Add Request simplifiée avec suppression des éléments visuels jugés non essentiels, permettant une meilleure concentration sur les fonctionnalités principales d'ajout et de gestion des requêtes.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task is complete when: (1) \"Current user brief status\" graph with \"📈 Current Workload Trend\" subtitle is completely removed, (2) \"About the New System\" section at bottom of page is removed, (3) All other Add Request functionality remains intact (form submission, balloons, Ctrl+Enter, editing), (4) Userbrief status metrics (Total, New, In Progress, Archived) are preserved, (5) Unprocessed requests section with inline editing works correctly, (6) Interface is cleaner and more focused on core functionality, (7) No regressions in existing features.",
    "created_date": "2025-06-23T12:28:59.602Z",
    "updated_date": "2025-06-23T12:47:02.347Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 44,
    "title": "Enhance remember tool to provide example requests when suggesting task-decomposition",
    "short_description": "Modify the remember tool to include an example unprocessed request when suggesting task-decomposition, eliminating the need for agents to manually check userbrief and providing immediate context for processing.",
    "detailed_description": "**OBJECTIF :**\nAméliorer l'outil remember pour qu'il fournisse automatiquement un exemple de requête à traiter lorsqu'il indique à l'agent d'appeler la règle task-decomposition.\n\n**PROBLÈME ACTUEL :**\nQuand l'outil remember détecte des requêtes non traitées dans le userbrief, il indique simplement à l'agent d'appeler task-decomposition sans fournir de contexte sur les requêtes en attente. L'agent doit alors manuellement vérifier le userbrief.\n\n**SOLUTION PROPOSÉE :**\nModifier la logique de l'outil remember pour qu'il :\n1. Détecte automatiquement les requêtes avec statut \"new\" dans userbrief.json\n2. Inclue un exemple de requête (la plus ancienne non traitée) dans sa réponse\n3. Fournisse un aperçu du contenu pour orienter l'agent\n\n**SPÉCIFICATIONS TECHNIQUES :**\n\n1. **Modification de remember.js :**\n   - Ajouter une fonction pour lire et analyser userbrief.json\n   - Identifier les requêtes avec statut \"new\" \n   - Sélectionner la plus ancienne requête non traitée (plus petit ID avec statut \"new\")\n   - Inclure les détails de cette requête dans la réponse du tool\n\n2. **Format de réponse amélioré :**\n   ```\n   \"Il y a X requêtes non traitées dans le userbrief. Voici un exemple de requête à traiter :\n   \n   Requête #XX (créée le YYYY-MM-DD):\n   [Premier extrait de 200 caractères du contenu...]\n   \n   Vous devez appeler la règle task-decomposition pour traiter ces requêtes.\"\n   ```\n\n3. **Gestion d'erreurs :**\n   - Si userbrief.json n'est pas accessible, utiliser le message actuel\n   - Si aucune requête \"new\" trouvée, ne pas mentionner d'exemple\n   - Gérer les cas où le fichier userbrief est corrompu\n\n**CRITÈRES D'ACCEPTATION :**\n- L'outil remember détecte automatiquement les requêtes non traitées\n- Il fournit un exemple concret de requête dans sa réponse\n- L'agent n'a plus besoin de vérifier manuellement le userbrief\n- La réponse inclut suffisamment de contexte pour orienter l'agent\n- Le système reste robuste en cas d'erreur de lecture du userbrief\n- Les performances de l'outil remember ne sont pas dégradées\n\n**FICHIERS À MODIFIER :**\n- `.cursor/mcp/memory-bank-mcp/mcp_tools/remember.js`\n- Possiblement `.cursor/mcp/memory-bank-mcp/mcp_tools/utils.js` pour helper functions\n\n**IMPACT WORKFLOW :**\nAmélioration significative de l'efficacité du workflow autonome en éliminant une étape manuelle de vérification et en fournissant un contexte immédiat pour la décomposition de tâches.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/mcp/memory-bank-mcp/mcp_tools/remember.js",
      ".cursor/mcp/memory-bank-mcp/mcp_tools/utils.js"
    ],
    "validation_criteria": "Task is complete when: (1) Remember tool automatically detects unprocessed requests in userbrief.json, (2) Tool provides example of oldest unprocessed request in response, (3) Response includes request ID, creation date, and content preview (200 chars), (4) Agent no longer needs to manually check userbrief when task-decomposition is suggested, (5) Error handling works for inaccessible or corrupted userbrief files, (6) Tool performance remains optimal, (7) Testing confirms improved workflow efficiency with example requests provided.",
    "created_date": "2025-06-23T12:34:27.772Z",
    "updated_date": "2025-06-23T12:39:13.624Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 45,
    "title": "Manually delete all legacy messages from to_user.json",
    "short_description": "Clean up the to_user.json file by manually removing all existing legacy messages that cannot be automatically deleted by the new deletion system, ensuring a fresh start for the communication system.",
    "detailed_description": "**OBJECTIF :**\nNettoyer manuellement le fichier to_user.json en supprimant tous les messages existants qui sont des résidus de l'ancien système et qui ne seront jamais supprimés automatiquement par le nouveau système de suppression.\n\n**CONTEXTE DU PROBLÈME :**\n- L'ancien système marquait les messages comme \"read\" au lieu de les supprimer\n- Le nouveau système (tâche #38) supprime directement les messages au lieu de les marquer comme lus\n- Les 9 messages existants dans to_user.json sont des résidus de l'ancien système\n- Ces messages ne seront jamais supprimés automatiquement car ils utilisent l'ancien format\n\n**MESSAGES À SUPPRIMER :**\nTous les messages actuellement présents (IDs 1-9) dans `.cursor/memory-bank/workflow/to_user.json` :\n- Message #1: \"Test message from direct script\"\n- Message #2: \"Parfait ! Le système fonctionne correctement...\"\n- Message #3: \"Test réussi ! La fonctionnalité user_message...\"\n- Message #4: \"Tâche #29 terminée ! La fonctionnalité...\"\n- Message #5: \"Page de communication créée ! Vous pouvez...\"\n- Message #6: \"🎉 Toutes les tâches sont terminées !...\"\n- Message #7: \"Système Memory Bank MCP redémarré...\"\n- Message #8: \"Workflow autonome complètement validé !...\"\n- Message #9: \"Requête #37 traitée avec succès !...\"\n\n**SPÉCIFICATIONS TECHNIQUES :**\n1. **Nettoyage complet du fichier :**\n   - Vider le tableau \"messages\" dans to_user.json\n   - Réinitialiser \"last_id\" à 0\n   - Conserver la structure JSON et la version\n\n2. **Structure finale souhaitée :**\n   ```json\n   {\n     \"version\": \"1.0.0\",\n     \"messages\": [],\n     \"last_id\": 0\n   }\n   ```\n\n3. **Validation post-nettoyage :**\n   - Vérifier que le fichier reste valide JSON\n   - Confirmer que l'interface Streamlit Communication affiche correctement l'état vide\n   - Tester qu'un nouveau message peut être ajouté correctement\n\n**CRITÈRES D'ACCEPTATION :**\n- Le fichier to_user.json contient un tableau messages vide\n- last_id est réinitialisé à 0\n- La structure JSON reste valide et fonctionnelle\n- L'interface Streamlit Communication affiche correctement l'absence de messages\n- Le système peut ajouter de nouveaux messages après le nettoyage\n- Aucune régression dans la fonctionnalité de communication\n\n**IMPACT UTILISATEUR :**\nInterface de communication propre sans résidus de l'ancien système, permettant un démarrage frais avec le nouveau système de suppression directe des messages.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/memory-bank/workflow/to_user.json"
    ],
    "validation_criteria": "Task is complete when: (1) All 9 legacy messages are removed from to_user.json, (2) Messages array is empty [], (3) last_id is reset to 0, (4) JSON structure remains valid, (5) Streamlit Communication page displays empty state correctly, (6) New messages can be added successfully after cleanup, (7) No regressions in communication functionality.",
    "created_date": "2025-06-23T12:34:44.572Z",
    "updated_date": "2025-06-23T12:36:38.592Z",
    "parent_id": null,
    "priority": 2
  },
  {
    "id": 46,
    "title": "Add time estimation and improve task detail display in Task Status interface",
    "short_description": "Enhance Task Status page with time estimation for remaining tasks based on historical completion data, and replace small accordion task details with full-page view for better usability.",
    "detailed_description": "**OBJECTIF :**\nAméliorer significativement l'interface Task Status avec estimation temporelle et meilleur affichage des détails de tâches.\n\n**FONCTIONNALITÉS À AJOUTER :**\n\n1. **Estimation du temps de completion :**\n   - Calculer le temps moyen de résolution d'une tâche à partir des timestamps\n   - Calculer l'écart-type pour fournir une marge d'erreur\n   - Estimer le temps restant pour terminer toutes les tâches en cours\n   - Afficher l'estimation avec intervalle de confiance (ex: \"2.5 ± 0.8 heures\")\n\n2. **Amélioration de l'affichage des détails :**\n   - Remplacer le petit accordéon \"Task Details\" par une vue pleine page\n   - Créer une div expansible qui prend tout l'espace disponible\n   - Améliorer la lisibilité des informations détaillées de la tâche\n   - Rendre l'interface plus utilisable pour consulter les détails\n\n**SPÉCIFICATIONS TECHNIQUES :**\n\n1. **Calcul des statistiques temporelles :**\n   ```python\n   def calculate_task_completion_stats(tasks):\n       completed_tasks = [t for t in tasks if t['status'] == 'DONE']\n       completion_times = []\n       for task in completed_tasks:\n           start = datetime.fromisoformat(task['created_date'])\n           end = datetime.fromisoformat(task['updated_date'])\n           completion_times.append((end - start).total_seconds() / 3600)  # heures\n       \n       if completion_times:\n           mean_time = statistics.mean(completion_times)\n           std_dev = statistics.stdev(completion_times) if len(completion_times) > 1 else 0\n           return mean_time, std_dev\n       return None, None\n   ```\n\n2. **Estimation pour tâches restantes :**\n   ```python\n   def estimate_remaining_time(remaining_tasks_count, mean_time, std_dev):\n       if mean_time is not None:\n           estimated_total = remaining_tasks_count * mean_time\n           margin_error = remaining_tasks_count * std_dev if std_dev else 0\n           return estimated_total, margin_error\n       return None, None\n   ```\n\n3. **Amélioration de l'affichage des détails :**\n   - Remplacer `st.expander(\"📋 Task Details\")` par une solution plus visible\n   - Utiliser `st.container()` ou `st.columns()` pour créer un affichage étendu\n   - Améliorer la mise en forme des informations détaillées\n   - Ajouter plus d'espace et de clarté visuelle\n\n**CRITÈRES D'ACCEPTATION :**\n- Affichage du temps moyen de résolution des tâches terminées\n- Calcul et affichage de l'écart-type pour la marge d'erreur\n- Estimation du temps restant pour toutes les tâches en cours\n- Format d'affichage clair : \"Temps estimé: X.X ± Y.Y heures\"\n- Remplacement du petit accordéon par une vue détaillée expansible\n- Amélioration significative de la lisibilité des détails de tâche\n- Interface plus utilisable pour consulter les informations détaillées\n- Gestion des cas où il n'y a pas assez de données historiques\n\n**FICHIERS À MODIFIER :**\n- `.cursor/streamlit_app/pages/task_status.py`\n- Possiblement ajouter des fonctions helper pour les calculs statistiques\n\n**IMPACT UTILISATEUR :**\nInterface Task Status beaucoup plus informative avec prédictions temporelles et détails de tâches facilement consultables, permettant une meilleure planification et suivi des projets.",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/task_status.py"
    ],
    "validation_criteria": "Task is complete when: (1) Time estimation displays average completion time and standard deviation from historical data, (2) Remaining time estimation shows total time needed with margin of error, (3) Task details view is replaced with full-page expandable display, (4) Details are much more readable and usable than small accordion, (5) Statistics handle edge cases (no completed tasks, single task), (6) Time format is user-friendly (hours with decimals), (7) Interface provides meaningful project planning insights.",
    "created_date": "2025-06-23T12:35:03.371Z",
    "updated_date": "2025-06-23T12:46:13.731Z",
    "parent_id": null,
    "priority": 3
  },
  {
    "id": 47,
    "title": "Conduct workflow analysis and document next_rule response structure",
    "short_description": "Perform detailed analysis of the autonomous workflow system to identify problematic or suboptimal aspects, provide recommendations via user communication tools, and document the next_rule response structure in README.",
    "detailed_description": "**OBJECTIF :**\nEffectuer une analyse complète du système de workflow autonome après utilisation extensive, identifier les points problématiques, et documenter la structure des réponses next_rule.\n\n**PARTIE 1: ANALYSE DÉTAILLÉE DU WORKFLOW**\n\n**Domaines d'analyse à couvrir :**\n1. **Efficacité des étapes du workflow :**\n   - Pertinence de chaque règle (start-workflow, task-decomposition, implementation, fix, context-update, experience-execution)\n   - Logique de routage entre les étapes\n   - Points de friction ou d'inefficacité observés\n\n2. **Qualité des textes et descriptions :**\n   - Clarté des instructions dans chaque règle\n   - Redondance d'informations entre étapes\n   - Pertinence des contextes fournis\n\n3. **Outils et fonctionnalités MCP :**\n   - Utilité et ergonomie des outils MemoryBankMCP\n   - Cohérence des réponses des outils\n   - Manque d'informations ou surcharge informationnelle\n\n4. **Gestion de la mémoire et du contexte :**\n   - Efficacité du système de souvenirs (working memory)\n   - Pertinence des souvenirs à long terme\n   - Gestion du contexte entre sessions\n\n5. **Interface utilisateur et communication :**\n   - Ergonomie de l'interface Streamlit\n   - Qualité de la communication agent-utilisateur\n   - Facilité de suivi et de contrôle du workflow\n\n**PARTIE 2: DOCUMENTATION TECHNIQUE**\n\n**Structure à documenter pour chaque règle next_rule :**\n```markdown\n## Next Rule Response Structure\n\n### start-workflow\n**Returns:**\n- Project brief and technical context\n- Recent memories (last 10 working memories)\n- Long-term memories (relevant ones)\n- Current tasks status\n- Unprocessed user requests\n- System state information\n\n### task-decomposition\n**Returns:**\n- Oldest unprocessed user request details\n- Context for task creation\n- Guidance for request analysis\n- Task creation instructions\n- Archiving requirements\n\n### implementation\n**Returns:**\n- Next task to execute\n- Task details and specifications\n- Context about project state\n- Implementation guidance\n- Success criteria\n\n### fix\n**Returns:**\n- Error context and debugging info\n- Suggested resolution approaches\n- Related task information\n- Recovery guidance\n\n### context-update\n**Returns:**\n- Updated project context\n- Refreshed technical information\n- Memory consolidation results\n- State synchronization info\n\n### experience-execution\n**Returns:**\n- Testing and validation guidance\n- User experience scenarios\n- Quality assurance criteria\n- Validation procedures\n```\n\n**LIVRABLES :**\n1. **Rapport d'analyse via communication utilisateur :**\n   - Observations détaillées sur les aspects problématiques\n   - Recommandations d'amélioration spécifiques\n   - Suggestions de modifications concrètes\n   - Points forts à conserver\n\n2. **Documentation README mise à jour :**\n   - Section complète sur la structure des réponses next_rule\n   - Exemples concrets pour chaque type de réponse\n   - Guide de référence pour les développeurs\n\n**CRITÈRES D'ACCEPTATION :**\n- Analyse approfondie couvrant tous les aspects du workflow\n- Rapport détaillé envoyé via outils de communication utilisateur\n- Identification claire des points problématiques et suboptimaux\n- Recommandations concrètes et actionables\n- Documentation complète de la structure next_rule dans README\n- Exemples pratiques pour chaque type de réponse\n- Guide de référence utilisable pour le développement futur",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      "README.md",
      ".cursor/mcp/memory-bank-mcp/mcp_tools/remember.js"
    ],
    "validation_criteria": "Task is complete when: (1) Comprehensive workflow analysis report is sent via user communication tools, (2) All problematic and suboptimal aspects are identified with specific examples, (3) Concrete improvement recommendations are provided, (4) README contains detailed next_rule response structure documentation, (5) Each workflow rule response format is clearly documented with examples, (6) Developer reference guide is complete and usable, (7) Analysis covers efficiency, text quality, tools, memory management, and UI aspects.",
    "created_date": "2025-06-23T12:35:24.509Z",
    "updated_date": "2025-06-23T12:41:58.991Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 48,
    "title": "Simplify Communication tab message deletion interface",
    "short_description": "Remove confirmation dialogs from Communication tab and replace with direct deletion using validation icon. Users want streamlined message deletion without popup confirmations.",
    "detailed_description": "**Requirements:**\n- Remove existing confirmation dialog for message deletion in Communication tab\n- Replace with direct deletion mechanism using validation icon\n- Ensure messages are properly deleted from database without confirmation step\n- Maintain user feedback through visual cues (icon state changes, success indicators)\n\n**Acceptance Criteria:**\n- Clicking delete/validation icon immediately removes message from database\n- No confirmation dialogs appear during deletion process\n- Visual feedback confirms successful deletion\n- Database consistency maintained during deletion operations\n- UI remains responsive during deletion\n\n**Technical Notes:**\n- Modify communication.py to remove st.dialog() confirmation flows\n- Update delete button handlers to directly call database deletion\n- Ensure proper error handling for failed deletions\n- Test with multiple message types and states",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/communication.py"
    ],
    "validation_criteria": "Task complete when: (1) No confirmation dialogs appear when deleting messages, (2) Messages are immediately removed from interface and database, (3) Visual feedback confirms deletion success, (4) No errors occur during deletion process, (5) All message types can be deleted successfully",
    "created_date": "2025-06-23T13:01:55.413Z",
    "updated_date": "2025-06-23T13:04:41.783Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 49,
    "title": "Fix Add Request interface bugs and functionality",
    "short_description": "Resolve multiple issues in Add Request interface: non-functional Ctrl+Enter shortcut, text not clearing after submission, and missing balloon animations for user feedback.",
    "detailed_description": "**Requirements:**\n- Fix Ctrl+Enter keyboard shortcut to properly submit requests\n- Ensure text area clears completely after successful submission\n- Restore balloon animations for submission feedback\n- Maintain all existing functionality while fixing these bugs\n\n**Acceptance Criteria:**\n- Ctrl+Enter keyboard shortcut submits requests reliably\n- Text area content clears immediately after successful submission\n- Balloon animations appear for submission success/failure states\n- Form validation continues to work properly\n- No regression in existing features\n\n**Technical Notes:**\n- Debug JavaScript event handlers for Ctrl+Enter functionality\n- Check text area clearing logic in submission callback\n- Verify balloon animation triggering conditions\n- Test form submission flow end-to-end\n- Ensure proper state management during submission process",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/add_request.py"
    ],
    "validation_criteria": "Task complete when: (1) Ctrl+Enter reliably submits requests, (2) Text area clears after successful submission, (3) Balloon animations show for all submission states, (4) Form validation works correctly, (5) No JavaScript errors in browser console",
    "created_date": "2025-06-23T13:02:01.622Z",
    "updated_date": "2025-06-23T13:05:45.558Z",
    "parent_id": null,
    "priority": 4
  },
  {
    "id": 50,
    "title": "Fix AttributeError in Memory tab long-term memory access",
    "short_description": "Resolve 'list' object has no attribute 'get' error at line 305 in memory.py when accessing long-term memories. The code expects a dictionary but receives a list object.",
    "detailed_description": "**Requirements:**\n- Fix AttributeError: 'list' object has no attribute 'get' at line 305 in memory.py\n- Ensure proper data type handling for long-term memory data structure\n- Maintain backward compatibility with existing memory data\n- Implement proper error handling for data type mismatches\n\n**Acceptance Criteria:**\n- Memory tab loads without AttributeError exceptions\n- Long-term memories display correctly regardless of data structure\n- Proper error handling for malformed memory data\n- No regression in memory display functionality\n- Robust handling of both list and dictionary memory formats\n\n**Technical Notes:**\n- Investigate line 305 in memory.py where long_term_data.get() is called\n- Determine if long_term_data should be dict or list based on context\n- Add type checking and conversion logic if needed\n- Review memory data loading and parsing logic\n- Test with various memory data formats and edge cases",
    "dependencies": [],
    "status": "DONE",
    "impacted_files": [
      ".cursor/streamlit_app/pages/memory.py"
    ],
    "validation_criteria": "Task complete when: (1) Memory tab loads without AttributeError, (2) Long-term memories display correctly, (3) Error handling prevents crashes on malformed data, (4) Both list and dict memory formats supported, (5) No console errors when accessing memory data",
    "created_date": "2025-06-23T13:02:10.036Z",
    "updated_date": "2025-06-23T13:03:58.950Z",
    "parent_id": null,
    "priority": 5
  }
]